
usb_kb.elf:     file format elf32-littlenios2
usb_kb.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00011c04 memsz 0x00011c04 flags r-x
    LOAD off    0x00012c24 vaddr 0x08011c24 paddr 0x08013710 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x000151fc vaddr 0x080151fc paddr 0x080151fc align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010ffc  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a6c  080111b8  080111b8  000121b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  08011c24  08013710  00012c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  080151fc  080151fc  000151fc  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0801535c  0801535c  00014710  2**0
                  CONTENTS
  7 .comment      00000039  00000000  00000000  00014710  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000d08  00000000  00000000  00014750  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00023533  00000000  00000000  00015458  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008e6a  00000000  00000000  0003898b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b109  00000000  00000000  000417f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002254  00000000  00000000  0004c900  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000033a6  00000000  00000000  0004eb54  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001704e  00000000  00000000  00051efa  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00068f48  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001338  00000000  00000000  00068f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006d48f  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0006d492  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006d495  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006d496  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0006d497  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0006d4a0  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0006d4a9  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  0006d4b2  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000004c  00000000  00000000  0006d4bc  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0004fd93  00000000  00000000  0006d508  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001bc l    d  .text	00000000 .text
080111b8 l    d  .rodata	00000000 .rodata
08011c24 l    d  .rwdata	00000000 .rwdata
080151fc l    d  .bss	00000000 .bss
0801535c l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
080001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
08000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
080151fc l     O .bss	00000002 ctl_reg.3283
080151fe l     O .bss	00000002 no_device.3284
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08011972 l     O .rodata	00000010 zeroes.4155
08011982 l     O .rodata	00000010 blanks.4154
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
08004570 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08006048 l     F .text	00000008 __fp_lock
08006050 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
08011c24 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
08012068 l     O .rwdata	00000020 lc_ctype_charset
08012048 l     O .rwdata	00000020 lc_message_charset
08012088 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
080119b4 l     O .rodata	0000000c p05.2652
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
080094cc l     F .text	000000fc __sprint_r.part.0
08011ae8 l     O .rodata	00000010 blanks.4099
08011ad8 l     O .rodata	00000010 zeroes.4100
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0800c0f4 l     F .text	00000070 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0800e9b4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800ead4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800eb00 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800ec04 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800ecfc l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800ede0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0800efc0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08013700 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0800f268 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800f3ac l     F .text	00000038 alt_dev_reg
08012670 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800f680 l     F .text	000001fc altera_avalon_jtag_uart_irq
0800f87c l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08010144 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
080105d0 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08010728 l     F .text	00000050 alt_get_errno
08010778 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08008b48 g     F .text	00000074 _mprec_log10
08008c34 g     F .text	00000088 __any_on
0800af94 g     F .text	00000064 _isatty_r
080119c0 g     O .rodata	00000028 __mprec_tinytens
0800ef08 g     F .text	00000078 alt_main
08002168 g     F .text	000000b8 _puts_r
0801525c g     O .bss	00000100 alt_irq
0800aff8 g     F .text	0000006c _lseek_r
08013710 g       *ABS*	00000000 __flash_rwdata_start
0800d448 g     F .text	00000084 .hidden __eqdf2
0801535c g       *ABS*	00000000 __alt_heap_start
0800212c g     F .text	0000003c printf
0800b26c g     F .text	0000009c _wcrtomb_r
080093c4 g     F .text	0000005c __sseek
080060f4 g     F .text	0000019c __sinit
0800b0d0 g     F .text	00000180 __swbuf_r
08006e04 g     F .text	00000070 _setlocale_r
08006064 g     F .text	00000078 __sfmoreglue
0800efa0 g     F .text	00000020 __malloc_unlock
08001ffc g     F .text	00000088 UsbGetRetryCnt
08007a44 g     F .text	0000013c memmove
080060dc g     F .text	00000018 _cleanup
08007c94 g     F .text	000000a8 _Balloc
0800d4cc g     F .text	000000d8 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
08000000 g     F .entry	0000000c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
0800af2c g     F .text	00000068 _fstat_r
08015218 g     O .bss	00000004 errno
08009340 g     F .text	00000008 __seofread
08015220 g     O .bss	00000004 alt_argv
0801b6d0 g       *ABS*	00000000 _gp
0800f238 g     F .text	00000030 usleep
080124f0 g     O .rwdata	00000180 alt_fd_list
08010b84 g     F .text	00000090 alt_find_dev
08007938 g     F .text	0000010c memcpy
08006058 g     F .text	0000000c _cleanup_r
0800e798 g     F .text	000000d0 .hidden __floatsidf
080106b0 g     F .text	00000078 alt_io_redirect
0800d5a4 g     F .text	000000ec .hidden __ltdf2
080111b8 g       *ABS*	00000000 __DTOR_END__
08002220 g     F .text	00000014 puts
08009220 g     F .text	00000068 __fpclassifyd
08008aa8 g     F .text	000000a0 __ratio
0800aa28 g     F .text	00000024 __vfiprintf_internal
0800fa74 g     F .text	00000208 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
08002100 g     F .text	0000002c _printf_r
0800c1f8 g     F .text	00000008 .hidden __udivsi3
0800ec54 g     F .text	000000a8 isatty
08011a10 g     O .rodata	000000c8 __mprec_tens
08006e74 g     F .text	0000000c __locale_charset
08015214 g     O .bss	00000004 __malloc_top_pad
08001688 g     F .text	00000268 UsbGetConfigDesc2
080136d8 g     O .rwdata	00000004 __mb_cur_max
08006ea4 g     F .text	0000000c _localeconv_r
080080c4 g     F .text	0000003c __i2b
080067f8 g     F .text	000004ac __sfvwrite_r
08009288 g     F .text	00000064 _sbrk_r
0800b064 g     F .text	0000006c _read_r
080136f8 g     O .rwdata	00000004 alt_max_fd
0800abf4 g     F .text	00000128 _fclose_r
08006018 g     F .text	00000030 fflush
08015210 g     O .bss	00000004 __malloc_max_sbrked_mem
0800c230 g     F .text	0000087c .hidden __adddf3
08008874 g     F .text	000000f0 __b2d
0800bac0 g     F .text	00000634 .hidden __umoddi3
0800ee30 g     F .text	000000d8 lseek
080136d0 g     O .rwdata	00000004 _global_impure_ptr
08008cbc g     F .text	00000564 _realloc_r
0801535c g       *ABS*	00000000 __bss_end
080104e0 g     F .text	000000f0 alt_iic_isr_register
08010a60 g     F .text	00000104 alt_tick
0800b46c g     F .text	00000654 .hidden __udivdi3
0800ad30 g     F .text	00000184 _fputwc_r
080119e8 g     O .rodata	00000028 __mprec_bigtens
08007ea8 g     F .text	00000104 __s2b
0800e868 g     F .text	000000a0 .hidden __floatunsidf
08008604 g     F .text	00000060 __mcmp
080010d8 g     F .text	00000100 UsbSetAddress
080063bc g     F .text	00000018 __fp_lock_all
08010494 g     F .text	0000004c alt_ic_irq_enabled
080109c8 g     F .text	00000098 alt_alarm_stop
08015228 g     O .bss	00000004 alt_irq_active
080000ec g     F .exceptions	000000d0 alt_irq_handler
080124c8 g     O .rwdata	00000028 alt_dev_null
08010128 g     F .text	0000001c alt_dcache_flush_all
08007fac g     F .text	00000068 __hi0bits
0800e718 g     F .text	00000080 .hidden __fixdfsi
08013710 g       *ABS*	00000000 __ram_rwdata_end
080136f0 g     O .rwdata	00000008 alt_dev_list
0800f2b8 g     F .text	000000f4 write
08011c24 g       *ABS*	00000000 __ram_rodata_end
0800eb50 g     F .text	000000b4 fstat
0800d5a4 g     F .text	000000ec .hidden __ledf2
08002084 g     F .text	0000007c UsbPrintMem
0800836c g     F .text	00000148 __pow5mult
080095e0 g     F .text	00001448 ___vfiprintf_internal_r
08015208 g     O .bss	00000004 __nlocale_changed
0800c200 g     F .text	00000008 .hidden __umodsi3
0801535c g       *ABS*	00000000 end
0800f5c0 g     F .text	000000c0 altera_avalon_jtag_uart_init
080111b8 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
0800e908 g     F .text	000000ac .hidden __clzsi2
0800fc7c g     F .text	00000218 altera_avalon_jtag_uart_write
080063ac g     F .text	00000004 __sfp_lock_acquire
08007850 g     F .text	000000e8 memchr
080022c0 g     F .text	00002154 ___vfprintf_internal_r
080019f0 g     F .text	00000100 UsbClassRequest
08006528 g     F .text	000002d0 _free_r
08006e80 g     F .text	00000010 __locale_mb_cur_max
08010fe0 g     F .text	000001a4 __call_exitprocs
08015204 g     O .bss	00000004 __mlocale_changed
080136dc g     O .rwdata	00000004 __malloc_sbrk_base
080001bc g     F .text	0000003c _start
0801522c g     O .bss	00000004 _alt_tick_rate
080084b4 g     F .text	00000150 __lshift
08015230 g     O .bss	00000004 _alt_nticks
0800f010 g     F .text	000000f8 read
0800f418 g     F .text	00000044 alt_sys_init
08010ec4 g     F .text	0000011c __register_exitproc
08008100 g     F .text	0000026c __multiply
0800f920 g     F .text	00000068 altera_avalon_jtag_uart_close
0800c208 g     F .text	00000028 .hidden __mulsi3
08011c24 g       *ABS*	00000000 __ram_rwdata_start
080111b8 g       *ABS*	00000000 __ram_rodata_start
08015234 g     O .bss	00000028 __malloc_current_mallinfo
08008964 g     F .text	00000144 __d2b
080011d8 g     F .text	00000148 UsbGetDeviceDesc1
0800f45c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08010d28 g     F .text	000000d4 alt_get_fd
0800ffd4 g     F .text	00000154 alt_busy_sleep
0800aab8 g     F .text	00000064 _close_r
08010e48 g     F .text	0000007c memcmp
0800f51c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0801535c g       *ABS*	00000000 __alt_stack_base
0800f56c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08004438 g     F .text	00000138 __swsetup_r
0800caac g     F .text	0000099c .hidden __divdf3
08006290 g     F .text	0000011c __sfp
08008bbc g     F .text	00000078 __copybits
080120c0 g     O .rwdata	00000408 __malloc_av_
080063b8 g     F .text	00000004 __sinit_lock_release
0800d690 g     F .text	00000800 .hidden __muldf3
080092ec g     F .text	00000054 __sread
08001f78 g     F .text	00000084 UsbWaitTDListDone
08010c14 g     F .text	00000114 alt_find_file
08010194 g     F .text	000000a0 alt_dev_llist_insert
0800ef80 g     F .text	00000020 __malloc_lock
0800f188 g     F .text	000000b0 sbrk
08005dd4 g     F .text	00000244 _fflush_r
0800ab1c g     F .text	000000d8 _calloc_r
080151fc g       *ABS*	00000000 __bss_start
08007b80 g     F .text	00000114 memset
080001f8 g     F .text	00000da0 main
08015224 g     O .bss	00000004 alt_envp
0801520c g     O .bss	00000004 __malloc_max_total_mem
0800f4bc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
080018f0 g     F .text	00000100 UsbSetConfig
0800b250 g     F .text	0000001c __swbuf
08009420 g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
0800ad1c g     F .text	00000014 fclose
08004798 g     F .text	0000163c _dtoa_r
0800708c g     F .text	000007c4 _malloc_r
0800b3e0 g     F .text	00000030 __ascii_wctomb
080136fc g     O .rwdata	00000004 alt_errno
08006ca4 g     F .text	000000a8 _fwalk
0800c164 g     F .text	00000048 .hidden __divsi3
080063ec g     F .text	0000013c _malloc_trim_r
08001af0 g     F .text	00000148 UsbGetHidDesc
080111b8 g       *ABS*	00000000 __CTOR_END__
08009428 g     F .text	000000a4 strcmp
080111b8 g       *ABS*	00000000 __flash_rodata_start
080111b8 g       *ABS*	00000000 __DTOR_LIST__
0800d448 g     F .text	00000084 .hidden __nedf2
08000fe0 g     F .text	0000003c UsbRead
0800f3e4 g     F .text	00000034 alt_irq_init
0800f108 g     F .text	00000080 alt_release_fd
08011af8 g     O .rodata	00000100 .hidden __clz_tab
08015200 g     O .bss	00000004 _PathLocale
08010dfc g     F .text	00000014 atexit
0800aa4c g     F .text	0000006c _write_r
08006eb0 g     F .text	0000001c setlocale
080136d4 g     O .rwdata	00000004 _impure_ptr
0801521c g     O .bss	00000004 alt_argc
08010290 g     F .text	0000005c _do_dtors
08006e9c g     F .text	00000008 __locale_cjk_lang
08000020 g       .exceptions	00000000 alt_irq_entry
08008814 g     F .text	00000060 __ulp
080063d4 g     F .text	00000018 __fp_unlock_all
080136e8 g     O .rwdata	00000008 alt_fs_list
08001c38 g     F .text	00000340 UsbGetReportDesc
08000020 g       *ABS*	00000000 __ram_exceptions_start
08006ecc g     F .text	0000000c localeconv
08010308 g     F .text	00000050 alt_ic_isr_register
08013710 g       *ABS*	00000000 _edata
0801535c g       *ABS*	00000000 _end
08000f98 g     F .text	00000048 UsbWrite
080001bc g       *ABS*	00000000 __ram_exceptions_end
0800f988 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
080103f4 g     F .text	000000a0 alt_ic_irq_disable
08009348 g     F .text	0000007c __swrite
080136e0 g     O .rwdata	00000004 __malloc_trim_threshold
08010b64 g     F .text	00000020 altera_nios2_qsys_irq_init
08006e90 g     F .text	0000000c __locale_msgcharset
08010e10 g     F .text	00000038 exit
08006d4c g     F .text	000000b8 _fwalk_reent
08008664 g     F .text	000001b0 __mdiff
0800c1ac g     F .text	0000004c .hidden __modsi3
10000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
080063b0 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
08011184 g     F .text	00000034 _exit
0800fe94 g     F .text	00000140 alt_alarm_start
08006ed8 g     F .text	000001b4 __smakebuf_r
08002234 g     F .text	0000008c strlen
0801086c g     F .text	0000015c open
0800d4cc g     F .text	000000d8 .hidden __gedf2
080136e4 g     O .rwdata	00000004 __wctomb
080095c8 g     F .text	00000018 __sprint_r
080102ec g     F .text	0000001c alt_icache_flush_all
08013704 g     O .rwdata	00000004 alt_priority_mask
08010358 g     F .text	0000009c alt_ic_irq_enable
08004414 g     F .text	00000024 __vfprintf_internal
0800b410 g     F .text	0000005c _wctomb_r
0800de90 g     F .text	00000888 .hidden __subdf3
08008014 g     F .text	000000b0 __lo0bits
080014f8 g     F .text	00000190 UsbGetConfigDesc1
08013708 g     O .rwdata	00000008 alt_alarm_list
08010234 g     F .text	0000005c _do_ctors
0800101c g     F .text	000000bc UsbSoftReset
0800b308 g     F .text	000000d8 wcrtomb
0800ea04 g     F .text	000000d0 close
08001320 g     F .text	000001d8 UsbGetDeviceDesc2
0800ed60 g     F .text	00000080 alt_load
0800aeb4 g     F .text	00000078 fputwc
00000000  w      *UND*	00000000 free
080063b4 g     F .text	00000004 __sinit_lock_acquire
08007d64 g     F .text	00000144 __multadd
08007d3c g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08406f14 	ori	at,at,444
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)

08000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 80000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000100:	0005313a 	rdctl	r2,ipending
 8000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000114:	00800044 	movi	r2,1
 8000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800011c:	e0fffb17 	ldw	r3,-20(fp)
 8000120:	e0bffc17 	ldw	r2,-16(fp)
 8000124:	1884703a 	and	r2,r3,r2
 8000128:	10001726 	beq	r2,zero,8000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	00c20074 	movhi	r3,2049
 8000130:	18d49704 	addi	r3,r3,21084
 8000134:	e0bffd17 	ldw	r2,-12(fp)
 8000138:	100490fa 	slli	r2,r2,3
 800013c:	1885883a 	add	r2,r3,r2
 8000140:	10800017 	ldw	r2,0(r2)
 8000144:	01020074 	movhi	r4,2049
 8000148:	21149704 	addi	r4,r4,21084
 800014c:	e0fffd17 	ldw	r3,-12(fp)
 8000150:	180690fa 	slli	r3,r3,3
 8000154:	20c7883a 	add	r3,r4,r3
 8000158:	18c00104 	addi	r3,r3,4
 800015c:	18c00017 	ldw	r3,0(r3)
 8000160:	1809883a 	mov	r4,r3
 8000164:	103ee83a 	callr	r2
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800016c:	0005313a 	rdctl	r2,ipending
 8000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 8000178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 800017c:	e0bffb17 	ldw	r2,-20(fp)
 8000180:	103fe31e 	bne	r2,zero,8000110 <__alt_data_end+0xf8000110>
 8000184:	00000706 	br	80001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 8000188:	e0bffc17 	ldw	r2,-16(fp)
 800018c:	1085883a 	add	r2,r2,r2
 8000190:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000194:	e0bffd17 	ldw	r2,-12(fp)
 8000198:	10800044 	addi	r2,r2,1
 800019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a0:	003fde06 	br	800011c <__alt_data_end+0xf800011c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001a4:	0001883a 	nop
}
 80001a8:	e037883a 	mov	sp,fp
 80001ac:	dfc00117 	ldw	ra,4(sp)
 80001b0:	df000017 	ldw	fp,0(sp)
 80001b4:	dec00204 	addi	sp,sp,8
 80001b8:	f800283a 	ret

Disassembly of section .text:

080001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001bc:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 80001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 80001c4:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 80001c8:	d6adb414 	ori	gp,gp,46800
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001cc:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 80001d0:	10947f14 	ori	r2,r2,20988

    movhi r3, %hi(__bss_end)
 80001d4:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 80001d8:	18d4d714 	ori	r3,r3,21340

    beq r2, r3, 1f
 80001dc:	10c00326 	beq	r2,r3,80001ec <_start+0x30>

0:
    stw zero, (r2)
 80001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001e8:	10fffd36 	bltu	r2,r3,80001e0 <__alt_data_end+0xf80001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001ec:	800ed600 	call	800ed60 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001f0:	800ef080 	call	800ef08 <alt_main>

080001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001f4:	003fff06 	br	80001f4 <__alt_data_end+0xf80001f4>

080001f8 <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
 80001f8:	defff804 	addi	sp,sp,-32
 80001fc:	dfc00715 	stw	ra,28(sp)
 8000200:	df000615 	stw	fp,24(sp)
 8000204:	df000604 	addi	fp,sp,24
	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
 8000208:	e03ffc0d 	sth	zero,-16(fp)
	int keycode = 0;
 800020c:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 toggle = 0;
 8000210:	e03ffa85 	stb	zero,-22(fp)

	alt_u16 code;
	int i,hot_plug_count;
	

	printf("USB keyboard setup...\n\n");
 8000214:	01020074 	movhi	r4,2049
 8000218:	21046e04 	addi	r4,r4,4536
 800021c:	80022200 	call	8002220 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
 8000220:	800101c0 	call	800101c <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
 8000224:	01005104 	movi	r4,324
 8000228:	000b883a 	mov	r5,zero
 800022c:	8000f980 	call	8000f98 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
 8000230:	01302414 	movui	r4,49296
 8000234:	017fffd4 	movui	r5,65535
 8000238:	8000f980 	call	8000f98 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
 800023c:	01006d04 	movi	r4,436
 8000240:	01409604 	movi	r5,600
 8000244:	8000f980 	call	8000f98 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
 8000248:	00811004 	movi	r2,1088
 800024c:	e0bffa0d 	sth	r2,-24(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
 8000250:	e0bffa0b 	ldhu	r2,-24(fp)
 8000254:	01005084 	movi	r4,322
 8000258:	100b883a 	mov	r5,r2
 800025c:	8000f980 	call	8000f98 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
 8000260:	00808404 	movi	r2,528
 8000264:	e0bffe0d 	sth	r2,-8(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
 8000268:	e0bffe0b 	ldhu	r2,-8(fp)
 800026c:	01302314 	movui	r4,49292
 8000270:	100b883a 	mov	r5,r2
 8000274:	8000f980 	call	8000f98 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
 8000278:	01007104 	movi	r4,452
 800027c:	000b883a 	mov	r5,zero
 8000280:	8000f980 	call	8000f98 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
 8000284:	01007184 	movi	r4,454
 8000288:	000b883a 	mov	r5,zero
 800028c:	8000f980 	call	8000f98 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
 8000290:	01007204 	movi	r4,456
 8000294:	000b883a 	mov	r5,zero
 8000298:	8000f980 	call	8000f98 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
 800029c:	01007284 	movi	r4,458
 80002a0:	000b883a 	mov	r5,zero
 80002a4:	8000f980 	call	8000f98 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
 80002a8:	01007304 	movi	r4,460
 80002ac:	000b883a 	mov	r5,zero
 80002b0:	8000f980 	call	8000f98 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
 80002b4:	01007384 	movi	r4,462
 80002b8:	000b883a 	mov	r5,zero
 80002bc:	8000f980 	call	8000f98 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
 80002c0:	01007404 	movi	r4,464
 80002c4:	000b883a 	mov	r5,zero
 80002c8:	8000f980 	call	8000f98 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
 80002cc:	01007484 	movi	r4,466
 80002d0:	000b883a 	mov	r5,zero
 80002d4:	8000f980 	call	8000f98 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
 80002d8:	01007504 	movi	r4,468
 80002dc:	000b883a 	mov	r5,zero
 80002e0:	8000f980 	call	8000f98 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
 80002e4:	01007584 	movi	r4,470
 80002e8:	000b883a 	mov	r5,zero
 80002ec:	8000f980 	call	8000f98 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
 80002f0:	01007604 	movi	r4,472
 80002f4:	000b883a 	mov	r5,zero
 80002f8:	8000f980 	call	8000f98 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
 80002fc:	01007684 	movi	r4,474
 8000300:	000b883a 	mov	r5,zero
 8000304:	8000f980 	call	8000f98 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
 8000308:	01007704 	movi	r4,476
 800030c:	000b883a 	mov	r5,zero
 8000310:	8000f980 	call	8000f98 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
 8000314:	01007784 	movi	r4,478
 8000318:	000b883a 	mov	r5,zero
 800031c:	8000f980 	call	8000f98 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
 8000320:	01007084 	movi	r4,450
 8000324:	01401c84 	movi	r5,114
 8000328:	8000f980 	call	8000f98 <UsbWrite>
	IOWR(CY7C67200_BASE,HPI_MAILBOX,COMM_EXEC_INT);
 800032c:	00f38054 	movui	r3,52737
 8000330:	00840034 	movhi	r2,4096
 8000334:	10800104 	addi	r2,r2,4
 8000338:	10c00035 	stwio	r3,0(r2)

	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
 800033c:	0001883a 	nop
 8000340:	00840034 	movhi	r2,4096
 8000344:	10800304 	addi	r2,r2,12
 8000348:	10800037 	ldwio	r2,0(r2)
 800034c:	10bfffcc 	andi	r2,r2,65535
 8000350:	103ffb26 	beq	r2,zero,8000340 <__alt_data_end+0xf8000340>
	{
	}
	while (IORD(CY7C67200_BASE,HPI_MAILBOX) != COMM_ACK)
 8000354:	0001883a 	nop
 8000358:	00840034 	movhi	r2,4096
 800035c:	10800104 	addi	r2,r2,4
 8000360:	10800037 	ldwio	r2,0(r2)
 8000364:	1083fb58 	cmpnei	r2,r2,4077
 8000368:	10000826 	beq	r2,zero,800038c <main+0x194>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IORD(CY7C67200_BASE,HPI_MAILBOX));
 800036c:	00840034 	movhi	r2,4096
 8000370:	10800104 	addi	r2,r2,4
 8000374:	10800037 	ldwio	r2,0(r2)
 8000378:	01020074 	movhi	r4,2049
 800037c:	21047404 	addi	r4,r4,4560
 8000380:	100b883a 	mov	r5,r2
 8000384:	800212c0 	call	800212c <printf>
		goto USB_HOT_PLUG;
 8000388:	003fa506 	br	8000220 <__alt_data_end+0xf8000220>
	}
	// STEP 1b end


	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
 800038c:	01007084 	movi	r4,450
 8000390:	01401d04 	movi	r5,116
 8000394:	8000f980 	call	8000f98 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
 8000398:	01007104 	movi	r4,452
 800039c:	01400f04 	movi	r5,60
 80003a0:	8000f980 	call	8000f98 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
 80003a4:	01007184 	movi	r4,454
 80003a8:	000b883a 	mov	r5,zero
 80003ac:	8000f980 	call	8000f98 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
 80003b0:	01007204 	movi	r4,456
 80003b4:	000b883a 	mov	r5,zero
 80003b8:	8000f980 	call	8000f98 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
 80003bc:	01007284 	movi	r4,458
 80003c0:	000b883a 	mov	r5,zero
 80003c4:	8000f980 	call	8000f98 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
 80003c8:	01007304 	movi	r4,460
 80003cc:	000b883a 	mov	r5,zero
 80003d0:	8000f980 	call	8000f98 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
 80003d4:	01007384 	movi	r4,462
 80003d8:	000b883a 	mov	r5,zero
 80003dc:	8000f980 	call	8000f98 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
 80003e0:	01007404 	movi	r4,464
 80003e4:	000b883a 	mov	r5,zero
 80003e8:	8000f980 	call	8000f98 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
 80003ec:	01007484 	movi	r4,466
 80003f0:	000b883a 	mov	r5,zero
 80003f4:	8000f980 	call	8000f98 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
 80003f8:	01007504 	movi	r4,468
 80003fc:	000b883a 	mov	r5,zero
 8000400:	8000f980 	call	8000f98 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
 8000404:	01007584 	movi	r4,470
 8000408:	000b883a 	mov	r5,zero
 800040c:	8000f980 	call	8000f98 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
 8000410:	01007604 	movi	r4,472
 8000414:	000b883a 	mov	r5,zero
 8000418:	8000f980 	call	8000f98 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
 800041c:	01007684 	movi	r4,474
 8000420:	000b883a 	mov	r5,zero
 8000424:	8000f980 	call	8000f98 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
 8000428:	01007704 	movi	r4,476
 800042c:	000b883a 	mov	r5,zero
 8000430:	8000f980 	call	8000f98 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
 8000434:	01007784 	movi	r4,478
 8000438:	000b883a 	mov	r5,zero
 800043c:	8000f980 	call	8000f98 <UsbWrite>

	IOWR(CY7C67200_BASE,HPI_MAILBOX,COMM_EXEC_INT);
 8000440:	00f38054 	movui	r3,52737
 8000444:	00840034 	movhi	r2,4096
 8000448:	10800104 	addi	r2,r2,4
 800044c:	10c00035 	stwio	r3,0(r2)

	while (IORD(CY7C67200_BASE,HPI_MAILBOX) != COMM_ACK)
 8000450:	0001883a 	nop
 8000454:	00840034 	movhi	r2,4096
 8000458:	10800104 	addi	r2,r2,4
 800045c:	10800037 	ldwio	r2,0(r2)
 8000460:	1083fb58 	cmpnei	r2,r2,4077
 8000464:	10000826 	beq	r2,zero,8000488 <main+0x290>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IORD(CY7C67200_BASE,HPI_MAILBOX));
 8000468:	00840034 	movhi	r2,4096
 800046c:	10800104 	addi	r2,r2,4
 8000470:	10800037 	ldwio	r2,0(r2)
 8000474:	01020074 	movhi	r4,2049
 8000478:	21047404 	addi	r4,r4,4560
 800047c:	100b883a 	mov	r5,r2
 8000480:	800212c0 	call	800212c <printf>
		goto USB_HOT_PLUG;
 8000484:	003f6606 	br	8000220 <__alt_data_end+0xf8000220>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
 8000488:	00b02284 	movi	r2,-16246
 800048c:	d0a6cb0d 	sth	r2,-25812(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
 8000490:	008c0004 	movi	r2,12288
 8000494:	d0a6cb8d 	sth	r2,-25810(gp)
	fs_device = A_DP_STAT;
 8000498:	00880004 	movi	r2,8192
 800049c:	e0bffc0d 	sth	r2,-16(fp)

	usb_ctl_val = UsbRead(ctl_reg);
 80004a0:	d0a6cb0b 	ldhu	r2,-25812(gp)
 80004a4:	10bfffcc 	andi	r2,r2,65535
 80004a8:	1009883a 	mov	r4,r2
 80004ac:	8000fe00 	call	8000fe0 <UsbRead>
 80004b0:	e0bffa0d 	sth	r2,-24(fp)

	if (!(usb_ctl_val & no_device))
 80004b4:	d0a6cb8b 	ldhu	r2,-25810(gp)
 80004b8:	e0fffa0b 	ldhu	r3,-24(fp)
 80004bc:	1884703a 	and	r2,r3,r2
 80004c0:	10bfffcc 	andi	r2,r2,65535
 80004c4:	1000341e 	bne	r2,zero,8000598 <main+0x3a0>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
 80004c8:	e03ffb15 	stw	zero,-20(fp)
 80004cc:	00001006 	br	8000510 <main+0x318>
		{
			usleep(5*1000);
 80004d0:	0104e204 	movi	r4,5000
 80004d4:	800f2380 	call	800f238 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 80004d8:	d0a6cb0b 	ldhu	r2,-25812(gp)
 80004dc:	10bfffcc 	andi	r2,r2,65535
 80004e0:	1009883a 	mov	r4,r2
 80004e4:	8000fe00 	call	8000fe0 <UsbRead>
 80004e8:	e0bffa0d 	sth	r2,-24(fp)
			if(usb_ctl_val & no_device) break;
 80004ec:	d0a6cb8b 	ldhu	r2,-25810(gp)
 80004f0:	e0fffa0b 	ldhu	r3,-24(fp)
 80004f4:	1884703a 	and	r2,r3,r2
 80004f8:	10bfffcc 	andi	r2,r2,65535
 80004fc:	10000126 	beq	r2,zero,8000504 <main+0x30c>
 8000500:	00000606 	br	800051c <main+0x324>

	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
 8000504:	e0bffb17 	ldw	r2,-20(fp)
 8000508:	10800044 	addi	r2,r2,1
 800050c:	e0bffb15 	stw	r2,-20(fp)
 8000510:	e0bffb17 	ldw	r2,-20(fp)
 8000514:	10800150 	cmplti	r2,r2,5
 8000518:	103fed1e 	bne	r2,zero,80004d0 <__alt_data_end+0xf80004d0>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
		}
		if(!(usb_ctl_val & no_device))
 800051c:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8000520:	e0fffa0b 	ldhu	r3,-24(fp)
 8000524:	1884703a 	and	r2,r3,r2
 8000528:	10bfffcc 	andi	r2,r2,65535
 800052c:	1000261e 	bne	r2,zero,80005c8 <main+0x3d0>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
 8000530:	01020074 	movhi	r4,2049
 8000534:	21047d04 	addi	r4,r4,4596
 8000538:	80022200 	call	8002220 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
 800053c:	01020074 	movhi	r4,2049
 8000540:	21048704 	addi	r4,r4,4636
 8000544:	80022200 	call	8002220 <puts>
			while (!(usb_ctl_val & no_device))
 8000548:	00000d06 	br	8000580 <main+0x388>
			{
				usb_ctl_val = UsbRead(ctl_reg);
 800054c:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8000550:	10bfffcc 	andi	r2,r2,65535
 8000554:	1009883a 	mov	r4,r2
 8000558:	8000fe00 	call	8000fe0 <UsbRead>
 800055c:	e0bffa0d 	sth	r2,-24(fp)
				if(usb_ctl_val & no_device)
 8000560:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8000564:	e0fffa0b 	ldhu	r3,-24(fp)
 8000568:	1884703a 	and	r2,r3,r2
 800056c:	10bfffcc 	andi	r2,r2,65535
 8000570:	10000126 	beq	r2,zero,8000578 <main+0x380>
					goto USB_HOT_PLUG;
 8000574:	003f2a06 	br	8000220 <__alt_data_end+0xf8000220>

				usleep(2000);
 8000578:	0101f404 	movi	r4,2000
 800057c:	800f2380 	call	800f238 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
 8000580:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8000584:	e0fffa0b 	ldhu	r3,-24(fp)
 8000588:	1884703a 	and	r2,r3,r2
 800058c:	10bfffcc 	andi	r2,r2,65535
 8000590:	103fee26 	beq	r2,zero,800054c <__alt_data_end+0xf800054c>
 8000594:	00000c06 	br	80005c8 <main+0x3d0>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
 8000598:	e0fffa0b 	ldhu	r3,-24(fp)
 800059c:	e0bffc0b 	ldhu	r2,-16(fp)
 80005a0:	1884703a 	and	r2,r3,r2
 80005a4:	10bfffcc 	andi	r2,r2,65535
 80005a8:	10000426 	beq	r2,zero,80005bc <main+0x3c4>
		{
			printf("[INFO]: full speed device\n");
 80005ac:	01020074 	movhi	r4,2049
 80005b0:	21049304 	addi	r4,r4,4684
 80005b4:	80022200 	call	8002220 <puts>
 80005b8:	00000306 	br	80005c8 <main+0x3d0>
		}
		else
		{
			printf("[INFO]: low speed device\n");
 80005bc:	01020074 	movhi	r4,2049
 80005c0:	21049a04 	addi	r4,r4,4712
 80005c4:	80022200 	call	8002220 <puts>
	}

	//UsbPrintMem();
	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
 80005c8:	80010d80 	call	80010d8 <UsbSetAddress>

	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80005cc:	00000306 	br	80005dc <main+0x3e4>
	{
		UsbSetAddress();
 80005d0:	80010d80 	call	80010d8 <UsbSetAddress>
		usleep(10*1000);
 80005d4:	0109c404 	movi	r4,10000
 80005d8:	800f2380 	call	800f238 <usleep>
	//UsbPrintMem();
	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80005dc:	00840034 	movhi	r2,4096
 80005e0:	10800304 	addi	r2,r2,12
 80005e4:	10800037 	ldwio	r2,0(r2)
 80005e8:	1080040c 	andi	r2,r2,16
 80005ec:	103ff826 	beq	r2,zero,80005d0 <__alt_data_end+0xf80005d0>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 80005f0:	8001f780 	call	8001f78 <UsbWaitTDListDone>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506); // i
 80005f4:	00c14184 	movi	r3,1286
 80005f8:	00840034 	movhi	r2,4096
 80005fc:	10800204 	addi	r2,r2,8
 8000600:	10c00035 	stwio	r3,0(r2)
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
 8000604:	00840034 	movhi	r2,4096
 8000608:	10800037 	ldwio	r2,0(r2)
 800060c:	01020074 	movhi	r4,2049
 8000610:	2104a104 	addi	r4,r4,4740
 8000614:	100b883a 	mov	r5,r2
 8000618:	800212c0 	call	800212c <printf>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508); // n
 800061c:	00c14204 	movi	r3,1288
 8000620:	00840034 	movhi	r2,4096
 8000624:	10800204 	addi	r2,r2,8
 8000628:	10c00035 	stwio	r3,0(r2)
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
 800062c:	00840034 	movhi	r2,4096
 8000630:	10800037 	ldwio	r2,0(r2)
 8000634:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
 8000638:	e0bffa0b 	ldhu	r2,-24(fp)
 800063c:	01020074 	movhi	r4,2049
 8000640:	2104ac04 	addi	r4,r4,4784
 8000644:	100b883a 	mov	r5,r2
 8000648:	800212c0 	call	800212c <printf>
	while (usb_ctl_val != 0x03) // retries occurred
 800064c:	e0bffa0b 	ldhu	r2,-24(fp)
 8000650:	108000e0 	cmpeqi	r2,r2,3
 8000654:	1000031e 	bne	r2,zero,8000664 <main+0x46c>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000658:	8001ffc0 	call	8001ffc <UsbGetRetryCnt>
 800065c:	e0bffa0d 	sth	r2,-24(fp)

		goto USB_HOT_PLUG;
 8000660:	003eef06 	br	8000220 <__alt_data_end+0xf8000220>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
 8000664:	01020074 	movhi	r4,2049
 8000668:	2104b804 	addi	r4,r4,4832
 800066c:	80022200 	call	8002220 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	UsbGetDeviceDesc1(); // TASK: Call the appropriate function for this step.
 8000670:	80011d80 	call	80011d8 <UsbGetDeviceDesc1>

	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000674:	00000306 	br	8000684 <main+0x48c>
	{
		UsbGetDeviceDesc1(); // TASK: Call the appropriate function again if it wasn't processed successfully.
 8000678:	80011d80 	call	80011d8 <UsbGetDeviceDesc1>
		usleep(10*1000);
 800067c:	0109c404 	movi	r4,10000
 8000680:	800f2380 	call	800f238 <usleep>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	UsbGetDeviceDesc1(); // TASK: Call the appropriate function for this step.

	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000684:	00840034 	movhi	r2,4096
 8000688:	10800304 	addi	r2,r2,12
 800068c:	10800037 	ldwio	r2,0(r2)
 8000690:	1080040c 	andi	r2,r2,16
 8000694:	103ff826 	beq	r2,zero,8000678 <__alt_data_end+0xf8000678>
	{
		UsbGetDeviceDesc1(); // TASK: Call the appropriate function again if it wasn't processed successfully.
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000698:	8001f780 	call	8001f78 <UsbWaitTDListDone>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
 800069c:	00c14184 	movi	r3,1286
 80006a0:	00840034 	movhi	r2,4096
 80006a4:	10800204 	addi	r2,r2,8
 80006a8:	10c00035 	stwio	r3,0(r2)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
 80006ac:	00840034 	movhi	r2,4096
 80006b0:	10800037 	ldwio	r2,0(r2)
 80006b4:	01020074 	movhi	r4,2049
 80006b8:	2104c704 	addi	r4,r4,4892
 80006bc:	100b883a 	mov	r5,r2
 80006c0:	800212c0 	call	800212c <printf>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
 80006c4:	00c14204 	movi	r3,1288
 80006c8:	00840034 	movhi	r2,4096
 80006cc:	10800204 	addi	r2,r2,8
 80006d0:	10c00035 	stwio	r3,0(r2)
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
 80006d4:	00840034 	movhi	r2,4096
 80006d8:	10800037 	ldwio	r2,0(r2)
 80006dc:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
 80006e0:	e0bffa0b 	ldhu	r2,-24(fp)
 80006e4:	01020074 	movhi	r4,2049
 80006e8:	2104d204 	addi	r4,r4,4936
 80006ec:	100b883a 	mov	r5,r2
 80006f0:	800212c0 	call	800212c <printf>
	while (usb_ctl_val != 0x03)
 80006f4:	00000206 	br	8000700 <main+0x508>
	{
		usb_ctl_val = UsbGetRetryCnt();
 80006f8:	8001ffc0 	call	8001ffc <UsbGetRetryCnt>
 80006fc:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000700:	e0bffa0b 	ldhu	r2,-24(fp)
 8000704:	108000d8 	cmpnei	r2,r2,3
 8000708:	103ffb1e 	bne	r2,zero,80006f8 <__alt_data_end+0xf80006f8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
 800070c:	01020074 	movhi	r4,2049
 8000710:	2104de04 	addi	r4,r4,4984
 8000714:	80022200 	call	8002220 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	UsbGetDeviceDesc2(); //get device descriptor
 8000718:	80013200 	call	8001320 <UsbGetDeviceDesc2>
	// TASK: Call the appropriate function for this step.

	//if no message
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 800071c:	00000306 	br	800072c <main+0x534>
	{
		//resend the get device descriptor
		//get device descriptor
		UsbGetDeviceDesc2(); // TASK: Call the appropriate function again if it wasn't processed successfully.
 8000720:	80013200 	call	8001320 <UsbGetDeviceDesc2>

		usleep(10*1000);
 8000724:	0109c404 	movi	r4,10000
 8000728:	800f2380 	call	800f238 <usleep>
	//--------------------------------get device descriptor-2---------------------------------------------//
	UsbGetDeviceDesc2(); //get device descriptor
	// TASK: Call the appropriate function for this step.

	//if no message
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 800072c:	00840034 	movhi	r2,4096
 8000730:	10800304 	addi	r2,r2,12
 8000734:	10800037 	ldwio	r2,0(r2)
 8000738:	1080040c 	andi	r2,r2,16
 800073c:	103ff826 	beq	r2,zero,8000720 <__alt_data_end+0xf8000720>
		UsbGetDeviceDesc2(); // TASK: Call the appropriate function again if it wasn't processed successfully.

		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000740:	8001f780 	call	8001f78 <UsbWaitTDListDone>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
 8000744:	00c14184 	movi	r3,1286
 8000748:	00840034 	movhi	r2,4096
 800074c:	10800204 	addi	r2,r2,8
 8000750:	10c00035 	stwio	r3,0(r2)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
 8000754:	00840034 	movhi	r2,4096
 8000758:	10800037 	ldwio	r2,0(r2)
 800075c:	01020074 	movhi	r4,2049
 8000760:	2104c704 	addi	r4,r4,4892
 8000764:	100b883a 	mov	r5,r2
 8000768:	800212c0 	call	800212c <printf>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
 800076c:	00c14204 	movi	r3,1288
 8000770:	00840034 	movhi	r2,4096
 8000774:	10800204 	addi	r2,r2,8
 8000778:	10c00035 	stwio	r3,0(r2)
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
 800077c:	00840034 	movhi	r2,4096
 8000780:	10800037 	ldwio	r2,0(r2)
 8000784:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
 8000788:	e0bffa0b 	ldhu	r2,-24(fp)
 800078c:	01020074 	movhi	r4,2049
 8000790:	2104d204 	addi	r4,r4,4936
 8000794:	100b883a 	mov	r5,r2
 8000798:	800212c0 	call	800212c <printf>
	while (usb_ctl_val != 0x03)
 800079c:	00000206 	br	80007a8 <main+0x5b0>
	{
		usb_ctl_val = UsbGetRetryCnt();
 80007a0:	8001ffc0 	call	8001ffc <UsbGetRetryCnt>
 80007a4:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 80007a8:	e0bffa0b 	ldhu	r2,-24(fp)
 80007ac:	108000d8 	cmpnei	r2,r2,3
 80007b0:	103ffb1e 	bne	r2,zero,80007a0 <__alt_data_end+0xf80007a0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
 80007b4:	01020074 	movhi	r4,2049
 80007b8:	2104f204 	addi	r4,r4,5064
 80007bc:	80022200 	call	8002220 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	UsbGetConfigDesc1(); // TASK: Call the appropriate function for this step.
 80007c0:	80014f80 	call	80014f8 <UsbGetConfigDesc1>

	//if no message
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80007c4:	00000306 	br	80007d4 <main+0x5dc>
	{
		UsbGetConfigDesc1();// TASK: Call the appropriate function again if it wasn't processed successfully.
 80007c8:	80014f80 	call	80014f8 <UsbGetConfigDesc1>
		usleep(10*1000);
 80007cc:	0109c404 	movi	r4,10000
 80007d0:	800f2380 	call	800f238 <usleep>
	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	UsbGetConfigDesc1(); // TASK: Call the appropriate function for this step.

	//if no message
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80007d4:	00840034 	movhi	r2,4096
 80007d8:	10800304 	addi	r2,r2,12
 80007dc:	10800037 	ldwio	r2,0(r2)
 80007e0:	1080040c 	andi	r2,r2,16
 80007e4:	103ff826 	beq	r2,zero,80007c8 <__alt_data_end+0xf80007c8>
	{
		UsbGetConfigDesc1();// TASK: Call the appropriate function again if it wasn't processed successfully.
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 80007e8:	8001f780 	call	8001f78 <UsbWaitTDListDone>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
 80007ec:	00c14184 	movi	r3,1286
 80007f0:	00840034 	movhi	r2,4096
 80007f4:	10800204 	addi	r2,r2,8
 80007f8:	10c00035 	stwio	r3,0(r2)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
 80007fc:	00840034 	movhi	r2,4096
 8000800:	10800037 	ldwio	r2,0(r2)
 8000804:	01020074 	movhi	r4,2049
 8000808:	21050404 	addi	r4,r4,5136
 800080c:	100b883a 	mov	r5,r2
 8000810:	800212c0 	call	800212c <printf>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
 8000814:	00c14204 	movi	r3,1288
 8000818:	00840034 	movhi	r2,4096
 800081c:	10800204 	addi	r2,r2,8
 8000820:	10c00035 	stwio	r3,0(r2)
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
 8000824:	00840034 	movhi	r2,4096
 8000828:	10800037 	ldwio	r2,0(r2)
 800082c:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
 8000830:	e0bffa0b 	ldhu	r2,-24(fp)
 8000834:	01020074 	movhi	r4,2049
 8000838:	21050f04 	addi	r4,r4,5180
 800083c:	100b883a 	mov	r5,r2
 8000840:	800212c0 	call	800212c <printf>
	while (usb_ctl_val != 0x03)
 8000844:	00000206 	br	8000850 <main+0x658>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000848:	8001ffc0 	call	8001ffc <UsbGetRetryCnt>
 800084c:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000850:	e0bffa0b 	ldhu	r2,-24(fp)
 8000854:	108000d8 	cmpnei	r2,r2,3
 8000858:	103ffb1e 	bne	r2,zero,8000848 <__alt_data_end+0xf8000848>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
 800085c:	01020074 	movhi	r4,2049
 8000860:	21051b04 	addi	r4,r4,5228
 8000864:	80022200 	call	8002220 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	UsbGetConfigDesc2();// TASK: Call the appropriate function for this step.
 8000868:	80016880 	call	8001688 <UsbGetConfigDesc2>

	usleep(100*1000);
 800086c:	010000b4 	movhi	r4,2
 8000870:	2121a804 	addi	r4,r4,-31072
 8000874:	800f2380 	call	800f238 <usleep>
	//if no message
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000878:	00000306 	br	8000888 <main+0x690>
	{
		UsbGetConfigDesc2();// TASK: Call the appropriate function again if it wasn't processed successfully.
 800087c:	80016880 	call	8001688 <UsbGetConfigDesc2>
		usleep(10*1000);
 8000880:	0109c404 	movi	r4,10000
 8000884:	800f2380 	call	800f238 <usleep>
	//-----------------------------------get configuration descriptor-2------------------------------------//
	UsbGetConfigDesc2();// TASK: Call the appropriate function for this step.

	usleep(100*1000);
	//if no message
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000888:	00840034 	movhi	r2,4096
 800088c:	10800304 	addi	r2,r2,12
 8000890:	10800037 	ldwio	r2,0(r2)
 8000894:	1080040c 	andi	r2,r2,16
 8000898:	103ff826 	beq	r2,zero,800087c <__alt_data_end+0xf800087c>
	{
		UsbGetConfigDesc2();// TASK: Call the appropriate function again if it wasn't processed successfully.
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 800089c:	8001f780 	call	8001f78 <UsbWaitTDListDone>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
 80008a0:	00c14184 	movi	r3,1286
 80008a4:	00840034 	movhi	r2,4096
 80008a8:	10800204 	addi	r2,r2,8
 80008ac:	10c00035 	stwio	r3,0(r2)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
 80008b0:	00840034 	movhi	r2,4096
 80008b4:	10800037 	ldwio	r2,0(r2)
 80008b8:	01020074 	movhi	r4,2049
 80008bc:	21052e04 	addi	r4,r4,5304
 80008c0:	100b883a 	mov	r5,r2
 80008c4:	800212c0 	call	800212c <printf>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
 80008c8:	00c14204 	movi	r3,1288
 80008cc:	00840034 	movhi	r2,4096
 80008d0:	10800204 	addi	r2,r2,8
 80008d4:	10c00035 	stwio	r3,0(r2)
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
 80008d8:	00840034 	movhi	r2,4096
 80008dc:	10800037 	ldwio	r2,0(r2)
 80008e0:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
 80008e4:	e0bffa0b 	ldhu	r2,-24(fp)
 80008e8:	01020074 	movhi	r4,2049
 80008ec:	21053904 	addi	r4,r4,5348
 80008f0:	100b883a 	mov	r5,r2
 80008f4:	800212c0 	call	800212c <printf>
	while (usb_ctl_val != 0x03)
 80008f8:	00000206 	br	8000904 <main+0x70c>
	{
		usb_ctl_val = UsbGetRetryCnt();
 80008fc:	8001ffc0 	call	8001ffc <UsbGetRetryCnt>
 8000900:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000904:	e0bffa0b 	ldhu	r2,-24(fp)
 8000908:	108000d8 	cmpnei	r2,r2,3
 800090c:	103ffb1e 	bne	r2,zero,80008fc <__alt_data_end+0xf80008fc>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
 8000910:	01020074 	movhi	r4,2049
 8000914:	21054504 	addi	r4,r4,5396
 8000918:	80022200 	call	8002220 <puts>

	//UsbPrintMem();
	// ---------------------------------get device info---------------------------------------------//

	IOWR(CY7C67200_BASE,HPI_ADDR,0x056C);// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
 800091c:	00c15b04 	movi	r3,1388
 8000920:	00840034 	movhi	r2,4096
 8000924:	10800204 	addi	r2,r2,8
 8000928:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
 800092c:	00c00044 	movi	r3,1
 8000930:	00840034 	movhi	r2,4096
 8000934:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_ADDR,0x056C);
 8000938:	00c15b04 	movi	r3,1388
 800093c:	00840034 	movhi	r2,4096
 8000940:	10800204 	addi	r2,r2,8
 8000944:	10c00035 	stwio	r3,0(r2)
	code = IORD(CY7C67200_BASE,HPI_DATA);
 8000948:	00840034 	movhi	r2,4096
 800094c:	10800037 	ldwio	r2,0(r2)
 8000950:	e0bffe8d 	sth	r2,-6(fp)
	printf("\ncode = %x\n", code);
 8000954:	e0bffe8b 	ldhu	r2,-6(fp)
 8000958:	01020074 	movhi	r4,2049
 800095c:	21055804 	addi	r4,r4,5472
 8000960:	100b883a 	mov	r5,r2
 8000964:	800212c0 	call	800212c <printf>
	code = code & 0x0ff;
 8000968:	e0bffe8b 	ldhu	r2,-6(fp)
 800096c:	10803fcc 	andi	r2,r2,255
 8000970:	e0bffe8d 	sth	r2,-6(fp)
	if (code == 0x01)
 8000974:	e0bffe8b 	ldhu	r2,-6(fp)
 8000978:	10800058 	cmpnei	r2,r2,1
 800097c:	1000041e 	bne	r2,zero,8000990 <main+0x798>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
 8000980:	01020074 	movhi	r4,2049
 8000984:	21055b04 	addi	r4,r4,5484
 8000988:	80022200 	call	8002220 <puts>
 800098c:	00000806 	br	80009b0 <main+0x7b8>
	}
	else
	{
		printf("\nvalue= %x\n", code);
 8000990:	e0bffe8b 	ldhu	r2,-6(fp)
 8000994:	01020074 	movhi	r4,2049
 8000998:	21056a04 	addi	r4,r4,5544
 800099c:	100b883a 	mov	r5,r2
 80009a0:	800212c0 	call	800212c <printf>
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
 80009a4:	01020074 	movhi	r4,2049
 80009a8:	21056d04 	addi	r4,r4,5556
 80009ac:	80022200 	call	8002220 <puts>
	}

	IOWR(CY7C67200_BASE,HPI_ADDR,0x057A);// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.
 80009b0:	00c15e84 	movi	r3,1402
 80009b4:	00840034 	movhi	r2,4096
 80009b8:	10800204 	addi	r2,r2,8
 80009bc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA, 0x0800);
 80009c0:	00c20004 	movi	r3,2048
 80009c4:	00840034 	movhi	r2,4096
 80009c8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_ADDR,0x057A);
 80009cc:	00c15e84 	movi	r3,1402
 80009d0:	00840034 	movhi	r2,4096
 80009d4:	10800204 	addi	r2,r2,8
 80009d8:	10c00035 	stwio	r3,0(r2)
	data_size = (IORD(CY7C67200_BASE,HPI_DATA)>>8)&0x0ff;
 80009dc:	00840034 	movhi	r2,4096
 80009e0:	10800037 	ldwio	r2,0(r2)
 80009e4:	1005d23a 	srai	r2,r2,8
 80009e8:	e0bfff05 	stb	r2,-4(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
 80009ec:	e0bfff03 	ldbu	r2,-4(fp)
 80009f0:	01020074 	movhi	r4,2049
 80009f4:	21057604 	addi	r4,r4,5592
 80009f8:	100b883a 	mov	r5,r2
 80009fc:	800212c0 	call	800212c <printf>

	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	UsbSetConfig(); // TASK: Call the appropriate function for this step.
 8000a00:	80018f00 	call	80018f0 <UsbSetConfig>

	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000a04:	00000306 	br	8000a14 <main+0x81c>
	{
		UsbSetConfig();// TASK: Call the appropriate function again if it wasn't processed successfully.
 8000a08:	80018f00 	call	80018f0 <UsbSetConfig>
		usleep(10*1000);
 8000a0c:	0109c404 	movi	r4,10000
 8000a10:	800f2380 	call	800f238 <usleep>

	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	UsbSetConfig(); // TASK: Call the appropriate function for this step.

	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000a14:	00840034 	movhi	r2,4096
 8000a18:	10800304 	addi	r2,r2,12
 8000a1c:	10800037 	ldwio	r2,0(r2)
 8000a20:	1080040c 	andi	r2,r2,16
 8000a24:	103ff826 	beq	r2,zero,8000a08 <__alt_data_end+0xf8000a08>
	{
		UsbSetConfig();// TASK: Call the appropriate function again if it wasn't processed successfully.
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000a28:	8001f780 	call	8001f78 <UsbWaitTDListDone>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
 8000a2c:	00c14184 	movi	r3,1286
 8000a30:	00840034 	movhi	r2,4096
 8000a34:	10800204 	addi	r2,r2,8
 8000a38:	10c00035 	stwio	r3,0(r2)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
 8000a3c:	00840034 	movhi	r2,4096
 8000a40:	10800037 	ldwio	r2,0(r2)
 8000a44:	01020074 	movhi	r4,2049
 8000a48:	21058004 	addi	r4,r4,5632
 8000a4c:	100b883a 	mov	r5,r2
 8000a50:	800212c0 	call	800212c <printf>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
 8000a54:	00c14204 	movi	r3,1288
 8000a58:	00840034 	movhi	r2,4096
 8000a5c:	10800204 	addi	r2,r2,8
 8000a60:	10c00035 	stwio	r3,0(r2)
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
 8000a64:	00840034 	movhi	r2,4096
 8000a68:	10800037 	ldwio	r2,0(r2)
 8000a6c:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
 8000a70:	e0bffa0b 	ldhu	r2,-24(fp)
 8000a74:	01020074 	movhi	r4,2049
 8000a78:	21058b04 	addi	r4,r4,5676
 8000a7c:	100b883a 	mov	r5,r2
 8000a80:	800212c0 	call	800212c <printf>
	while (usb_ctl_val != 0x03)
 8000a84:	00000206 	br	8000a90 <main+0x898>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000a88:	8001ffc0 	call	8001ffc <UsbGetRetryCnt>
 8000a8c:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000a90:	e0bffa0b 	ldhu	r2,-24(fp)
 8000a94:	108000d8 	cmpnei	r2,r2,3
 8000a98:	103ffb1e 	bne	r2,zero,8000a88 <__alt_data_end+0xf8000a88>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
 8000a9c:	01020074 	movhi	r4,2049
 8000aa0:	21059704 	addi	r4,r4,5724
 8000aa4:	80022200 	call	8002220 <puts>

	//UsbPrintMem();
	//----------------------------------------------class request out ------------------------------------------//
	UsbClassRequest(); // TASK: Call the appropriate function for this step.
 8000aa8:	80019f00 	call	80019f0 <UsbClassRequest>

	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000aac:	00000306 	br	8000abc <main+0x8c4>
	{
		UsbClassRequest(); // TASK: Call the appropriate function again if it wasn't processed successfully.
 8000ab0:	80019f00 	call	80019f0 <UsbClassRequest>
		usleep(10*1000);
 8000ab4:	0109c404 	movi	r4,10000
 8000ab8:	800f2380 	call	800f238 <usleep>

	//UsbPrintMem();
	//----------------------------------------------class request out ------------------------------------------//
	UsbClassRequest(); // TASK: Call the appropriate function for this step.

	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000abc:	00840034 	movhi	r2,4096
 8000ac0:	10800304 	addi	r2,r2,12
 8000ac4:	10800037 	ldwio	r2,0(r2)
 8000ac8:	1080040c 	andi	r2,r2,16
 8000acc:	103ff826 	beq	r2,zero,8000ab0 <__alt_data_end+0xf8000ab0>
	{
		UsbClassRequest(); // TASK: Call the appropriate function again if it wasn't processed successfully.
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000ad0:	8001f780 	call	8001f78 <UsbWaitTDListDone>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
 8000ad4:	00c14184 	movi	r3,1286
 8000ad8:	00840034 	movhi	r2,4096
 8000adc:	10800204 	addi	r2,r2,8
 8000ae0:	10c00035 	stwio	r3,0(r2)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
 8000ae4:	00840034 	movhi	r2,4096
 8000ae8:	10800037 	ldwio	r2,0(r2)
 8000aec:	01020074 	movhi	r4,2049
 8000af0:	2105a904 	addi	r4,r4,5796
 8000af4:	100b883a 	mov	r5,r2
 8000af8:	800212c0 	call	800212c <printf>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
 8000afc:	00c14204 	movi	r3,1288
 8000b00:	00840034 	movhi	r2,4096
 8000b04:	10800204 	addi	r2,r2,8
 8000b08:	10c00035 	stwio	r3,0(r2)
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
 8000b0c:	00840034 	movhi	r2,4096
 8000b10:	10800037 	ldwio	r2,0(r2)
 8000b14:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
 8000b18:	e0bffa0b 	ldhu	r2,-24(fp)
 8000b1c:	01020074 	movhi	r4,2049
 8000b20:	2105b404 	addi	r4,r4,5840
 8000b24:	100b883a 	mov	r5,r2
 8000b28:	800212c0 	call	800212c <printf>
	while (usb_ctl_val != 0x03)
 8000b2c:	00000206 	br	8000b38 <main+0x940>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000b30:	8001ffc0 	call	8001ffc <UsbGetRetryCnt>
 8000b34:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000b38:	e0bffa0b 	ldhu	r2,-24(fp)
 8000b3c:	108000d8 	cmpnei	r2,r2,3
 8000b40:	103ffb1e 	bne	r2,zero,8000b30 <__alt_data_end+0xf8000b30>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
 8000b44:	01020074 	movhi	r4,2049
 8000b48:	2105c004 	addi	r4,r4,5888
 8000b4c:	80022200 	call	8002220 <puts>

	// STEP 8 begin
	UsbGetHidDesc(); //----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
 8000b50:	8001af00 	call	8001af0 <UsbGetHidDesc>
	// TASK: Call the appropriate function for this step.


	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000b54:	00000306 	br	8000b64 <main+0x96c>
	{
		UsbGetHidDesc(); // TASK: Call the appropriate function again if it wasn't processed successfully.
 8000b58:	8001af00 	call	8001af0 <UsbGetHidDesc>
		usleep(10*1000);
 8000b5c:	0109c404 	movi	r4,10000
 8000b60:	800f2380 	call	800f238 <usleep>
	// STEP 8 begin
	UsbGetHidDesc(); //----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.


	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000b64:	00840034 	movhi	r2,4096
 8000b68:	10800304 	addi	r2,r2,12
 8000b6c:	10800037 	ldwio	r2,0(r2)
 8000b70:	1080040c 	andi	r2,r2,16
 8000b74:	103ff826 	beq	r2,zero,8000b58 <__alt_data_end+0xf8000b58>
	{
		UsbGetHidDesc(); // TASK: Call the appropriate function again if it wasn't processed successfully.
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000b78:	8001f780 	call	8001f78 <UsbWaitTDListDone>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
 8000b7c:	00c14184 	movi	r3,1286
 8000b80:	00840034 	movhi	r2,4096
 8000b84:	10800204 	addi	r2,r2,8
 8000b88:	10c00035 	stwio	r3,0(r2)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
 8000b8c:	00840034 	movhi	r2,4096
 8000b90:	10800037 	ldwio	r2,0(r2)
 8000b94:	01020074 	movhi	r4,2049
 8000b98:	2105a904 	addi	r4,r4,5796
 8000b9c:	100b883a 	mov	r5,r2
 8000ba0:	800212c0 	call	800212c <printf>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
 8000ba4:	00c14204 	movi	r3,1288
 8000ba8:	00840034 	movhi	r2,4096
 8000bac:	10800204 	addi	r2,r2,8
 8000bb0:	10c00035 	stwio	r3,0(r2)
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
 8000bb4:	00840034 	movhi	r2,4096
 8000bb8:	10800037 	ldwio	r2,0(r2)
 8000bbc:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
 8000bc0:	e0bffa0b 	ldhu	r2,-24(fp)
 8000bc4:	01020074 	movhi	r4,2049
 8000bc8:	2105b404 	addi	r4,r4,5840
 8000bcc:	100b883a 	mov	r5,r2
 8000bd0:	800212c0 	call	800212c <printf>
	while (usb_ctl_val != 0x03)
 8000bd4:	00000206 	br	8000be0 <main+0x9e8>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000bd8:	8001ffc0 	call	8001ffc <UsbGetRetryCnt>
 8000bdc:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000be0:	e0bffa0b 	ldhu	r2,-24(fp)
 8000be4:	108000d8 	cmpnei	r2,r2,3
 8000be8:	103ffb1e 	bne	r2,zero,8000bd8 <__alt_data_end+0xf8000bd8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
 8000bec:	01020074 	movhi	r4,2049
 8000bf0:	2105d204 	addi	r4,r4,5960
 8000bf4:	80022200 	call	8002220 <puts>

	//UsbPrintMem();
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	UsbGetReportDesc(); // TASK: Call the appropriate function for this step.
 8000bf8:	8001c380 	call	8001c38 <UsbGetReportDesc>
	//if no message
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000bfc:	00000306 	br	8000c0c <main+0xa14>
	{
		UsbGetReportDesc();// TASK: Call the appropriate function again if it wasn't processed successfully.
 8000c00:	8001c380 	call	8001c38 <UsbGetReportDesc>
		usleep(10*1000);
 8000c04:	0109c404 	movi	r4,10000
 8000c08:	800f2380 	call	800f238 <usleep>
	//UsbPrintMem();
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	UsbGetReportDesc(); // TASK: Call the appropriate function for this step.
	//if no message
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000c0c:	00840034 	movhi	r2,4096
 8000c10:	10800304 	addi	r2,r2,12
 8000c14:	10800037 	ldwio	r2,0(r2)
 8000c18:	1080040c 	andi	r2,r2,16
 8000c1c:	103ff826 	beq	r2,zero,8000c00 <__alt_data_end+0xf8000c00>
	{
		UsbGetReportDesc();// TASK: Call the appropriate function again if it wasn't processed successfully.
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000c20:	8001f780 	call	8001f78 <UsbWaitTDListDone>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
 8000c24:	00c14184 	movi	r3,1286
 8000c28:	00840034 	movhi	r2,4096
 8000c2c:	10800204 	addi	r2,r2,8
 8000c30:	10c00035 	stwio	r3,0(r2)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
 8000c34:	00840034 	movhi	r2,4096
 8000c38:	10800037 	ldwio	r2,0(r2)
 8000c3c:	01020074 	movhi	r4,2049
 8000c40:	2105e604 	addi	r4,r4,6040
 8000c44:	100b883a 	mov	r5,r2
 8000c48:	800212c0 	call	800212c <printf>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
 8000c4c:	00c14204 	movi	r3,1288
 8000c50:	00840034 	movhi	r2,4096
 8000c54:	10800204 	addi	r2,r2,8
 8000c58:	10c00035 	stwio	r3,0(r2)
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
 8000c5c:	00840034 	movhi	r2,4096
 8000c60:	10800037 	ldwio	r2,0(r2)
 8000c64:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
 8000c68:	e0bffa0b 	ldhu	r2,-24(fp)
 8000c6c:	01020074 	movhi	r4,2049
 8000c70:	2105f204 	addi	r4,r4,6088
 8000c74:	100b883a 	mov	r5,r2
 8000c78:	800212c0 	call	800212c <printf>
	while (usb_ctl_val != 0x03)
 8000c7c:	00000206 	br	8000c88 <main+0xa90>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000c80:	8001ffc0 	call	8001ffc <UsbGetRetryCnt>
 8000c84:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000c88:	e0bffa0b 	ldhu	r2,-24(fp)
 8000c8c:	108000d8 	cmpnei	r2,r2,3
 8000c90:	103ffb1e 	bne	r2,zero,8000c80 <__alt_data_end+0xf8000c80>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
 8000c94:	01020074 	movhi	r4,2049
 8000c98:	2105fe04 	addi	r4,r4,6136
 8000c9c:	80022200 	call	8002220 <puts>

	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
 8000ca0:	0109c404 	movi	r4,10000
 8000ca4:	800f2380 	call	800f238 <usleep>
	while(1)
	{
		toggle++;
 8000ca8:	e0bffa83 	ldbu	r2,-22(fp)
 8000cac:	10800044 	addi	r2,r2,1
 8000cb0:	e0bffa85 	stb	r2,-22(fp)
		IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 8000cb4:	00c14004 	movi	r3,1280
 8000cb8:	00840034 	movhi	r2,4096
 8000cbc:	10800204 	addi	r2,r2,8
 8000cc0:	10c00035 	stwio	r3,0(r2)
		//data phase IN-1
		IOWR(CY7C67200_BASE,HPI_DATA,0x051c); //500
 8000cc4:	00c14704 	movi	r3,1308
 8000cc8:	00840034 	movhi	r2,4096
 8000ccc:	10c00035 	stwio	r3,0(r2)

		IOWR(CY7C67200_BASE,HPI_DATA,0x000f & data_size);//2 data length
 8000cd0:	e0bfff03 	ldbu	r2,-4(fp)
 8000cd4:	10c003cc 	andi	r3,r2,15
 8000cd8:	00840034 	movhi	r2,4096
 8000cdc:	10c00035 	stwio	r3,0(r2)

		IOWR(CY7C67200_BASE,HPI_DATA,0x0291);//4 //endpoint 1
 8000ce0:	00c0a444 	movi	r3,657
 8000ce4:	00840034 	movhi	r2,4096
 8000ce8:	10c00035 	stwio	r3,0(r2)
		if(toggle%2)
 8000cec:	e0bffa83 	ldbu	r2,-22(fp)
 8000cf0:	1080004c 	andi	r2,r2,1
 8000cf4:	10803fcc 	andi	r2,r2,255
 8000cf8:	10000426 	beq	r2,zero,8000d0c <main+0xb14>
		{
			IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data 1
 8000cfc:	00c00044 	movi	r3,1
 8000d00:	00840034 	movhi	r2,4096
 8000d04:	10c00035 	stwio	r3,0(r2)
 8000d08:	00000306 	br	8000d18 <main+0xb20>
		}
		else
		{
			IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//6 //data 1
 8000d0c:	00c01044 	movi	r3,65
 8000d10:	00840034 	movhi	r2,4096
 8000d14:	10c00035 	stwio	r3,0(r2)
		}
		IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
 8000d18:	00c004c4 	movi	r3,19
 8000d1c:	00840034 	movhi	r2,4096
 8000d20:	10c00035 	stwio	r3,0(r2)
		IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
 8000d24:	0007883a 	mov	r3,zero
 8000d28:	00840034 	movhi	r2,4096
 8000d2c:	10c00035 	stwio	r3,0(r2)
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8000d30:	01006c04 	movi	r4,432
 8000d34:	01414004 	movi	r5,1280
 8000d38:	8000f980 	call	8000f98 <UsbWrite>
		while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000d3c:	00002406 	br	8000dd0 <main+0xbd8>
		{
			IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 8000d40:	00c14004 	movi	r3,1280
 8000d44:	00840034 	movhi	r2,4096
 8000d48:	10800204 	addi	r2,r2,8
 8000d4c:	10c00035 	stwio	r3,0(r2)
			//data phase IN-1
			IOWR(CY7C67200_BASE,HPI_DATA,0x051c); //500
 8000d50:	00c14704 	movi	r3,1308
 8000d54:	00840034 	movhi	r2,4096
 8000d58:	10c00035 	stwio	r3,0(r2)

			IOWR(CY7C67200_BASE,HPI_DATA,0x000f & data_size);//2 data length
 8000d5c:	e0bfff03 	ldbu	r2,-4(fp)
 8000d60:	10c003cc 	andi	r3,r2,15
 8000d64:	00840034 	movhi	r2,4096
 8000d68:	10c00035 	stwio	r3,0(r2)

			IOWR(CY7C67200_BASE,HPI_DATA,0x0291);//4 //endpoint 1
 8000d6c:	00c0a444 	movi	r3,657
 8000d70:	00840034 	movhi	r2,4096
 8000d74:	10c00035 	stwio	r3,0(r2)
			if(toggle%2)
 8000d78:	e0bffa83 	ldbu	r2,-22(fp)
 8000d7c:	1080004c 	andi	r2,r2,1
 8000d80:	10803fcc 	andi	r2,r2,255
 8000d84:	10000426 	beq	r2,zero,8000d98 <main+0xba0>
			{
				IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data 1
 8000d88:	00c00044 	movi	r3,1
 8000d8c:	00840034 	movhi	r2,4096
 8000d90:	10c00035 	stwio	r3,0(r2)
 8000d94:	00000306 	br	8000da4 <main+0xbac>
			}
			else
			{
				IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//6 //data 1
 8000d98:	00c01044 	movi	r3,65
 8000d9c:	00840034 	movhi	r2,4096
 8000da0:	10c00035 	stwio	r3,0(r2)
			}
			IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
 8000da4:	00c004c4 	movi	r3,19
 8000da8:	00840034 	movhi	r2,4096
 8000dac:	10c00035 	stwio	r3,0(r2)
			IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//
 8000db0:	0007883a 	mov	r3,zero
 8000db4:	00840034 	movhi	r2,4096
 8000db8:	10c00035 	stwio	r3,0(r2)
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8000dbc:	01006c04 	movi	r4,432
 8000dc0:	01414004 	movi	r5,1280
 8000dc4:	8000f980 	call	8000f98 <UsbWrite>
			usleep(10*1000);
 8000dc8:	0109c404 	movi	r4,10000
 8000dcc:	800f2380 	call	800f238 <usleep>
			IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//6 //data 1
		}
		IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
		IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000dd0:	00840034 	movhi	r2,4096
 8000dd4:	10800304 	addi	r2,r2,12
 8000dd8:	10800037 	ldwio	r2,0(r2)
 8000ddc:	1080040c 	andi	r2,r2,16
 8000de0:	103fd726 	beq	r2,zero,8000d40 <__alt_data_end+0xf8000d40>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
			usleep(10*1000);
		}//end while


		usb_ctl_val = UsbWaitTDListDone();
 8000de4:	8001f780 	call	8001f78 <UsbWaitTDListDone>
 8000de8:	e0bffa0d 	sth	r2,-24(fp)

		// packet starts from 0x051c, reading third byte
		IOWR(CY7C67200_BASE,HPI_ADDR,0x051F);// TASK: Write the address to read from the memory for byte 3 of the report descriptor to HPI_ADDR.
 8000dec:	00c147c4 	movi	r3,1311
 8000df0:	00840034 	movhi	r2,4096
 8000df4:	10800204 	addi	r2,r2,8
 8000df8:	10c00035 	stwio	r3,0(r2)
		keycode = IORD(CY7C67200_BASE,HPI_DATA);
 8000dfc:	00840034 	movhi	r2,4096
 8000e00:	10800037 	ldwio	r2,0(r2)
 8000e04:	e0bffd15 	stw	r2,-12(fp)
		printf("\nfirst two keycode values are %04x\n",keycode);
 8000e08:	01020074 	movhi	r4,2049
 8000e0c:	21061204 	addi	r4,r4,6216
 8000e10:	e17ffd17 	ldw	r5,-12(fp)
 8000e14:	800212c0 	call	800212c <printf>
		IOWR(KEYCODE_BASE, 0, keycode & 0xff);
 8000e18:	e0bffd17 	ldw	r2,-12(fp)
 8000e1c:	10c03fcc 	andi	r3,r2,255
 8000e20:	00844034 	movhi	r2,4352
 8000e24:	10840804 	addi	r2,r2,4128
 8000e28:	10c00035 	stwio	r3,0(r2)
		
		//Added
		usleep(500);
 8000e2c:	01007d04 	movi	r4,500
 8000e30:	800f2380 	call	800f238 <usleep>
		keycode = 0;
 8000e34:	e03ffd15 	stw	zero,-12(fp)
		IOWR(KEYCODE_BASE, 0, keycode & 0xff);
 8000e38:	e0bffd17 	ldw	r2,-12(fp)
 8000e3c:	10c03fcc 	andi	r3,r2,255
 8000e40:	00844034 	movhi	r2,4352
 8000e44:	10840804 	addi	r2,r2,4128
 8000e48:	10c00035 	stwio	r3,0(r2)
		usleep(10000);
 8000e4c:	0109c404 	movi	r4,10000
 8000e50:	800f2380 	call	800f238 <usleep>
		//End of Add

		usleep(200);//usleep(5000);
 8000e54:	01003204 	movi	r4,200
 8000e58:	800f2380 	call	800f238 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
 8000e5c:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8000e60:	10bfffcc 	andi	r2,r2,65535
 8000e64:	1009883a 	mov	r4,r2
 8000e68:	8000fe00 	call	8000fe0 <UsbRead>
 8000e6c:	e0bffa0d 	sth	r2,-24(fp)

		if(!(usb_ctl_val & no_device))
 8000e70:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8000e74:	e0fffa0b 	ldhu	r3,-24(fp)
 8000e78:	1884703a 	and	r2,r3,r2
 8000e7c:	10bfffcc 	andi	r2,r2,65535
 8000e80:	1000211e 	bne	r2,zero,8000f08 <main+0xd10>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
 8000e84:	e03ffb15 	stw	zero,-20(fp)
 8000e88:	00001006 	br	8000ecc <main+0xcd4>
			{
				usleep(5*1000);
 8000e8c:	0104e204 	movi	r4,5000
 8000e90:	800f2380 	call	800f238 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
 8000e94:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8000e98:	10bfffcc 	andi	r2,r2,65535
 8000e9c:	1009883a 	mov	r4,r2
 8000ea0:	8000fe00 	call	8000fe0 <UsbRead>
 8000ea4:	e0bffa0d 	sth	r2,-24(fp)
				if(usb_ctl_val & no_device) break;
 8000ea8:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8000eac:	e0fffa0b 	ldhu	r3,-24(fp)
 8000eb0:	1884703a 	and	r2,r3,r2
 8000eb4:	10bfffcc 	andi	r2,r2,65535
 8000eb8:	10000126 	beq	r2,zero,8000ec0 <main+0xcc8>
 8000ebc:	00000606 	br	8000ed8 <main+0xce0>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
 8000ec0:	e0bffb17 	ldw	r2,-20(fp)
 8000ec4:	10800044 	addi	r2,r2,1
 8000ec8:	e0bffb15 	stw	r2,-20(fp)
 8000ecc:	e0bffb17 	ldw	r2,-20(fp)
 8000ed0:	108001d0 	cmplti	r2,r2,7
 8000ed4:	103fed1e 	bne	r2,zero,8000e8c <__alt_data_end+0xf8000e8c>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
			}
			if(!(usb_ctl_val & no_device))
 8000ed8:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8000edc:	e0fffa0b 	ldhu	r3,-24(fp)
 8000ee0:	1884703a 	and	r2,r3,r2
 8000ee4:	10bfffcc 	andi	r2,r2,65535
 8000ee8:	1000071e 	bne	r2,zero,8000f08 <main+0xd10>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
 8000eec:	01020074 	movhi	r4,2049
 8000ef0:	21061b04 	addi	r4,r4,6252
 8000ef4:	80022200 	call	8002220 <puts>
				printf("[INFO]: please insert again!!! \n");
 8000ef8:	01020074 	movhi	r4,2049
 8000efc:	21062604 	addi	r4,r4,6296
 8000f00:	80022200 	call	8002220 <puts>
			}
		}
		
		while (!(usb_ctl_val & no_device))
 8000f04:	00001e06 	br	8000f80 <main+0xd88>
 8000f08:	00001d06 	br	8000f80 <main+0xd88>
		{

			usb_ctl_val = UsbRead(ctl_reg);
 8000f0c:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8000f10:	10bfffcc 	andi	r2,r2,65535
 8000f14:	1009883a 	mov	r4,r2
 8000f18:	8000fe00 	call	8000fe0 <UsbRead>
 8000f1c:	e0bffa0d 	sth	r2,-24(fp)
			usleep(5*1000);
 8000f20:	0104e204 	movi	r4,5000
 8000f24:	800f2380 	call	800f238 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 8000f28:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8000f2c:	10bfffcc 	andi	r2,r2,65535
 8000f30:	1009883a 	mov	r4,r2
 8000f34:	8000fe00 	call	8000fe0 <UsbRead>
 8000f38:	e0bffa0d 	sth	r2,-24(fp)
			usleep(5*1000);
 8000f3c:	0104e204 	movi	r4,5000
 8000f40:	800f2380 	call	800f238 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 8000f44:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8000f48:	10bfffcc 	andi	r2,r2,65535
 8000f4c:	1009883a 	mov	r4,r2
 8000f50:	8000fe00 	call	8000fe0 <UsbRead>
 8000f54:	e0bffa0d 	sth	r2,-24(fp)
			usleep(5*1000);
 8000f58:	0104e204 	movi	r4,5000
 8000f5c:	800f2380 	call	800f238 <usleep>

			if(usb_ctl_val & no_device)
 8000f60:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8000f64:	e0fffa0b 	ldhu	r3,-24(fp)
 8000f68:	1884703a 	and	r2,r3,r2
 8000f6c:	10bfffcc 	andi	r2,r2,65535
 8000f70:	10000126 	beq	r2,zero,8000f78 <main+0xd80>
				goto USB_HOT_PLUG;
 8000f74:	003caa06 	br	8000220 <__alt_data_end+0xf8000220>

			usleep(200);
 8000f78:	01003204 	movi	r4,200
 8000f7c:	800f2380 	call	800f238 <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}
		
		while (!(usb_ctl_val & no_device))
 8000f80:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8000f84:	e0fffa0b 	ldhu	r3,-24(fp)
 8000f88:	1884703a 	and	r2,r3,r2
 8000f8c:	10bfffcc 	andi	r2,r2,65535
 8000f90:	103fde26 	beq	r2,zero,8000f0c <__alt_data_end+0xf8000f0c>

			usleep(200);

		}

	}//end while
 8000f94:	003f4406 	br	8000ca8 <__alt_data_end+0xf8000ca8>

08000f98 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
 8000f98:	defffd04 	addi	sp,sp,-12
 8000f9c:	df000215 	stw	fp,8(sp)
 8000fa0:	df000204 	addi	fp,sp,8
 8000fa4:	2007883a 	mov	r3,r4
 8000fa8:	2805883a 	mov	r2,r5
 8000fac:	e0fffe0d 	sth	r3,-8(fp)
 8000fb0:	e0bfff0d 	sth	r2,-4(fp)
	//XIo_Out16(USB_ADDRESS, Address);
	IOWR(CY7C67200_BASE,HPI_ADDR,Address);
 8000fb4:	e0fffe0b 	ldhu	r3,-8(fp)
 8000fb8:	00840034 	movhi	r2,4096
 8000fbc:	10800204 	addi	r2,r2,8
 8000fc0:	10c00035 	stwio	r3,0(r2)
	//usleep(10);

	//XIo_Out16(USB_DATA, Data);
	IOWR(CY7C67200_BASE,HPI_DATA,Data);
 8000fc4:	e0ffff0b 	ldhu	r3,-4(fp)
 8000fc8:	00840034 	movhi	r2,4096
 8000fcc:	10c00035 	stwio	r3,0(r2)
}
 8000fd0:	e037883a 	mov	sp,fp
 8000fd4:	df000017 	ldw	fp,0(sp)
 8000fd8:	dec00104 	addi	sp,sp,4
 8000fdc:	f800283a 	ret

08000fe0 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
 8000fe0:	defffe04 	addi	sp,sp,-8
 8000fe4:	df000115 	stw	fp,4(sp)
 8000fe8:	df000104 	addi	fp,sp,4
 8000fec:	2005883a 	mov	r2,r4
 8000ff0:	e0bfff0d 	sth	r2,-4(fp)
	//XIo_Out16(HPI_ADDR, Address);
	IOWR(CY7C67200_BASE,HPI_ADDR,Address);
 8000ff4:	e0ffff0b 	ldhu	r3,-4(fp)
 8000ff8:	00840034 	movhi	r2,4096
 8000ffc:	10800204 	addi	r2,r2,8
 8001000:	10c00035 	stwio	r3,0(r2)
	//usleep(20);
	return IORD(CY7C67200_BASE,HPI_DATA);
 8001004:	00840034 	movhi	r2,4096
 8001008:	10800037 	ldwio	r2,0(r2)
}
 800100c:	e037883a 	mov	sp,fp
 8001010:	df000017 	ldw	fp,0(sp)
 8001014:	dec00104 	addi	sp,sp,4
 8001018:	f800283a 	ret

0800101c <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
 800101c:	defffe04 	addi	sp,sp,-8
 8001020:	dfc00115 	stw	ra,4(sp)
 8001024:	df000015 	stw	fp,0(sp)
 8001028:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IOWR(CY7C67200_BASE,HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
 800102c:	00fe9414 	movui	r3,64080
 8001030:	00840034 	movhi	r2,4096
 8001034:	10800104 	addi	r2,r2,4
 8001038:	10c00035 	stwio	r3,0(r2)
	usleep(100000);
 800103c:	010000b4 	movhi	r4,2
 8001040:	2121a804 	addi	r4,r4,-31072
 8001044:	800f2380 	call	800f238 <usleep>
	printf("[USB INIT]:reset finished!\n");
 8001048:	01020074 	movhi	r4,2049
 800104c:	21062e04 	addi	r4,r4,6328
 8001050:	80022200 	call	8002220 <puts>

	usleep(500000);
 8001054:	01000234 	movhi	r4,8
 8001058:	21284804 	addi	r4,r4,-24288
 800105c:	800f2380 	call	800f238 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
 8001060:	01020074 	movhi	r4,2049
 8001064:	21063504 	addi	r4,r4,6356
 8001068:	80022200 	call	8002220 <puts>
	IORD(CY7C67200_BASE,HPI_MAILBOX);
 800106c:	00840034 	movhi	r2,4096
 8001070:	10800104 	addi	r2,r2,4
 8001074:	10800037 	ldwio	r2,0(r2)
	IORD(CY7C67200_BASE,HPI_STATUS);
 8001078:	00840034 	movhi	r2,4096
 800107c:	10800304 	addi	r2,r2,12
 8001080:	10800037 	ldwio	r2,0(r2)

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
 8001084:	01005104 	movi	r4,324
 8001088:	8000fe00 	call	8000fe0 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
 800108c:	01005104 	movi	r4,324
 8001090:	000b883a 	mov	r5,zero
 8001094:	8000f980 	call	8000f98 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
 8001098:	01005204 	movi	r4,328
 800109c:	8000fe00 	call	8000fe0 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
 80010a0:	01005204 	movi	r4,328
 80010a4:	000b883a 	mov	r5,zero
 80010a8:	8000f980 	call	8000f98 <UsbWrite>

	UsbWrite (HOST1_STAT_REG, 0xFFFF);
 80010ac:	01302414 	movui	r4,49296
 80010b0:	017fffd4 	movui	r5,65535
 80010b4:	8000f980 	call	8000f98 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
 80010b8:	01302c14 	movui	r4,49328
 80010bc:	017fffd4 	movui	r5,65535
 80010c0:	8000f980 	call	8000f98 <UsbWrite>
}
 80010c4:	e037883a 	mov	sp,fp
 80010c8:	dfc00117 	ldw	ra,4(sp)
 80010cc:	df000017 	ldw	fp,0(sp)
 80010d0:	dec00204 	addi	sp,sp,8
 80010d4:	f800283a 	ret

080010d8 <UsbSetAddress>:


void UsbSetAddress()
{
 80010d8:	defffe04 	addi	sp,sp,-8
 80010dc:	dfc00115 	stw	ra,4(sp)
 80010e0:	df000015 	stw	fp,0(sp)
 80010e4:	d839883a 	mov	fp,sp
	//the starting address
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 80010e8:	00c14004 	movi	r3,1280
 80010ec:	00840034 	movhi	r2,4096
 80010f0:	10800204 	addi	r2,r2,8
 80010f4:	10c00035 	stwio	r3,0(r2)
	// TD #1: 6 writes
	IOWR(CY7C67200_BASE,HPI_DATA,0x050C);
 80010f8:	00c14304 	movi	r3,1292
 80010fc:	00840034 	movhi	r2,4096
 8001100:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
 8001104:	00c00204 	movi	r3,8
 8001108:	00840034 	movhi	r2,4096
 800110c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x00D0); //PID and Device Address
 8001110:	00c03404 	movi	r3,208
 8001114:	00840034 	movhi	r2,4096
 8001118:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001); //TD Control and Transaction Status
 800111c:	00c00044 	movi	r3,1
 8001120:	00840034 	movhi	r2,4096
 8001124:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013); //Active Flag and Residue
 8001128:	00c004c4 	movi	r3,19
 800112c:	00840034 	movhi	r2,4096
 8001130:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0514); //Pointer to next TD
 8001134:	00c14504 	movi	r3,1300
 8001138:	00840034 	movhi	r2,4096
 800113c:	10c00035 	stwio	r3,0(r2)
	// TASK: Complete with 4 more IOWR functions

	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IOWR(CY7C67200_BASE,HPI_DATA,0x0500); //bRequest and bmRequestType
 8001140:	00c14004 	movi	r3,1280
 8001144:	00840034 	movhi	r2,4096
 8001148:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0002); //wValue
 800114c:	00c00084 	movi	r3,2
 8001150:	00840034 	movhi	r2,4096
 8001154:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //wIndex
 8001158:	0007883a 	mov	r3,zero
 800115c:	00840034 	movhi	r2,4096
 8001160:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //wLength
 8001164:	0007883a 	mov	r3,zero
 8001168:	00840034 	movhi	r2,4096
 800116c:	10c00035 	stwio	r3,0(r2)
	
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //data buffer base address
 8001170:	0007883a 	mov	r3,zero
 8001174:	00840034 	movhi	r2,4096
 8001178:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //port number and data length
 800117c:	0007883a 	mov	r3,zero
 8001180:	00840034 	movhi	r2,4096
 8001184:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0090); //device address and endpoint number
 8001188:	00c02404 	movi	r3,144
 800118c:	00840034 	movhi	r2,4096
 8001190:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041); //TD control and transaction status
 8001194:	00c01044 	movi	r3,65
 8001198:	00840034 	movhi	r2,4096
 800119c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013); //residue and active flag
 80011a0:	00c004c4 	movi	r3,19
 80011a4:	00840034 	movhi	r2,4096
 80011a8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //pointer to next TD
 80011ac:	0007883a 	mov	r3,zero
 80011b0:	00840034 	movhi	r2,4096
 80011b4:	10c00035 	stwio	r3,0(r2)

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 80011b8:	01006c04 	movi	r4,432
 80011bc:	01414004 	movi	r5,1280
 80011c0:	8000f980 	call	8000f98 <UsbWrite>
}
 80011c4:	e037883a 	mov	sp,fp
 80011c8:	dfc00117 	ldw	ra,4(sp)
 80011cc:	df000017 	ldw	fp,0(sp)
 80011d0:	dec00204 	addi	sp,sp,8
 80011d4:	f800283a 	ret

080011d8 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
 80011d8:	defffe04 	addi	sp,sp,-8
 80011dc:	dfc00115 	stw	ra,4(sp)
 80011e0:	df000015 	stw	fp,0(sp)
 80011e4:	d839883a 	mov	fp,sp
	//the starting address
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 80011e8:	00c14004 	movi	r3,1280
 80011ec:	00840034 	movhi	r2,4096
 80011f0:	10800204 	addi	r2,r2,8
 80011f4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x050C);
 80011f8:	00c14304 	movi	r3,1292
 80011fc:	00840034 	movhi	r2,4096
 8001200:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
 8001204:	00c00204 	movi	r3,8
 8001208:	00840034 	movhi	r2,4096
 800120c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
 8001210:	00c0b404 	movi	r3,720
 8001214:	00840034 	movhi	r2,4096
 8001218:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
 800121c:	00c00044 	movi	r3,1
 8001220:	00840034 	movhi	r2,4096
 8001224:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 8001228:	00c004c4 	movi	r3,19
 800122c:	00840034 	movhi	r2,4096
 8001230:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
 8001234:	00c14504 	movi	r3,1300
 8001238:	00840034 	movhi	r2,4096
 800123c:	10c00035 	stwio	r3,0(r2)

	//td content 4 bytes
	IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
 8001240:	00c1a004 	movi	r3,1664
 8001244:	00840034 	movhi	r2,4096
 8001248:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0100); //device 0x01
 800124c:	00c04004 	movi	r3,256
 8001250:	00840034 	movhi	r2,4096
 8001254:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 8001258:	0007883a 	mov	r3,zero
 800125c:	00840034 	movhi	r2,4096
 8001260:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);
 8001264:	00c00204 	movi	r3,8
 8001268:	00840034 	movhi	r2,4096
 800126c:	10c00035 	stwio	r3,0(r2)

	//data phase IN
	IOWR(CY7C67200_BASE,HPI_DATA,0x052C); //
 8001270:	00c14b04 	movi	r3,1324
 8001274:	00840034 	movhi	r2,4096
 8001278:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//
 800127c:	00c00204 	movi	r3,8
 8001280:	00840034 	movhi	r2,4096
 8001284:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//
 8001288:	00c0a404 	movi	r3,656
 800128c:	00840034 	movhi	r2,4096
 8001290:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);
 8001294:	00c01044 	movi	r3,65
 8001298:	00840034 	movhi	r2,4096
 800129c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 80012a0:	00c004c4 	movi	r3,19
 80012a4:	00840034 	movhi	r2,4096
 80012a8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0520);
 80012ac:	00c14804 	movi	r3,1312
 80012b0:	00840034 	movhi	r2,4096
 80012b4:	10c00035 	stwio	r3,0(r2)

	//    //status phase
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
 80012b8:	0007883a 	mov	r3,zero
 80012bc:	00840034 	movhi	r2,4096
 80012c0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number
 80012c4:	0007883a 	mov	r3,zero
 80012c8:	00840034 	movhi	r2,4096
 80012cc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//device address
 80012d0:	00c08404 	movi	r3,528
 80012d4:	00840034 	movhi	r2,4096
 80012d8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);
 80012dc:	00c01044 	movi	r3,65
 80012e0:	00840034 	movhi	r2,4096
 80012e4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 80012e8:	00c004c4 	movi	r3,19
 80012ec:	00840034 	movhi	r2,4096
 80012f0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 80012f4:	0007883a 	mov	r3,zero
 80012f8:	00840034 	movhi	r2,4096
 80012fc:	10c00035 	stwio	r3,0(r2)

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001300:	01006c04 	movi	r4,432
 8001304:	01414004 	movi	r5,1280
 8001308:	8000f980 	call	8000f98 <UsbWrite>
}
 800130c:	e037883a 	mov	sp,fp
 8001310:	dfc00117 	ldw	ra,4(sp)
 8001314:	df000017 	ldw	fp,0(sp)
 8001318:	dec00204 	addi	sp,sp,8
 800131c:	f800283a 	ret

08001320 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
 8001320:	defffe04 	addi	sp,sp,-8
 8001324:	dfc00115 	stw	ra,4(sp)
 8001328:	df000015 	stw	fp,0(sp)
 800132c:	d839883a 	mov	fp,sp
	//the starting address
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 8001330:	00c14004 	movi	r3,1280
 8001334:	00840034 	movhi	r2,4096
 8001338:	10800204 	addi	r2,r2,8
 800133c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x050C);
 8001340:	00c14304 	movi	r3,1292
 8001344:	00840034 	movhi	r2,4096
 8001348:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
 800134c:	00c00204 	movi	r3,8
 8001350:	00840034 	movhi	r2,4096
 8001354:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
 8001358:	00c0b404 	movi	r3,720
 800135c:	00840034 	movhi	r2,4096
 8001360:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
 8001364:	00c00044 	movi	r3,1
 8001368:	00840034 	movhi	r2,4096
 800136c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 8001370:	00c004c4 	movi	r3,19
 8001374:	00840034 	movhi	r2,4096
 8001378:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
 800137c:	00c14504 	movi	r3,1300
 8001380:	00840034 	movhi	r2,4096
 8001384:	10c00035 	stwio	r3,0(r2)

	//td content 4 bytes
	IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
 8001388:	00c1a004 	movi	r3,1664
 800138c:	00840034 	movhi	r2,4096
 8001390:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0100);//e //device 0x01
 8001394:	00c04004 	movi	r3,256
 8001398:	00840034 	movhi	r2,4096
 800139c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
 80013a0:	0007883a 	mov	r3,zero
 80013a4:	00840034 	movhi	r2,4096
 80013a8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0012);//2
 80013ac:	00c00484 	movi	r3,18
 80013b0:	00840034 	movhi	r2,4096
 80013b4:	10c00035 	stwio	r3,0(r2)

	//data phase IN-1
	IOWR(CY7C67200_BASE,HPI_DATA,0x0544); //514
 80013b8:	00c15104 	movi	r3,1348
 80013bc:	00840034 	movhi	r2,4096
 80013c0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
 80013c4:	00c00204 	movi	r3,8
 80013c8:	00840034 	movhi	r2,4096
 80013cc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
 80013d0:	00c0a404 	movi	r3,656
 80013d4:	00840034 	movhi	r2,4096
 80013d8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
 80013dc:	00c01044 	movi	r3,65
 80013e0:	00840034 	movhi	r2,4096
 80013e4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
 80013e8:	00c004c4 	movi	r3,19
 80013ec:	00840034 	movhi	r2,4096
 80013f0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
 80013f4:	00c14804 	movi	r3,1312
 80013f8:	00840034 	movhi	r2,4096
 80013fc:	10c00035 	stwio	r3,0(r2)

	//data phase IN-2
	IOWR(CY7C67200_BASE,HPI_DATA,0x054c); //520
 8001400:	00c15304 	movi	r3,1356
 8001404:	00840034 	movhi	r2,4096
 8001408:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
 800140c:	00c00204 	movi	r3,8
 8001410:	00840034 	movhi	r2,4096
 8001414:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
 8001418:	00c0a404 	movi	r3,656
 800141c:	00840034 	movhi	r2,4096
 8001420:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6
 8001424:	00c00044 	movi	r3,1
 8001428:	00840034 	movhi	r2,4096
 800142c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
 8001430:	00c004c4 	movi	r3,19
 8001434:	00840034 	movhi	r2,4096
 8001438:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
 800143c:	00c14b04 	movi	r3,1324
 8001440:	00840034 	movhi	r2,4096
 8001444:	10c00035 	stwio	r3,0(r2)

	//data phase IN-3
	IOWR(CY7C67200_BASE,HPI_DATA,0x0554); //c
 8001448:	00c15504 	movi	r3,1364
 800144c:	00840034 	movhi	r2,4096
 8001450:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0002);//e
 8001454:	00c00084 	movi	r3,2
 8001458:	00840034 	movhi	r2,4096
 800145c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//530
 8001460:	00c0a404 	movi	r3,656
 8001464:	00840034 	movhi	r2,4096
 8001468:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
 800146c:	00c01044 	movi	r3,65
 8001470:	00840034 	movhi	r2,4096
 8001474:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
 8001478:	00c004c4 	movi	r3,19
 800147c:	00840034 	movhi	r2,4096
 8001480:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0538);//6
 8001484:	00c14e04 	movi	r3,1336
 8001488:	00840034 	movhi	r2,4096
 800148c:	10c00035 	stwio	r3,0(r2)

	//status phase
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //538
 8001490:	0007883a 	mov	r3,zero
 8001494:	00840034 	movhi	r2,4096
 8001498:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
 800149c:	0007883a 	mov	r3,zero
 80014a0:	00840034 	movhi	r2,4096
 80014a4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//c
 80014a8:	00c08404 	movi	r3,528
 80014ac:	00840034 	movhi	r2,4096
 80014b0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//e
 80014b4:	00c01044 	movi	r3,65
 80014b8:	00840034 	movhi	r2,4096
 80014bc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//540
 80014c0:	00c004c4 	movi	r3,19
 80014c4:	00840034 	movhi	r2,4096
 80014c8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//2
 80014cc:	0007883a 	mov	r3,zero
 80014d0:	00840034 	movhi	r2,4096
 80014d4:	10c00035 	stwio	r3,0(r2)

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 80014d8:	01006c04 	movi	r4,432
 80014dc:	01414004 	movi	r5,1280
 80014e0:	8000f980 	call	8000f98 <UsbWrite>
}
 80014e4:	e037883a 	mov	sp,fp
 80014e8:	dfc00117 	ldw	ra,4(sp)
 80014ec:	df000017 	ldw	fp,0(sp)
 80014f0:	dec00204 	addi	sp,sp,8
 80014f4:	f800283a 	ret

080014f8 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
 80014f8:	defffe04 	addi	sp,sp,-8
 80014fc:	dfc00115 	stw	ra,4(sp)
 8001500:	df000015 	stw	fp,0(sp)
 8001504:	d839883a 	mov	fp,sp
	//the starting address
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 8001508:	00c14004 	movi	r3,1280
 800150c:	00840034 	movhi	r2,4096
 8001510:	10800204 	addi	r2,r2,8
 8001514:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x050C);
 8001518:	00c14304 	movi	r3,1292
 800151c:	00840034 	movhi	r2,4096
 8001520:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
 8001524:	00c00204 	movi	r3,8
 8001528:	00840034 	movhi	r2,4096
 800152c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
 8001530:	00c0b404 	movi	r3,720
 8001534:	00840034 	movhi	r2,4096
 8001538:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
 800153c:	00c00044 	movi	r3,1
 8001540:	00840034 	movhi	r2,4096
 8001544:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 8001548:	00c004c4 	movi	r3,19
 800154c:	00840034 	movhi	r2,4096
 8001550:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
 8001554:	00c14504 	movi	r3,1300
 8001558:	00840034 	movhi	r2,4096
 800155c:	10c00035 	stwio	r3,0(r2)

	//td content 4 bytes
	IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
 8001560:	00c1a004 	movi	r3,1664
 8001564:	00840034 	movhi	r2,4096
 8001568:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0200);//e //config 0x02
 800156c:	00c08004 	movi	r3,512
 8001570:	00840034 	movhi	r2,4096
 8001574:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
 8001578:	0007883a 	mov	r3,zero
 800157c:	00840034 	movhi	r2,4096
 8001580:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0009);//2
 8001584:	00c00244 	movi	r3,9
 8001588:	00840034 	movhi	r2,4096
 800158c:	10c00035 	stwio	r3,0(r2)

	//data phase IN-1
	IOWR(CY7C67200_BASE,HPI_DATA,0x0544); //514
 8001590:	00c15104 	movi	r3,1348
 8001594:	00840034 	movhi	r2,4096
 8001598:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
 800159c:	00c00204 	movi	r3,8
 80015a0:	00840034 	movhi	r2,4096
 80015a4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
 80015a8:	00c0a404 	movi	r3,656
 80015ac:	00840034 	movhi	r2,4096
 80015b0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
 80015b4:	00c01044 	movi	r3,65
 80015b8:	00840034 	movhi	r2,4096
 80015bc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
 80015c0:	00c004c4 	movi	r3,19
 80015c4:	00840034 	movhi	r2,4096
 80015c8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
 80015cc:	00c14804 	movi	r3,1312
 80015d0:	00840034 	movhi	r2,4096
 80015d4:	10c00035 	stwio	r3,0(r2)

	//data phase IN-2
	IOWR(CY7C67200_BASE,HPI_DATA,0x054c); //520
 80015d8:	00c15304 	movi	r3,1356
 80015dc:	00840034 	movhi	r2,4096
 80015e0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//2
 80015e4:	00c00044 	movi	r3,1
 80015e8:	00840034 	movhi	r2,4096
 80015ec:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
 80015f0:	00c0a404 	movi	r3,656
 80015f4:	00840034 	movhi	r2,4096
 80015f8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
 80015fc:	00c00044 	movi	r3,1
 8001600:	00840034 	movhi	r2,4096
 8001604:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
 8001608:	00c004c4 	movi	r3,19
 800160c:	00840034 	movhi	r2,4096
 8001610:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
 8001614:	00c14b04 	movi	r3,1324
 8001618:	00840034 	movhi	r2,4096
 800161c:	10c00035 	stwio	r3,0(r2)

	//status phase
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //52c
 8001620:	0007883a 	mov	r3,zero
 8001624:	00840034 	movhi	r2,4096
 8001628:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//e
 800162c:	0007883a 	mov	r3,zero
 8001630:	00840034 	movhi	r2,4096
 8001634:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//530
 8001638:	00c08404 	movi	r3,528
 800163c:	00840034 	movhi	r2,4096
 8001640:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
 8001644:	00c01044 	movi	r3,65
 8001648:	00840034 	movhi	r2,4096
 800164c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
 8001650:	00c004c4 	movi	r3,19
 8001654:	00840034 	movhi	r2,4096
 8001658:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//6
 800165c:	0007883a 	mov	r3,zero
 8001660:	00840034 	movhi	r2,4096
 8001664:	10c00035 	stwio	r3,0(r2)

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001668:	01006c04 	movi	r4,432
 800166c:	01414004 	movi	r5,1280
 8001670:	8000f980 	call	8000f98 <UsbWrite>
}
 8001674:	e037883a 	mov	sp,fp
 8001678:	dfc00117 	ldw	ra,4(sp)
 800167c:	df000017 	ldw	fp,0(sp)
 8001680:	dec00204 	addi	sp,sp,8
 8001684:	f800283a 	ret

08001688 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
 8001688:	defffe04 	addi	sp,sp,-8
 800168c:	dfc00115 	stw	ra,4(sp)
 8001690:	df000015 	stw	fp,0(sp)
 8001694:	d839883a 	mov	fp,sp
	//the starting address
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 8001698:	00c14004 	movi	r3,1280
 800169c:	00840034 	movhi	r2,4096
 80016a0:	10800204 	addi	r2,r2,8
 80016a4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x050C);
 80016a8:	00c14304 	movi	r3,1292
 80016ac:	00840034 	movhi	r2,4096
 80016b0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
 80016b4:	00c00204 	movi	r3,8
 80016b8:	00840034 	movhi	r2,4096
 80016bc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
 80016c0:	00c0b404 	movi	r3,720
 80016c4:	00840034 	movhi	r2,4096
 80016c8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
 80016cc:	00c00044 	movi	r3,1
 80016d0:	00840034 	movhi	r2,4096
 80016d4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 80016d8:	00c004c4 	movi	r3,19
 80016dc:	00840034 	movhi	r2,4096
 80016e0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
 80016e4:	00c14504 	movi	r3,1300
 80016e8:	00840034 	movhi	r2,4096
 80016ec:	10c00035 	stwio	r3,0(r2)

	//td content 4 bytes
	IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
 80016f0:	00c1a004 	movi	r3,1664
 80016f4:	00840034 	movhi	r2,4096
 80016f8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0200);//e //config 0x02
 80016fc:	00c08004 	movi	r3,512
 8001700:	00840034 	movhi	r2,4096
 8001704:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
 8001708:	0007883a 	mov	r3,zero
 800170c:	00840034 	movhi	r2,4096
 8001710:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x00FF);//2
 8001714:	00c03fc4 	movi	r3,255
 8001718:	00840034 	movhi	r2,4096
 800171c:	10c00035 	stwio	r3,0(r2)

	//data phase IN-1
	IOWR(CY7C67200_BASE,HPI_DATA,0x055c); //514
 8001720:	00c15704 	movi	r3,1372
 8001724:	00840034 	movhi	r2,4096
 8001728:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
 800172c:	00c00204 	movi	r3,8
 8001730:	00840034 	movhi	r2,4096
 8001734:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
 8001738:	00c0a404 	movi	r3,656
 800173c:	00840034 	movhi	r2,4096
 8001740:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
 8001744:	00c01044 	movi	r3,65
 8001748:	00840034 	movhi	r2,4096
 800174c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
 8001750:	00c004c4 	movi	r3,19
 8001754:	00840034 	movhi	r2,4096
 8001758:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
 800175c:	00c14804 	movi	r3,1312
 8001760:	00840034 	movhi	r2,4096
 8001764:	10c00035 	stwio	r3,0(r2)

	//data phase IN-2
	IOWR(CY7C67200_BASE,HPI_DATA,0x0564); //520
 8001768:	00c15904 	movi	r3,1380
 800176c:	00840034 	movhi	r2,4096
 8001770:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
 8001774:	00c00204 	movi	r3,8
 8001778:	00840034 	movhi	r2,4096
 800177c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
 8001780:	00c0a404 	movi	r3,656
 8001784:	00840034 	movhi	r2,4096
 8001788:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
 800178c:	00c00044 	movi	r3,1
 8001790:	00840034 	movhi	r2,4096
 8001794:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
 8001798:	00c004c4 	movi	r3,19
 800179c:	00840034 	movhi	r2,4096
 80017a0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
 80017a4:	00c14b04 	movi	r3,1324
 80017a8:	00840034 	movhi	r2,4096
 80017ac:	10c00035 	stwio	r3,0(r2)

	//data phase IN-3
	IOWR(CY7C67200_BASE,HPI_DATA,0x056c); //52c
 80017b0:	00c15b04 	movi	r3,1388
 80017b4:	00840034 	movhi	r2,4096
 80017b8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//e
 80017bc:	00c00204 	movi	r3,8
 80017c0:	00840034 	movhi	r2,4096
 80017c4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//530
 80017c8:	00c0a404 	movi	r3,656
 80017cc:	00840034 	movhi	r2,4096
 80017d0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
 80017d4:	00c01044 	movi	r3,65
 80017d8:	00840034 	movhi	r2,4096
 80017dc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
 80017e0:	00c004c4 	movi	r3,19
 80017e4:	00840034 	movhi	r2,4096
 80017e8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0538);//6
 80017ec:	00c14e04 	movi	r3,1336
 80017f0:	00840034 	movhi	r2,4096
 80017f4:	10c00035 	stwio	r3,0(r2)

	//data phase IN-4
	IOWR(CY7C67200_BASE,HPI_DATA,0x0574); //538
 80017f8:	00c15d04 	movi	r3,1396
 80017fc:	00840034 	movhi	r2,4096
 8001800:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//a
 8001804:	00c00204 	movi	r3,8
 8001808:	00840034 	movhi	r2,4096
 800180c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//c
 8001810:	00c0a404 	movi	r3,656
 8001814:	00840034 	movhi	r2,4096
 8001818:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//e //data0
 800181c:	00c00044 	movi	r3,1
 8001820:	00840034 	movhi	r2,4096
 8001824:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//540
 8001828:	00c004c4 	movi	r3,19
 800182c:	00840034 	movhi	r2,4096
 8001830:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0544);//2
 8001834:	00c15104 	movi	r3,1348
 8001838:	00840034 	movhi	r2,4096
 800183c:	10c00035 	stwio	r3,0(r2)

	//data phase IN-5
	IOWR(CY7C67200_BASE,HPI_DATA,0x057c); //544
 8001840:	00c15f04 	movi	r3,1404
 8001844:	00840034 	movhi	r2,4096
 8001848:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0002);//6
 800184c:	00c00084 	movi	r3,2
 8001850:	00840034 	movhi	r2,4096
 8001854:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
 8001858:	00c0a404 	movi	r3,656
 800185c:	00840034 	movhi	r2,4096
 8001860:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a //data1
 8001864:	00c01044 	movi	r3,65
 8001868:	00840034 	movhi	r2,4096
 800186c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
 8001870:	00c004c4 	movi	r3,19
 8001874:	00840034 	movhi	r2,4096
 8001878:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0550);//e
 800187c:	00c15404 	movi	r3,1360
 8001880:	00840034 	movhi	r2,4096
 8001884:	10c00035 	stwio	r3,0(r2)

	//status phase
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //550
 8001888:	0007883a 	mov	r3,zero
 800188c:	00840034 	movhi	r2,4096
 8001890:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//2
 8001894:	0007883a 	mov	r3,zero
 8001898:	00840034 	movhi	r2,4096
 800189c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//4
 80018a0:	00c08404 	movi	r3,528
 80018a4:	00840034 	movhi	r2,4096
 80018a8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//6
 80018ac:	00c01044 	movi	r3,65
 80018b0:	00840034 	movhi	r2,4096
 80018b4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
 80018b8:	00c004c4 	movi	r3,19
 80018bc:	00840034 	movhi	r2,4096
 80018c0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
 80018c4:	0007883a 	mov	r3,zero
 80018c8:	00840034 	movhi	r2,4096
 80018cc:	10c00035 	stwio	r3,0(r2)

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 80018d0:	01006c04 	movi	r4,432
 80018d4:	01414004 	movi	r5,1280
 80018d8:	8000f980 	call	8000f98 <UsbWrite>
}
 80018dc:	e037883a 	mov	sp,fp
 80018e0:	dfc00117 	ldw	ra,4(sp)
 80018e4:	df000017 	ldw	fp,0(sp)
 80018e8:	dec00204 	addi	sp,sp,8
 80018ec:	f800283a 	ret

080018f0 <UsbSetConfig>:

void UsbSetConfig()
{
 80018f0:	defffe04 	addi	sp,sp,-8
 80018f4:	dfc00115 	stw	ra,4(sp)
 80018f8:	df000015 	stw	fp,0(sp)
 80018fc:	d839883a 	mov	fp,sp
	//the starting address
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 8001900:	00c14004 	movi	r3,1280
 8001904:	00840034 	movhi	r2,4096
 8001908:	10800204 	addi	r2,r2,8
 800190c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x050C);
 8001910:	00c14304 	movi	r3,1292
 8001914:	00840034 	movhi	r2,4096
 8001918:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
 800191c:	00c00204 	movi	r3,8
 8001920:	00840034 	movhi	r2,4096
 8001924:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //port address
 8001928:	00c0b404 	movi	r3,720
 800192c:	00840034 	movhi	r2,4096
 8001930:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
 8001934:	00c00044 	movi	r3,1
 8001938:	00840034 	movhi	r2,4096
 800193c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 8001940:	00c004c4 	movi	r3,19
 8001944:	00840034 	movhi	r2,4096
 8001948:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
 800194c:	00c14504 	movi	r3,1300
 8001950:	00840034 	movhi	r2,4096
 8001954:	10c00035 	stwio	r3,0(r2)

	//td content 4 bytes
	IOWR(CY7C67200_BASE,HPI_DATA,0x0900);
 8001958:	00c24004 	movi	r3,2304
 800195c:	00840034 	movhi	r2,4096
 8001960:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//device address
 8001964:	00c00044 	movi	r3,1
 8001968:	00840034 	movhi	r2,4096
 800196c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 8001970:	0007883a 	mov	r3,zero
 8001974:	00840034 	movhi	r2,4096
 8001978:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 800197c:	0007883a 	mov	r3,zero
 8001980:	00840034 	movhi	r2,4096
 8001984:	10c00035 	stwio	r3,0(r2)
	//in packet
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
 8001988:	0007883a 	mov	r3,zero
 800198c:	00840034 	movhi	r2,4096
 8001990:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number
 8001994:	0007883a 	mov	r3,zero
 8001998:	00840034 	movhi	r2,4096
 800199c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//device address
 80019a0:	00c0a404 	movi	r3,656
 80019a4:	00840034 	movhi	r2,4096
 80019a8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041); //data 1
 80019ac:	00c01044 	movi	r3,65
 80019b0:	00840034 	movhi	r2,4096
 80019b4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 80019b8:	00c004c4 	movi	r3,19
 80019bc:	00840034 	movhi	r2,4096
 80019c0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 80019c4:	0007883a 	mov	r3,zero
 80019c8:	00840034 	movhi	r2,4096
 80019cc:	10c00035 	stwio	r3,0(r2)

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 80019d0:	01006c04 	movi	r4,432
 80019d4:	01414004 	movi	r5,1280
 80019d8:	8000f980 	call	8000f98 <UsbWrite>

}
 80019dc:	e037883a 	mov	sp,fp
 80019e0:	dfc00117 	ldw	ra,4(sp)
 80019e4:	df000017 	ldw	fp,0(sp)
 80019e8:	dec00204 	addi	sp,sp,8
 80019ec:	f800283a 	ret

080019f0 <UsbClassRequest>:

void UsbClassRequest()
{
 80019f0:	defffe04 	addi	sp,sp,-8
 80019f4:	dfc00115 	stw	ra,4(sp)
 80019f8:	df000015 	stw	fp,0(sp)
 80019fc:	d839883a 	mov	fp,sp
	//the starting address
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 8001a00:	00c14004 	movi	r3,1280
 8001a04:	00840034 	movhi	r2,4096
 8001a08:	10800204 	addi	r2,r2,8
 8001a0c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x050C);
 8001a10:	00c14304 	movi	r3,1292
 8001a14:	00840034 	movhi	r2,4096
 8001a18:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
 8001a1c:	00c00204 	movi	r3,8
 8001a20:	00840034 	movhi	r2,4096
 8001a24:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //port address
 8001a28:	00c0b404 	movi	r3,720
 8001a2c:	00840034 	movhi	r2,4096
 8001a30:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
 8001a34:	00c00044 	movi	r3,1
 8001a38:	00840034 	movhi	r2,4096
 8001a3c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 8001a40:	00c004c4 	movi	r3,19
 8001a44:	00840034 	movhi	r2,4096
 8001a48:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
 8001a4c:	00c14504 	movi	r3,1300
 8001a50:	00840034 	movhi	r2,4096
 8001a54:	10c00035 	stwio	r3,0(r2)

	//td content 4 bytes
	IOWR(CY7C67200_BASE,HPI_DATA,0x0A21);
 8001a58:	00c28844 	movi	r3,2593
 8001a5c:	00840034 	movhi	r2,4096
 8001a60:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//device address
 8001a64:	0007883a 	mov	r3,zero
 8001a68:	00840034 	movhi	r2,4096
 8001a6c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 8001a70:	0007883a 	mov	r3,zero
 8001a74:	00840034 	movhi	r2,4096
 8001a78:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 8001a7c:	0007883a 	mov	r3,zero
 8001a80:	00840034 	movhi	r2,4096
 8001a84:	10c00035 	stwio	r3,0(r2)
	//in packet
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
 8001a88:	0007883a 	mov	r3,zero
 8001a8c:	00840034 	movhi	r2,4096
 8001a90:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number /data length
 8001a94:	0007883a 	mov	r3,zero
 8001a98:	00840034 	movhi	r2,4096
 8001a9c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//device address
 8001aa0:	00c0a404 	movi	r3,656
 8001aa4:	00840034 	movhi	r2,4096
 8001aa8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041); //data 1
 8001aac:	00c01044 	movi	r3,65
 8001ab0:	00840034 	movhi	r2,4096
 8001ab4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 8001ab8:	00c004c4 	movi	r3,19
 8001abc:	00840034 	movhi	r2,4096
 8001ac0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 8001ac4:	0007883a 	mov	r3,zero
 8001ac8:	00840034 	movhi	r2,4096
 8001acc:	10c00035 	stwio	r3,0(r2)

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001ad0:	01006c04 	movi	r4,432
 8001ad4:	01414004 	movi	r5,1280
 8001ad8:	8000f980 	call	8000f98 <UsbWrite>
}
 8001adc:	e037883a 	mov	sp,fp
 8001ae0:	dfc00117 	ldw	ra,4(sp)
 8001ae4:	df000017 	ldw	fp,0(sp)
 8001ae8:	dec00204 	addi	sp,sp,8
 8001aec:	f800283a 	ret

08001af0 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
 8001af0:	defffe04 	addi	sp,sp,-8
 8001af4:	dfc00115 	stw	ra,4(sp)
 8001af8:	df000015 	stw	fp,0(sp)
 8001afc:	d839883a 	mov	fp,sp
	//the starting address
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 8001b00:	00c14004 	movi	r3,1280
 8001b04:	00840034 	movhi	r2,4096
 8001b08:	10800204 	addi	r2,r2,8
 8001b0c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x050C);
 8001b10:	00c14304 	movi	r3,1292
 8001b14:	00840034 	movhi	r2,4096
 8001b18:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
 8001b1c:	00c00204 	movi	r3,8
 8001b20:	00840034 	movhi	r2,4096
 8001b24:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //port address
 8001b28:	00c0b404 	movi	r3,720
 8001b2c:	00840034 	movhi	r2,4096
 8001b30:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
 8001b34:	00c00044 	movi	r3,1
 8001b38:	00840034 	movhi	r2,4096
 8001b3c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 8001b40:	00c004c4 	movi	r3,19
 8001b44:	00840034 	movhi	r2,4096
 8001b48:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
 8001b4c:	00c14504 	movi	r3,1300
 8001b50:	00840034 	movhi	r2,4096
 8001b54:	10c00035 	stwio	r3,0(r2)

	//td content 4 bytes
	IOWR(CY7C67200_BASE,HPI_DATA,0x0681);//c
 8001b58:	00c1a044 	movi	r3,1665
 8001b5c:	00840034 	movhi	r2,4096
 8001b60:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x2100);//e //HID 0x21
 8001b64:	00c84004 	movi	r3,8448
 8001b68:	00840034 	movhi	r2,4096
 8001b6c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
 8001b70:	0007883a 	mov	r3,zero
 8001b74:	00840034 	movhi	r2,4096
 8001b78:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x007B);//2
 8001b7c:	00c01ec4 	movi	r3,123
 8001b80:	00840034 	movhi	r2,4096
 8001b84:	10c00035 	stwio	r3,0(r2)

	//data phase IN-1
	IOWR(CY7C67200_BASE,HPI_DATA,0x0544); //514
 8001b88:	00c15104 	movi	r3,1348
 8001b8c:	00840034 	movhi	r2,4096
 8001b90:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
 8001b94:	00c00204 	movi	r3,8
 8001b98:	00840034 	movhi	r2,4096
 8001b9c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
 8001ba0:	00c0a404 	movi	r3,656
 8001ba4:	00840034 	movhi	r2,4096
 8001ba8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
 8001bac:	00c01044 	movi	r3,65
 8001bb0:	00840034 	movhi	r2,4096
 8001bb4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
 8001bb8:	00c004c4 	movi	r3,19
 8001bbc:	00840034 	movhi	r2,4096
 8001bc0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
 8001bc4:	00c14804 	movi	r3,1312
 8001bc8:	00840034 	movhi	r2,4096
 8001bcc:	10c00035 	stwio	r3,0(r2)

	//status phase
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //52c
 8001bd0:	0007883a 	mov	r3,zero
 8001bd4:	00840034 	movhi	r2,4096
 8001bd8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//e
 8001bdc:	0007883a 	mov	r3,zero
 8001be0:	00840034 	movhi	r2,4096
 8001be4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//530
 8001be8:	00c08404 	movi	r3,528
 8001bec:	00840034 	movhi	r2,4096
 8001bf0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
 8001bf4:	00c01044 	movi	r3,65
 8001bf8:	00840034 	movhi	r2,4096
 8001bfc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
 8001c00:	00c004c4 	movi	r3,19
 8001c04:	00840034 	movhi	r2,4096
 8001c08:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//6
 8001c0c:	0007883a 	mov	r3,zero
 8001c10:	00840034 	movhi	r2,4096
 8001c14:	10c00035 	stwio	r3,0(r2)

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001c18:	01006c04 	movi	r4,432
 8001c1c:	01414004 	movi	r5,1280
 8001c20:	8000f980 	call	8000f98 <UsbWrite>

}
 8001c24:	e037883a 	mov	sp,fp
 8001c28:	dfc00117 	ldw	ra,4(sp)
 8001c2c:	df000017 	ldw	fp,0(sp)
 8001c30:	dec00204 	addi	sp,sp,8
 8001c34:	f800283a 	ret

08001c38 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
 8001c38:	defffe04 	addi	sp,sp,-8
 8001c3c:	dfc00115 	stw	ra,4(sp)
 8001c40:	df000015 	stw	fp,0(sp)
 8001c44:	d839883a 	mov	fp,sp
	//the starting address
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 8001c48:	00c14004 	movi	r3,1280
 8001c4c:	00840034 	movhi	r2,4096
 8001c50:	10800204 	addi	r2,r2,8
 8001c54:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x050C);
 8001c58:	00c14304 	movi	r3,1292
 8001c5c:	00840034 	movhi	r2,4096
 8001c60:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
 8001c64:	00c00204 	movi	r3,8
 8001c68:	00840034 	movhi	r2,4096
 8001c6c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
 8001c70:	00c0b404 	movi	r3,720
 8001c74:	00840034 	movhi	r2,4096
 8001c78:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
 8001c7c:	00c00044 	movi	r3,1
 8001c80:	00840034 	movhi	r2,4096
 8001c84:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 8001c88:	00c004c4 	movi	r3,19
 8001c8c:	00840034 	movhi	r2,4096
 8001c90:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
 8001c94:	00c14504 	movi	r3,1300
 8001c98:	00840034 	movhi	r2,4096
 8001c9c:	10c00035 	stwio	r3,0(r2)

	//td content 4 bytes
	IOWR(CY7C67200_BASE,HPI_DATA,0x0681);//c
 8001ca0:	00c1a044 	movi	r3,1665
 8001ca4:	00840034 	movhi	r2,4096
 8001ca8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x2200);//e //report 0x22
 8001cac:	00c88004 	movi	r3,8704
 8001cb0:	00840034 	movhi	r2,4096
 8001cb4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
 8001cb8:	0007883a 	mov	r3,zero
 8001cbc:	00840034 	movhi	r2,4096
 8001cc0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x007B);//2
 8001cc4:	00c01ec4 	movi	r3,123
 8001cc8:	00840034 	movhi	r2,4096
 8001ccc:	10c00035 	stwio	r3,0(r2)

	//data phase IN-1
	IOWR(CY7C67200_BASE,HPI_DATA,0x0580); //514
 8001cd0:	00c16004 	movi	r3,1408
 8001cd4:	00840034 	movhi	r2,4096
 8001cd8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
 8001cdc:	00c00204 	movi	r3,8
 8001ce0:	00840034 	movhi	r2,4096
 8001ce4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
 8001ce8:	00c0a404 	movi	r3,656
 8001cec:	00840034 	movhi	r2,4096
 8001cf0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
 8001cf4:	00c01044 	movi	r3,65
 8001cf8:	00840034 	movhi	r2,4096
 8001cfc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
 8001d00:	00c004c4 	movi	r3,19
 8001d04:	00840034 	movhi	r2,4096
 8001d08:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
 8001d0c:	00c14804 	movi	r3,1312
 8001d10:	00840034 	movhi	r2,4096
 8001d14:	10c00035 	stwio	r3,0(r2)

	//data phase IN-2
	IOWR(CY7C67200_BASE,HPI_DATA,0x0588); //520
 8001d18:	00c16204 	movi	r3,1416
 8001d1c:	00840034 	movhi	r2,4096
 8001d20:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
 8001d24:	00c00204 	movi	r3,8
 8001d28:	00840034 	movhi	r2,4096
 8001d2c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
 8001d30:	00c0a404 	movi	r3,656
 8001d34:	00840034 	movhi	r2,4096
 8001d38:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
 8001d3c:	00c00044 	movi	r3,1
 8001d40:	00840034 	movhi	r2,4096
 8001d44:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
 8001d48:	00c004c4 	movi	r3,19
 8001d4c:	00840034 	movhi	r2,4096
 8001d50:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
 8001d54:	00c14b04 	movi	r3,1324
 8001d58:	00840034 	movhi	r2,4096
 8001d5c:	10c00035 	stwio	r3,0(r2)

	//data phase IN-3
	IOWR(CY7C67200_BASE,HPI_DATA,0x0590); //52c
 8001d60:	00c16404 	movi	r3,1424
 8001d64:	00840034 	movhi	r2,4096
 8001d68:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//e
 8001d6c:	00c00204 	movi	r3,8
 8001d70:	00840034 	movhi	r2,4096
 8001d74:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//530
 8001d78:	00c0a404 	movi	r3,656
 8001d7c:	00840034 	movhi	r2,4096
 8001d80:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
 8001d84:	00c01044 	movi	r3,65
 8001d88:	00840034 	movhi	r2,4096
 8001d8c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
 8001d90:	00c004c4 	movi	r3,19
 8001d94:	00840034 	movhi	r2,4096
 8001d98:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0538);//6
 8001d9c:	00c14e04 	movi	r3,1336
 8001da0:	00840034 	movhi	r2,4096
 8001da4:	10c00035 	stwio	r3,0(r2)

	//data phase IN-4
	IOWR(CY7C67200_BASE,HPI_DATA,0x0598); //538
 8001da8:	00c16604 	movi	r3,1432
 8001dac:	00840034 	movhi	r2,4096
 8001db0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//a
 8001db4:	00c00204 	movi	r3,8
 8001db8:	00840034 	movhi	r2,4096
 8001dbc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//c
 8001dc0:	00c0a404 	movi	r3,656
 8001dc4:	00840034 	movhi	r2,4096
 8001dc8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//e //data0
 8001dcc:	00c00044 	movi	r3,1
 8001dd0:	00840034 	movhi	r2,4096
 8001dd4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//540
 8001dd8:	00c004c4 	movi	r3,19
 8001ddc:	00840034 	movhi	r2,4096
 8001de0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0544);//2
 8001de4:	00c15104 	movi	r3,1348
 8001de8:	00840034 	movhi	r2,4096
 8001dec:	10c00035 	stwio	r3,0(r2)

	//data phase IN-5
	IOWR(CY7C67200_BASE,HPI_DATA,0x05a0); //544
 8001df0:	00c16804 	movi	r3,1440
 8001df4:	00840034 	movhi	r2,4096
 8001df8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
 8001dfc:	00c00204 	movi	r3,8
 8001e00:	00840034 	movhi	r2,4096
 8001e04:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
 8001e08:	00c0a404 	movi	r3,656
 8001e0c:	00840034 	movhi	r2,4096
 8001e10:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a //data1
 8001e14:	00c01044 	movi	r3,65
 8001e18:	00840034 	movhi	r2,4096
 8001e1c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
 8001e20:	00c004c4 	movi	r3,19
 8001e24:	00840034 	movhi	r2,4096
 8001e28:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0550);//e
 8001e2c:	00c15404 	movi	r3,1360
 8001e30:	00840034 	movhi	r2,4096
 8001e34:	10c00035 	stwio	r3,0(r2)

	//data phase IN-6
	IOWR(CY7C67200_BASE,HPI_DATA,0x05a8); //550
 8001e38:	00c16a04 	movi	r3,1448
 8001e3c:	00840034 	movhi	r2,4096
 8001e40:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
 8001e44:	00c00204 	movi	r3,8
 8001e48:	00840034 	movhi	r2,4096
 8001e4c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
 8001e50:	00c0a404 	movi	r3,656
 8001e54:	00840034 	movhi	r2,4096
 8001e58:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
 8001e5c:	00c00044 	movi	r3,1
 8001e60:	00840034 	movhi	r2,4096
 8001e64:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
 8001e68:	00c004c4 	movi	r3,19
 8001e6c:	00840034 	movhi	r2,4096
 8001e70:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x055c);//a
 8001e74:	00c15704 	movi	r3,1372
 8001e78:	00840034 	movhi	r2,4096
 8001e7c:	10c00035 	stwio	r3,0(r2)

	//data phase IN-7
	IOWR(CY7C67200_BASE,HPI_DATA,0x05b0); //c
 8001e80:	00c16c04 	movi	r3,1456
 8001e84:	00840034 	movhi	r2,4096
 8001e88:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//e
 8001e8c:	00c00204 	movi	r3,8
 8001e90:	00840034 	movhi	r2,4096
 8001e94:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//560
 8001e98:	00c0a404 	movi	r3,656
 8001e9c:	00840034 	movhi	r2,4096
 8001ea0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2 //data1
 8001ea4:	00c01044 	movi	r3,65
 8001ea8:	00840034 	movhi	r2,4096
 8001eac:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
 8001eb0:	00c004c4 	movi	r3,19
 8001eb4:	00840034 	movhi	r2,4096
 8001eb8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0568);//6
 8001ebc:	00c15a04 	movi	r3,1384
 8001ec0:	00840034 	movhi	r2,4096
 8001ec4:	10c00035 	stwio	r3,0(r2)

	//data phase IN-8
	IOWR(CY7C67200_BASE,HPI_DATA,0x05b8); //8
 8001ec8:	00c16e04 	movi	r3,1464
 8001ecc:	00840034 	movhi	r2,4096
 8001ed0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0003);//a
 8001ed4:	00c000c4 	movi	r3,3
 8001ed8:	00840034 	movhi	r2,4096
 8001edc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//c
 8001ee0:	00c0a404 	movi	r3,656
 8001ee4:	00840034 	movhi	r2,4096
 8001ee8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//e //data0
 8001eec:	00c00044 	movi	r3,1
 8001ef0:	00840034 	movhi	r2,4096
 8001ef4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//570
 8001ef8:	00c004c4 	movi	r3,19
 8001efc:	00840034 	movhi	r2,4096
 8001f00:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0574);//2
 8001f04:	00c15d04 	movi	r3,1396
 8001f08:	00840034 	movhi	r2,4096
 8001f0c:	10c00035 	stwio	r3,0(r2)

	//status phase
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //574
 8001f10:	0007883a 	mov	r3,zero
 8001f14:	00840034 	movhi	r2,4096
 8001f18:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//6
 8001f1c:	0007883a 	mov	r3,zero
 8001f20:	00840034 	movhi	r2,4096
 8001f24:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//8
 8001f28:	00c08404 	movi	r3,528
 8001f2c:	00840034 	movhi	r2,4096
 8001f30:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
 8001f34:	00c01044 	movi	r3,65
 8001f38:	00840034 	movhi	r2,4096
 8001f3c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
 8001f40:	00c004c4 	movi	r3,19
 8001f44:	00840034 	movhi	r2,4096
 8001f48:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//e
 8001f4c:	0007883a 	mov	r3,zero
 8001f50:	00840034 	movhi	r2,4096
 8001f54:	10c00035 	stwio	r3,0(r2)

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001f58:	01006c04 	movi	r4,432
 8001f5c:	01414004 	movi	r5,1280
 8001f60:	8000f980 	call	8000f98 <UsbWrite>

}
 8001f64:	e037883a 	mov	sp,fp
 8001f68:	dfc00117 	ldw	ra,4(sp)
 8001f6c:	df000017 	ldw	fp,0(sp)
 8001f70:	dec00204 	addi	sp,sp,8
 8001f74:	f800283a 	ret

08001f78 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
 8001f78:	defffd04 	addi	sp,sp,-12
 8001f7c:	dfc00215 	stw	ra,8(sp)
 8001f80:	df000115 	stw	fp,4(sp)
 8001f84:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
 8001f88:	01005104 	movi	r4,324
 8001f8c:	8000fe00 	call	8000fe0 <UsbRead>
 8001f90:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
 8001f94:	01005104 	movi	r4,324
 8001f98:	000b883a 	mov	r5,zero
 8001f9c:	8000f980 	call	8000f98 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
 8001fa0:	00000d06 	br	8001fd8 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
 8001fa4:	e0bfff0b 	ldhu	r2,-4(fp)
 8001fa8:	10000526 	beq	r2,zero,8001fc0 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
 8001fac:	e0bfff0b 	ldhu	r2,-4(fp)
 8001fb0:	01020074 	movhi	r4,2049
 8001fb4:	21063e04 	addi	r4,r4,6392
 8001fb8:	100b883a 	mov	r5,r2
 8001fbc:	800212c0 	call	800212c <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
 8001fc0:	01005104 	movi	r4,324
 8001fc4:	8000fe00 	call	8000fe0 <UsbRead>
 8001fc8:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
 8001fcc:	01005104 	movi	r4,324
 8001fd0:	000b883a 	mov	r5,zero
 8001fd4:	8000f980 	call	8000f98 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
 8001fd8:	e0bfff0b 	ldhu	r2,-4(fp)
 8001fdc:	10840018 	cmpnei	r2,r2,4096
 8001fe0:	103ff01e 	bne	r2,zero,8001fa4 <__alt_data_end+0xf8001fa4>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
 8001fe4:	e0bfff0b 	ldhu	r2,-4(fp)
}
 8001fe8:	e037883a 	mov	sp,fp
 8001fec:	dfc00117 	ldw	ra,4(sp)
 8001ff0:	df000017 	ldw	fp,0(sp)
 8001ff4:	dec00204 	addi	sp,sp,8
 8001ff8:	f800283a 	ret

08001ffc <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
 8001ffc:	defffd04 	addi	sp,sp,-12
 8002000:	dfc00215 	stw	ra,8(sp)
 8002004:	df000115 	stw	fp,4(sp)
 8002008:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IORD(CY7C67200_BASE,HPI_STATUS);
 800200c:	00840034 	movhi	r2,4096
 8002010:	10800304 	addi	r2,r2,12
 8002014:	10800037 	ldwio	r2,0(r2)
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
 8002018:	01005104 	movi	r4,324
 800201c:	8000fe00 	call	8000fe0 <UsbRead>
 8002020:	10bfffcc 	andi	r2,r2,65535
 8002024:	10840018 	cmpnei	r2,r2,4096
 8002028:	1000091e 	bne	r2,zero,8002050 <UsbGetRetryCnt+0x54>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
 800202c:	01005104 	movi	r4,324
 8002030:	000b883a 	mov	r5,zero
 8002034:	8000f980 	call	8000f98 <UsbWrite>

		while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8002038:	0001883a 	nop
 800203c:	00840034 	movhi	r2,4096
 8002040:	10800304 	addi	r2,r2,12
 8002044:	10800037 	ldwio	r2,0(r2)
 8002048:	1080040c 	andi	r2,r2,16
 800204c:	103ffb26 	beq	r2,zero,800203c <__alt_data_end+0xf800203c>
		{
		}
	}
	//usleep(1000);
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
 8002050:	00c14204 	movi	r3,1288
 8002054:	00840034 	movhi	r2,4096
 8002058:	10800204 	addi	r2,r2,8
 800205c:	10c00035 	stwio	r3,0(r2)
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
 8002060:	00840034 	movhi	r2,4096
 8002064:	10800037 	ldwio	r2,0(r2)
 8002068:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
 800206c:	e0bfff0b 	ldhu	r2,-4(fp)
}
 8002070:	e037883a 	mov	sp,fp
 8002074:	dfc00117 	ldw	ra,4(sp)
 8002078:	df000017 	ldw	fp,0(sp)
 800207c:	dec00204 	addi	sp,sp,8
 8002080:	f800283a 	ret

08002084 <UsbPrintMem>:


void UsbPrintMem()
{
 8002084:	defffc04 	addi	sp,sp,-16
 8002088:	dfc00315 	stw	ra,12(sp)
 800208c:	df000215 	stw	fp,8(sp)
 8002090:	df000204 	addi	fp,sp,8
	int i, code;
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 8002094:	00c14004 	movi	r3,1280
 8002098:	00840034 	movhi	r2,4096
 800209c:	10800204 	addi	r2,r2,8
 80020a0:	10c00035 	stwio	r3,0(r2)
	for (i = 0; i <= 200; i += 2)
 80020a4:	e03ffe15 	stw	zero,-8(fp)
 80020a8:	00000d06 	br	80020e0 <UsbPrintMem+0x5c>
	{
		code = IORD(CY7C67200_BASE,HPI_DATA);
 80020ac:	00840034 	movhi	r2,4096
 80020b0:	10800037 	ldwio	r2,0(r2)
 80020b4:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
 80020b8:	e0bffe17 	ldw	r2,-8(fp)
 80020bc:	10814004 	addi	r2,r2,1280
 80020c0:	01020074 	movhi	r4,2049
 80020c4:	21064604 	addi	r4,r4,6424
 80020c8:	100b883a 	mov	r5,r2
 80020cc:	e1bfff17 	ldw	r6,-4(fp)
 80020d0:	800212c0 	call	800212c <printf>

void UsbPrintMem()
{
	int i, code;
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
 80020d4:	e0bffe17 	ldw	r2,-8(fp)
 80020d8:	10800084 	addi	r2,r2,2
 80020dc:	e0bffe15 	stw	r2,-8(fp)
 80020e0:	e0bffe17 	ldw	r2,-8(fp)
 80020e4:	10803250 	cmplti	r2,r2,201
 80020e8:	103ff01e 	bne	r2,zero,80020ac <__alt_data_end+0xf80020ac>
	{
		code = IORD(CY7C67200_BASE,HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
 80020ec:	e037883a 	mov	sp,fp
 80020f0:	dfc00117 	ldw	ra,4(sp)
 80020f4:	df000017 	ldw	fp,0(sp)
 80020f8:	dec00204 	addi	sp,sp,8
 80020fc:	f800283a 	ret

08002100 <_printf_r>:
 8002100:	defffd04 	addi	sp,sp,-12
 8002104:	dfc00015 	stw	ra,0(sp)
 8002108:	d9800115 	stw	r6,4(sp)
 800210c:	d9c00215 	stw	r7,8(sp)
 8002110:	280d883a 	mov	r6,r5
 8002114:	21400217 	ldw	r5,8(r4)
 8002118:	d9c00104 	addi	r7,sp,4
 800211c:	80022c00 	call	80022c0 <___vfprintf_internal_r>
 8002120:	dfc00017 	ldw	ra,0(sp)
 8002124:	dec00304 	addi	sp,sp,12
 8002128:	f800283a 	ret

0800212c <printf>:
 800212c:	defffc04 	addi	sp,sp,-16
 8002130:	dfc00015 	stw	ra,0(sp)
 8002134:	d9400115 	stw	r5,4(sp)
 8002138:	d9800215 	stw	r6,8(sp)
 800213c:	d9c00315 	stw	r7,12(sp)
 8002140:	00820074 	movhi	r2,2049
 8002144:	108db504 	addi	r2,r2,14036
 8002148:	10800017 	ldw	r2,0(r2)
 800214c:	200b883a 	mov	r5,r4
 8002150:	d9800104 	addi	r6,sp,4
 8002154:	11000217 	ldw	r4,8(r2)
 8002158:	80044140 	call	8004414 <__vfprintf_internal>
 800215c:	dfc00017 	ldw	ra,0(sp)
 8002160:	dec00404 	addi	sp,sp,16
 8002164:	f800283a 	ret

08002168 <_puts_r>:
 8002168:	defff604 	addi	sp,sp,-40
 800216c:	dc400815 	stw	r17,32(sp)
 8002170:	2023883a 	mov	r17,r4
 8002174:	2809883a 	mov	r4,r5
 8002178:	dc000715 	stw	r16,28(sp)
 800217c:	dfc00915 	stw	ra,36(sp)
 8002180:	2821883a 	mov	r16,r5
 8002184:	80022340 	call	8002234 <strlen>
 8002188:	00c20074 	movhi	r3,2049
 800218c:	18cdb504 	addi	r3,r3,14036
 8002190:	18c00017 	ldw	r3,0(r3)
 8002194:	11000044 	addi	r4,r2,1
 8002198:	d8800115 	stw	r2,4(sp)
 800219c:	18c00217 	ldw	r3,8(r3)
 80021a0:	00820074 	movhi	r2,2049
 80021a4:	10864b04 	addi	r2,r2,6444
 80021a8:	d8800215 	stw	r2,8(sp)
 80021ac:	1940030b 	ldhu	r5,12(r3)
 80021b0:	00800044 	movi	r2,1
 80021b4:	d8800315 	stw	r2,12(sp)
 80021b8:	00800084 	movi	r2,2
 80021bc:	d8800515 	stw	r2,20(sp)
 80021c0:	dc000015 	stw	r16,0(sp)
 80021c4:	d9000615 	stw	r4,24(sp)
 80021c8:	dec00415 	stw	sp,16(sp)
 80021cc:	2888000c 	andi	r2,r5,8192
 80021d0:	1000061e 	bne	r2,zero,80021ec <_puts_r+0x84>
 80021d4:	19001917 	ldw	r4,100(r3)
 80021d8:	00b7ffc4 	movi	r2,-8193
 80021dc:	29480014 	ori	r5,r5,8192
 80021e0:	2084703a 	and	r2,r4,r2
 80021e4:	1940030d 	sth	r5,12(r3)
 80021e8:	18801915 	stw	r2,100(r3)
 80021ec:	89400217 	ldw	r5,8(r17)
 80021f0:	8809883a 	mov	r4,r17
 80021f4:	d9800404 	addi	r6,sp,16
 80021f8:	80067f80 	call	80067f8 <__sfvwrite_r>
 80021fc:	1000061e 	bne	r2,zero,8002218 <_puts_r+0xb0>
 8002200:	00800284 	movi	r2,10
 8002204:	dfc00917 	ldw	ra,36(sp)
 8002208:	dc400817 	ldw	r17,32(sp)
 800220c:	dc000717 	ldw	r16,28(sp)
 8002210:	dec00a04 	addi	sp,sp,40
 8002214:	f800283a 	ret
 8002218:	00bfffc4 	movi	r2,-1
 800221c:	003ff906 	br	8002204 <__alt_data_end+0xf8002204>

08002220 <puts>:
 8002220:	00820074 	movhi	r2,2049
 8002224:	108db504 	addi	r2,r2,14036
 8002228:	200b883a 	mov	r5,r4
 800222c:	11000017 	ldw	r4,0(r2)
 8002230:	80021681 	jmpi	8002168 <_puts_r>

08002234 <strlen>:
 8002234:	208000cc 	andi	r2,r4,3
 8002238:	10001d26 	beq	r2,zero,80022b0 <strlen+0x7c>
 800223c:	20800007 	ldb	r2,0(r4)
 8002240:	10001d26 	beq	r2,zero,80022b8 <strlen+0x84>
 8002244:	2005883a 	mov	r2,r4
 8002248:	00000206 	br	8002254 <strlen+0x20>
 800224c:	10c00007 	ldb	r3,0(r2)
 8002250:	18001526 	beq	r3,zero,80022a8 <strlen+0x74>
 8002254:	10800044 	addi	r2,r2,1
 8002258:	10c000cc 	andi	r3,r2,3
 800225c:	183ffb1e 	bne	r3,zero,800224c <__alt_data_end+0xf800224c>
 8002260:	10c00017 	ldw	r3,0(r2)
 8002264:	01ffbff4 	movhi	r7,65279
 8002268:	39ffbfc4 	addi	r7,r7,-257
 800226c:	01a02074 	movhi	r6,32897
 8002270:	31a02004 	addi	r6,r6,-32640
 8002274:	00000206 	br	8002280 <strlen+0x4c>
 8002278:	10800104 	addi	r2,r2,4
 800227c:	10c00017 	ldw	r3,0(r2)
 8002280:	19cb883a 	add	r5,r3,r7
 8002284:	00c6303a 	nor	r3,zero,r3
 8002288:	28c6703a 	and	r3,r5,r3
 800228c:	1986703a 	and	r3,r3,r6
 8002290:	183ff926 	beq	r3,zero,8002278 <__alt_data_end+0xf8002278>
 8002294:	10c00007 	ldb	r3,0(r2)
 8002298:	18000326 	beq	r3,zero,80022a8 <strlen+0x74>
 800229c:	10800044 	addi	r2,r2,1
 80022a0:	10c00007 	ldb	r3,0(r2)
 80022a4:	183ffd1e 	bne	r3,zero,800229c <__alt_data_end+0xf800229c>
 80022a8:	1105c83a 	sub	r2,r2,r4
 80022ac:	f800283a 	ret
 80022b0:	2005883a 	mov	r2,r4
 80022b4:	003fea06 	br	8002260 <__alt_data_end+0xf8002260>
 80022b8:	0005883a 	mov	r2,zero
 80022bc:	f800283a 	ret

080022c0 <___vfprintf_internal_r>:
 80022c0:	defeb604 	addi	sp,sp,-1320
 80022c4:	dfc14915 	stw	ra,1316(sp)
 80022c8:	dcc14315 	stw	r19,1292(sp)
 80022cc:	dc414115 	stw	r17,1284(sp)
 80022d0:	d9012c15 	stw	r4,1200(sp)
 80022d4:	2827883a 	mov	r19,r5
 80022d8:	3023883a 	mov	r17,r6
 80022dc:	d9c12f15 	stw	r7,1212(sp)
 80022e0:	df014815 	stw	fp,1312(sp)
 80022e4:	ddc14715 	stw	r23,1308(sp)
 80022e8:	dd814615 	stw	r22,1304(sp)
 80022ec:	dd414515 	stw	r21,1300(sp)
 80022f0:	dd014415 	stw	r20,1296(sp)
 80022f4:	dc814215 	stw	r18,1288(sp)
 80022f8:	dc014015 	stw	r16,1280(sp)
 80022fc:	8006ea40 	call	8006ea4 <_localeconv_r>
 8002300:	10800017 	ldw	r2,0(r2)
 8002304:	1009883a 	mov	r4,r2
 8002308:	d8813415 	stw	r2,1232(sp)
 800230c:	80022340 	call	8002234 <strlen>
 8002310:	d8813815 	stw	r2,1248(sp)
 8002314:	d8812c17 	ldw	r2,1200(sp)
 8002318:	10000226 	beq	r2,zero,8002324 <___vfprintf_internal_r+0x64>
 800231c:	10800e17 	ldw	r2,56(r2)
 8002320:	10010826 	beq	r2,zero,8002744 <___vfprintf_internal_r+0x484>
 8002324:	9880030b 	ldhu	r2,12(r19)
 8002328:	1108000c 	andi	r4,r2,8192
 800232c:	1007883a 	mov	r3,r2
 8002330:	2000071e 	bne	r4,zero,8002350 <___vfprintf_internal_r+0x90>
 8002334:	99001917 	ldw	r4,100(r19)
 8002338:	10c80014 	ori	r3,r2,8192
 800233c:	00b7ffc4 	movi	r2,-8193
 8002340:	2088703a 	and	r4,r4,r2
 8002344:	98c0030d 	sth	r3,12(r19)
 8002348:	1805883a 	mov	r2,r3
 800234c:	99001915 	stw	r4,100(r19)
 8002350:	1900020c 	andi	r4,r3,8
 8002354:	2000ab26 	beq	r4,zero,8002604 <___vfprintf_internal_r+0x344>
 8002358:	99000417 	ldw	r4,16(r19)
 800235c:	2000a926 	beq	r4,zero,8002604 <___vfprintf_internal_r+0x344>
 8002360:	18c0068c 	andi	r3,r3,26
 8002364:	01000284 	movi	r4,10
 8002368:	1900af26 	beq	r3,r4,8002628 <___vfprintf_internal_r+0x368>
 800236c:	d9010dc4 	addi	r4,sp,1079
 8002370:	d9410e04 	addi	r5,sp,1080
 8002374:	d8800404 	addi	r2,sp,16
 8002378:	2907c83a 	sub	r3,r5,r4
 800237c:	d9012815 	stw	r4,1184(sp)
 8002380:	d9412915 	stw	r5,1188(sp)
 8002384:	d8811e15 	stw	r2,1144(sp)
 8002388:	d8012015 	stw	zero,1152(sp)
 800238c:	d8011f15 	stw	zero,1148(sp)
 8002390:	d8013515 	stw	zero,1236(sp)
 8002394:	d8013715 	stw	zero,1244(sp)
 8002398:	d8013915 	stw	zero,1252(sp)
 800239c:	d8013b15 	stw	zero,1260(sp)
 80023a0:	d8013a15 	stw	zero,1256(sp)
 80023a4:	d8013115 	stw	zero,1220(sp)
 80023a8:	1011883a 	mov	r8,r2
 80023ac:	05c20074 	movhi	r23,2049
 80023b0:	bdc65c84 	addi	r23,r23,6514
 80023b4:	d8c13d15 	stw	r3,1268(sp)
 80023b8:	88800007 	ldb	r2,0(r17)
 80023bc:	10021126 	beq	r2,zero,8002c04 <___vfprintf_internal_r+0x944>
 80023c0:	00c00944 	movi	r3,37
 80023c4:	8821883a 	mov	r16,r17
 80023c8:	10c0021e 	bne	r2,r3,80023d4 <___vfprintf_internal_r+0x114>
 80023cc:	00001406 	br	8002420 <___vfprintf_internal_r+0x160>
 80023d0:	10c00326 	beq	r2,r3,80023e0 <___vfprintf_internal_r+0x120>
 80023d4:	84000044 	addi	r16,r16,1
 80023d8:	80800007 	ldb	r2,0(r16)
 80023dc:	103ffc1e 	bne	r2,zero,80023d0 <__alt_data_end+0xf80023d0>
 80023e0:	8465c83a 	sub	r18,r16,r17
 80023e4:	90000e26 	beq	r18,zero,8002420 <___vfprintf_internal_r+0x160>
 80023e8:	d8c12017 	ldw	r3,1152(sp)
 80023ec:	d8811f17 	ldw	r2,1148(sp)
 80023f0:	44400015 	stw	r17,0(r8)
 80023f4:	1c87883a 	add	r3,r3,r18
 80023f8:	10800044 	addi	r2,r2,1
 80023fc:	d8c12015 	stw	r3,1152(sp)
 8002400:	44800115 	stw	r18,4(r8)
 8002404:	d8811f15 	stw	r2,1148(sp)
 8002408:	00c001c4 	movi	r3,7
 800240c:	1880bb16 	blt	r3,r2,80026fc <___vfprintf_internal_r+0x43c>
 8002410:	42000204 	addi	r8,r8,8
 8002414:	d9013117 	ldw	r4,1220(sp)
 8002418:	2489883a 	add	r4,r4,r18
 800241c:	d9013115 	stw	r4,1220(sp)
 8002420:	80800007 	ldb	r2,0(r16)
 8002424:	1000bc26 	beq	r2,zero,8002718 <___vfprintf_internal_r+0x458>
 8002428:	053fffc4 	movi	r20,-1
 800242c:	84400044 	addi	r17,r16,1
 8002430:	84800047 	ldb	r18,1(r16)
 8002434:	d8012785 	stb	zero,1182(sp)
 8002438:	002d883a 	mov	r22,zero
 800243c:	d8013015 	stw	zero,1216(sp)
 8002440:	d8012a15 	stw	zero,1192(sp)
 8002444:	04001604 	movi	r16,88
 8002448:	05400244 	movi	r21,9
 800244c:	4039883a 	mov	fp,r8
 8002450:	a007883a 	mov	r3,r20
 8002454:	8c400044 	addi	r17,r17,1
 8002458:	90bff804 	addi	r2,r18,-32
 800245c:	80832036 	bltu	r16,r2,80030e0 <___vfprintf_internal_r+0xe20>
 8002460:	1085883a 	add	r2,r2,r2
 8002464:	1085883a 	add	r2,r2,r2
 8002468:	01420034 	movhi	r5,2048
 800246c:	29491f04 	addi	r5,r5,9340
 8002470:	1145883a 	add	r2,r2,r5
 8002474:	10800017 	ldw	r2,0(r2)
 8002478:	1000683a 	jmp	r2
 800247c:	08002e80 	call	8002e8 <__reset-0x77ffd18>
 8002480:	080030e0 	cmpeqi	zero,at,195
 8002484:	080030e0 	cmpeqi	zero,at,195
 8002488:	08002e9c 	xori	zero,at,186
 800248c:	080030e0 	cmpeqi	zero,at,195
 8002490:	080030e0 	cmpeqi	zero,at,195
 8002494:	080030e0 	cmpeqi	zero,at,195
 8002498:	080030e0 	cmpeqi	zero,at,195
 800249c:	080030e0 	cmpeqi	zero,at,195
 80024a0:	080030e0 	cmpeqi	zero,at,195
 80024a4:	08002eb0 	cmpltui	zero,at,186
 80024a8:	08002750 	cmplti	zero,at,157
 80024ac:	080030e0 	cmpeqi	zero,at,195
 80024b0:	080025f0 	cmpltui	zero,at,151
 80024b4:	0800275c 	xori	zero,at,157
 80024b8:	080030e0 	cmpeqi	zero,at,195
 80024bc:	080027ac 	andhi	zero,at,158
 80024c0:	08002cbc 	xorhi	zero,at,178
 80024c4:	08002cbc 	xorhi	zero,at,178
 80024c8:	08002cbc 	xorhi	zero,at,178
 80024cc:	08002cbc 	xorhi	zero,at,178
 80024d0:	08002cbc 	xorhi	zero,at,178
 80024d4:	08002cbc 	xorhi	zero,at,178
 80024d8:	08002cbc 	xorhi	zero,at,178
 80024dc:	08002cbc 	xorhi	zero,at,178
 80024e0:	08002cbc 	xorhi	zero,at,178
 80024e4:	080030e0 	cmpeqi	zero,at,195
 80024e8:	080030e0 	cmpeqi	zero,at,195
 80024ec:	080030e0 	cmpeqi	zero,at,195
 80024f0:	080030e0 	cmpeqi	zero,at,195
 80024f4:	080030e0 	cmpeqi	zero,at,195
 80024f8:	080030e0 	cmpeqi	zero,at,195
 80024fc:	080030e0 	cmpeqi	zero,at,195
 8002500:	080030e0 	cmpeqi	zero,at,195
 8002504:	080030e0 	cmpeqi	zero,at,195
 8002508:	080030e0 	cmpeqi	zero,at,195
 800250c:	080027c0 	call	80027c <__reset-0x77ffd84>
 8002510:	08002c0c 	andi	zero,at,176
 8002514:	080030e0 	cmpeqi	zero,at,195
 8002518:	08002c0c 	andi	zero,at,176
 800251c:	080030e0 	cmpeqi	zero,at,195
 8002520:	080030e0 	cmpeqi	zero,at,195
 8002524:	080030e0 	cmpeqi	zero,at,195
 8002528:	080030e0 	cmpeqi	zero,at,195
 800252c:	08002d04 	addi	zero,at,180
 8002530:	080030e0 	cmpeqi	zero,at,195
 8002534:	080030e0 	cmpeqi	zero,at,195
 8002538:	08002d18 	cmpnei	zero,at,180
 800253c:	080030e0 	cmpeqi	zero,at,195
 8002540:	080030e0 	cmpeqi	zero,at,195
 8002544:	080030e0 	cmpeqi	zero,at,195
 8002548:	080030e0 	cmpeqi	zero,at,195
 800254c:	080030e0 	cmpeqi	zero,at,195
 8002550:	08002d60 	cmpeqi	zero,at,181
 8002554:	080030e0 	cmpeqi	zero,at,195
 8002558:	080030e0 	cmpeqi	zero,at,195
 800255c:	08002ed4 	ori	zero,at,187
 8002560:	080030e0 	cmpeqi	zero,at,195
 8002564:	080030e0 	cmpeqi	zero,at,195
 8002568:	080030e0 	cmpeqi	zero,at,195
 800256c:	080030e0 	cmpeqi	zero,at,195
 8002570:	080030e0 	cmpeqi	zero,at,195
 8002574:	080030e0 	cmpeqi	zero,at,195
 8002578:	080030e0 	cmpeqi	zero,at,195
 800257c:	080030e0 	cmpeqi	zero,at,195
 8002580:	080030e0 	cmpeqi	zero,at,195
 8002584:	080030e0 	cmpeqi	zero,at,195
 8002588:	08002dd8 	cmpnei	zero,at,183
 800258c:	08002f50 	cmplti	zero,at,189
 8002590:	08002c0c 	andi	zero,at,176
 8002594:	08002c0c 	andi	zero,at,176
 8002598:	08002c0c 	andi	zero,at,176
 800259c:	08002f1c 	xori	zero,at,188
 80025a0:	08002f50 	cmplti	zero,at,189
 80025a4:	080030e0 	cmpeqi	zero,at,195
 80025a8:	080030e0 	cmpeqi	zero,at,195
 80025ac:	08002f30 	cmpltui	zero,at,188
 80025b0:	080030e0 	cmpeqi	zero,at,195
 80025b4:	08002da0 	cmpeqi	zero,at,182
 80025b8:	08003060 	cmpeqi	zero,at,193
 80025bc:	0800300c 	andi	zero,at,192
 80025c0:	08002f90 	cmplti	zero,at,190
 80025c4:	080030e0 	cmpeqi	zero,at,195
 80025c8:	08002fa4 	muli	zero,at,190
 80025cc:	080030e0 	cmpeqi	zero,at,195
 80025d0:	080030a0 	cmpeqi	zero,at,194
 80025d4:	080030e0 	cmpeqi	zero,at,195
 80025d8:	080030e0 	cmpeqi	zero,at,195
 80025dc:	08002e18 	cmpnei	zero,at,184
 80025e0:	d9413017 	ldw	r5,1216(sp)
 80025e4:	d8812f15 	stw	r2,1212(sp)
 80025e8:	014bc83a 	sub	r5,zero,r5
 80025ec:	d9413015 	stw	r5,1216(sp)
 80025f0:	d8812a17 	ldw	r2,1192(sp)
 80025f4:	10800114 	ori	r2,r2,4
 80025f8:	d8812a15 	stw	r2,1192(sp)
 80025fc:	8c800007 	ldb	r18,0(r17)
 8002600:	003f9406 	br	8002454 <__alt_data_end+0xf8002454>
 8002604:	d9012c17 	ldw	r4,1200(sp)
 8002608:	980b883a 	mov	r5,r19
 800260c:	80044380 	call	8004438 <__swsetup_r>
 8002610:	10002d1e 	bne	r2,zero,80026c8 <___vfprintf_internal_r+0x408>
 8002614:	9880030b 	ldhu	r2,12(r19)
 8002618:	01000284 	movi	r4,10
 800261c:	1007883a 	mov	r3,r2
 8002620:	18c0068c 	andi	r3,r3,26
 8002624:	193f511e 	bne	r3,r4,800236c <__alt_data_end+0xf800236c>
 8002628:	98c0038b 	ldhu	r3,14(r19)
 800262c:	193fffcc 	andi	r4,r3,65535
 8002630:	2120001c 	xori	r4,r4,32768
 8002634:	21200004 	addi	r4,r4,-32768
 8002638:	203f4c16 	blt	r4,zero,800236c <__alt_data_end+0xf800236c>
 800263c:	9ac01917 	ldw	r11,100(r19)
 8002640:	9a800717 	ldw	r10,28(r19)
 8002644:	9a400917 	ldw	r9,36(r19)
 8002648:	d9012c17 	ldw	r4,1200(sp)
 800264c:	d9c12f17 	ldw	r7,1212(sp)
 8002650:	02010004 	movi	r8,1024
 8002654:	10bfff4c 	andi	r2,r2,65533
 8002658:	d8c1078d 	sth	r3,1054(sp)
 800265c:	d9410404 	addi	r5,sp,1040
 8002660:	d8c00404 	addi	r3,sp,16
 8002664:	880d883a 	mov	r6,r17
 8002668:	d881070d 	sth	r2,1052(sp)
 800266c:	dac11d15 	stw	r11,1140(sp)
 8002670:	da810b15 	stw	r10,1068(sp)
 8002674:	da410d15 	stw	r9,1076(sp)
 8002678:	d8c10415 	stw	r3,1040(sp)
 800267c:	d8c10815 	stw	r3,1056(sp)
 8002680:	da010615 	stw	r8,1048(sp)
 8002684:	da010915 	stw	r8,1060(sp)
 8002688:	d8010a15 	stw	zero,1064(sp)
 800268c:	80022c00 	call	80022c0 <___vfprintf_internal_r>
 8002690:	1021883a 	mov	r16,r2
 8002694:	10000416 	blt	r2,zero,80026a8 <___vfprintf_internal_r+0x3e8>
 8002698:	d9012c17 	ldw	r4,1200(sp)
 800269c:	d9410404 	addi	r5,sp,1040
 80026a0:	8005dd40 	call	8005dd4 <_fflush_r>
 80026a4:	10072a1e 	bne	r2,zero,8004350 <___vfprintf_internal_r+0x2090>
 80026a8:	d881070b 	ldhu	r2,1052(sp)
 80026ac:	1080100c 	andi	r2,r2,64
 80026b0:	10000326 	beq	r2,zero,80026c0 <___vfprintf_internal_r+0x400>
 80026b4:	9880030b 	ldhu	r2,12(r19)
 80026b8:	10801014 	ori	r2,r2,64
 80026bc:	9880030d 	sth	r2,12(r19)
 80026c0:	8005883a 	mov	r2,r16
 80026c4:	00000106 	br	80026cc <___vfprintf_internal_r+0x40c>
 80026c8:	00bfffc4 	movi	r2,-1
 80026cc:	dfc14917 	ldw	ra,1316(sp)
 80026d0:	df014817 	ldw	fp,1312(sp)
 80026d4:	ddc14717 	ldw	r23,1308(sp)
 80026d8:	dd814617 	ldw	r22,1304(sp)
 80026dc:	dd414517 	ldw	r21,1300(sp)
 80026e0:	dd014417 	ldw	r20,1296(sp)
 80026e4:	dcc14317 	ldw	r19,1292(sp)
 80026e8:	dc814217 	ldw	r18,1288(sp)
 80026ec:	dc414117 	ldw	r17,1284(sp)
 80026f0:	dc014017 	ldw	r16,1280(sp)
 80026f4:	dec14a04 	addi	sp,sp,1320
 80026f8:	f800283a 	ret
 80026fc:	d9012c17 	ldw	r4,1200(sp)
 8002700:	980b883a 	mov	r5,r19
 8002704:	d9811e04 	addi	r6,sp,1144
 8002708:	80095c80 	call	80095c8 <__sprint_r>
 800270c:	1000081e 	bne	r2,zero,8002730 <___vfprintf_internal_r+0x470>
 8002710:	da000404 	addi	r8,sp,16
 8002714:	003f3f06 	br	8002414 <__alt_data_end+0xf8002414>
 8002718:	d8812017 	ldw	r2,1152(sp)
 800271c:	10000426 	beq	r2,zero,8002730 <___vfprintf_internal_r+0x470>
 8002720:	d9012c17 	ldw	r4,1200(sp)
 8002724:	980b883a 	mov	r5,r19
 8002728:	d9811e04 	addi	r6,sp,1144
 800272c:	80095c80 	call	80095c8 <__sprint_r>
 8002730:	9880030b 	ldhu	r2,12(r19)
 8002734:	1080100c 	andi	r2,r2,64
 8002738:	103fe31e 	bne	r2,zero,80026c8 <__alt_data_end+0xf80026c8>
 800273c:	d8813117 	ldw	r2,1220(sp)
 8002740:	003fe206 	br	80026cc <__alt_data_end+0xf80026cc>
 8002744:	d9012c17 	ldw	r4,1200(sp)
 8002748:	80060f40 	call	80060f4 <__sinit>
 800274c:	003ef506 	br	8002324 <__alt_data_end+0xf8002324>
 8002750:	05800ac4 	movi	r22,43
 8002754:	8c800007 	ldb	r18,0(r17)
 8002758:	003f3e06 	br	8002454 <__alt_data_end+0xf8002454>
 800275c:	8c800007 	ldb	r18,0(r17)
 8002760:	00c00a84 	movi	r3,42
 8002764:	88800044 	addi	r2,r17,1
 8002768:	90c6fb26 	beq	r18,r3,8004358 <___vfprintf_internal_r+0x2098>
 800276c:	953ff404 	addi	r20,r18,-48
 8002770:	1023883a 	mov	r17,r2
 8002774:	0007883a 	mov	r3,zero
 8002778:	ad3f3736 	bltu	r21,r20,8002458 <__alt_data_end+0xf8002458>
 800277c:	0009883a 	mov	r4,zero
 8002780:	01400284 	movi	r5,10
 8002784:	800c2080 	call	800c208 <__mulsi3>
 8002788:	8c800007 	ldb	r18,0(r17)
 800278c:	a089883a 	add	r4,r20,r2
 8002790:	8c400044 	addi	r17,r17,1
 8002794:	953ff404 	addi	r20,r18,-48
 8002798:	ad3ff92e 	bgeu	r21,r20,8002780 <__alt_data_end+0xf8002780>
 800279c:	2007883a 	mov	r3,r4
 80027a0:	203f2d0e 	bge	r4,zero,8002458 <__alt_data_end+0xf8002458>
 80027a4:	00ffffc4 	movi	r3,-1
 80027a8:	003f2b06 	br	8002458 <__alt_data_end+0xf8002458>
 80027ac:	d9412a17 	ldw	r5,1192(sp)
 80027b0:	29402014 	ori	r5,r5,128
 80027b4:	d9412a15 	stw	r5,1192(sp)
 80027b8:	8c800007 	ldb	r18,0(r17)
 80027bc:	003f2506 	br	8002454 <__alt_data_end+0xf8002454>
 80027c0:	d9412a17 	ldw	r5,1192(sp)
 80027c4:	1829883a 	mov	r20,r3
 80027c8:	dd812785 	stb	r22,1182(sp)
 80027cc:	29400414 	ori	r5,r5,16
 80027d0:	d9412a15 	stw	r5,1192(sp)
 80027d4:	d8c12a17 	ldw	r3,1192(sp)
 80027d8:	e011883a 	mov	r8,fp
 80027dc:	1880080c 	andi	r2,r3,32
 80027e0:	1001e126 	beq	r2,zero,8002f68 <___vfprintf_internal_r+0xca8>
 80027e4:	d9012f17 	ldw	r4,1212(sp)
 80027e8:	20800117 	ldw	r2,4(r4)
 80027ec:	25400017 	ldw	r21,0(r4)
 80027f0:	21000204 	addi	r4,r4,8
 80027f4:	d9012f15 	stw	r4,1212(sp)
 80027f8:	102d883a 	mov	r22,r2
 80027fc:	10046916 	blt	r2,zero,80039a4 <___vfprintf_internal_r+0x16e4>
 8002800:	df012783 	ldbu	fp,1182(sp)
 8002804:	00c00044 	movi	r3,1
 8002808:	ad84b03a 	or	r2,r21,r22
 800280c:	a0000416 	blt	r20,zero,8002820 <___vfprintf_internal_r+0x560>
 8002810:	d9412a17 	ldw	r5,1192(sp)
 8002814:	013fdfc4 	movi	r4,-129
 8002818:	290a703a 	and	r5,r5,r4
 800281c:	d9412a15 	stw	r5,1192(sp)
 8002820:	1002491e 	bne	r2,zero,8003148 <___vfprintf_internal_r+0xe88>
 8002824:	a002481e 	bne	r20,zero,8003148 <___vfprintf_internal_r+0xe88>
 8002828:	18c03fcc 	andi	r3,r3,255
 800282c:	1803871e 	bne	r3,zero,800364c <___vfprintf_internal_r+0x138c>
 8002830:	d9012a17 	ldw	r4,1192(sp)
 8002834:	2080004c 	andi	r2,r4,1
 8002838:	10038426 	beq	r2,zero,800364c <___vfprintf_internal_r+0x138c>
 800283c:	d9413d17 	ldw	r5,1268(sp)
 8002840:	00800c04 	movi	r2,48
 8002844:	d8810dc5 	stb	r2,1079(sp)
 8002848:	d9412e15 	stw	r5,1208(sp)
 800284c:	dc010dc4 	addi	r16,sp,1079
 8002850:	d8812e17 	ldw	r2,1208(sp)
 8002854:	1500010e 	bge	r2,r20,800285c <___vfprintf_internal_r+0x59c>
 8002858:	a005883a 	mov	r2,r20
 800285c:	d8812b15 	stw	r2,1196(sp)
 8002860:	d8013315 	stw	zero,1228(sp)
 8002864:	e0803fcc 	andi	r2,fp,255
 8002868:	1080201c 	xori	r2,r2,128
 800286c:	10bfe004 	addi	r2,r2,-128
 8002870:	10000326 	beq	r2,zero,8002880 <___vfprintf_internal_r+0x5c0>
 8002874:	d8c12b17 	ldw	r3,1196(sp)
 8002878:	18c00044 	addi	r3,r3,1
 800287c:	d8c12b15 	stw	r3,1196(sp)
 8002880:	d8c12a17 	ldw	r3,1192(sp)
 8002884:	18c0008c 	andi	r3,r3,2
 8002888:	d8c12d15 	stw	r3,1204(sp)
 800288c:	18000326 	beq	r3,zero,800289c <___vfprintf_internal_r+0x5dc>
 8002890:	d8c12b17 	ldw	r3,1196(sp)
 8002894:	18c00084 	addi	r3,r3,2
 8002898:	d8c12b15 	stw	r3,1196(sp)
 800289c:	d8c12a17 	ldw	r3,1192(sp)
 80028a0:	18c0210c 	andi	r3,r3,132
 80028a4:	d8c13215 	stw	r3,1224(sp)
 80028a8:	1802151e 	bne	r3,zero,8003100 <___vfprintf_internal_r+0xe40>
 80028ac:	d9013017 	ldw	r4,1216(sp)
 80028b0:	d8c12b17 	ldw	r3,1196(sp)
 80028b4:	20f9c83a 	sub	fp,r4,r3
 80028b8:	0702110e 	bge	zero,fp,8003100 <___vfprintf_internal_r+0xe40>
 80028bc:	02400404 	movi	r9,16
 80028c0:	d8c12017 	ldw	r3,1152(sp)
 80028c4:	d8811f17 	ldw	r2,1148(sp)
 80028c8:	4f059a0e 	bge	r9,fp,8003f34 <___vfprintf_internal_r+0x1c74>
 80028cc:	8809883a 	mov	r4,r17
 80028d0:	01420074 	movhi	r5,2049
 80028d4:	29466084 	addi	r5,r5,6530
 80028d8:	dc013c15 	stw	r16,1264(sp)
 80028dc:	e023883a 	mov	r17,fp
 80028e0:	d9413615 	stw	r5,1240(sp)
 80028e4:	482d883a 	mov	r22,r9
 80028e8:	054001c4 	movi	r21,7
 80028ec:	dc012c17 	ldw	r16,1200(sp)
 80028f0:	2039883a 	mov	fp,r4
 80028f4:	00000306 	br	8002904 <___vfprintf_internal_r+0x644>
 80028f8:	8c7ffc04 	addi	r17,r17,-16
 80028fc:	42000204 	addi	r8,r8,8
 8002900:	b440130e 	bge	r22,r17,8002950 <___vfprintf_internal_r+0x690>
 8002904:	18c00404 	addi	r3,r3,16
 8002908:	10800044 	addi	r2,r2,1
 800290c:	01020074 	movhi	r4,2049
 8002910:	21066084 	addi	r4,r4,6530
 8002914:	41000015 	stw	r4,0(r8)
 8002918:	45800115 	stw	r22,4(r8)
 800291c:	d8c12015 	stw	r3,1152(sp)
 8002920:	d8811f15 	stw	r2,1148(sp)
 8002924:	a8bff40e 	bge	r21,r2,80028f8 <__alt_data_end+0xf80028f8>
 8002928:	8009883a 	mov	r4,r16
 800292c:	980b883a 	mov	r5,r19
 8002930:	d9811e04 	addi	r6,sp,1144
 8002934:	80095c80 	call	80095c8 <__sprint_r>
 8002938:	103f7d1e 	bne	r2,zero,8002730 <__alt_data_end+0xf8002730>
 800293c:	8c7ffc04 	addi	r17,r17,-16
 8002940:	d8c12017 	ldw	r3,1152(sp)
 8002944:	d8811f17 	ldw	r2,1148(sp)
 8002948:	da000404 	addi	r8,sp,16
 800294c:	b47fed16 	blt	r22,r17,8002904 <__alt_data_end+0xf8002904>
 8002950:	dc013c17 	ldw	r16,1264(sp)
 8002954:	e009883a 	mov	r4,fp
 8002958:	8839883a 	mov	fp,r17
 800295c:	2023883a 	mov	r17,r4
 8002960:	d9413617 	ldw	r5,1240(sp)
 8002964:	e0c7883a 	add	r3,fp,r3
 8002968:	10800044 	addi	r2,r2,1
 800296c:	41400015 	stw	r5,0(r8)
 8002970:	47000115 	stw	fp,4(r8)
 8002974:	d8c12015 	stw	r3,1152(sp)
 8002978:	d8811f15 	stw	r2,1148(sp)
 800297c:	010001c4 	movi	r4,7
 8002980:	20836b16 	blt	r4,r2,8003730 <___vfprintf_internal_r+0x1470>
 8002984:	d8812787 	ldb	r2,1182(sp)
 8002988:	42000204 	addi	r8,r8,8
 800298c:	10000c26 	beq	r2,zero,80029c0 <___vfprintf_internal_r+0x700>
 8002990:	d8811f17 	ldw	r2,1148(sp)
 8002994:	d9012784 	addi	r4,sp,1182
 8002998:	18c00044 	addi	r3,r3,1
 800299c:	10800044 	addi	r2,r2,1
 80029a0:	41000015 	stw	r4,0(r8)
 80029a4:	01000044 	movi	r4,1
 80029a8:	41000115 	stw	r4,4(r8)
 80029ac:	d8c12015 	stw	r3,1152(sp)
 80029b0:	d8811f15 	stw	r2,1148(sp)
 80029b4:	010001c4 	movi	r4,7
 80029b8:	2082ef16 	blt	r4,r2,8003578 <___vfprintf_internal_r+0x12b8>
 80029bc:	42000204 	addi	r8,r8,8
 80029c0:	d8812d17 	ldw	r2,1204(sp)
 80029c4:	10000c26 	beq	r2,zero,80029f8 <___vfprintf_internal_r+0x738>
 80029c8:	d8811f17 	ldw	r2,1148(sp)
 80029cc:	d9012704 	addi	r4,sp,1180
 80029d0:	18c00084 	addi	r3,r3,2
 80029d4:	10800044 	addi	r2,r2,1
 80029d8:	41000015 	stw	r4,0(r8)
 80029dc:	01000084 	movi	r4,2
 80029e0:	41000115 	stw	r4,4(r8)
 80029e4:	d8c12015 	stw	r3,1152(sp)
 80029e8:	d8811f15 	stw	r2,1148(sp)
 80029ec:	010001c4 	movi	r4,7
 80029f0:	2082e916 	blt	r4,r2,8003598 <___vfprintf_internal_r+0x12d8>
 80029f4:	42000204 	addi	r8,r8,8
 80029f8:	d9013217 	ldw	r4,1224(sp)
 80029fc:	00802004 	movi	r2,128
 8002a00:	20823226 	beq	r4,r2,80032cc <___vfprintf_internal_r+0x100c>
 8002a04:	d9012e17 	ldw	r4,1208(sp)
 8002a08:	a129c83a 	sub	r20,r20,r4
 8002a0c:	05002d0e 	bge	zero,r20,8002ac4 <___vfprintf_internal_r+0x804>
 8002a10:	05800404 	movi	r22,16
 8002a14:	d8811f17 	ldw	r2,1148(sp)
 8002a18:	05420074 	movhi	r21,2049
 8002a1c:	ad465c84 	addi	r21,r21,6514
 8002a20:	b5001f0e 	bge	r22,r20,8002aa0 <___vfprintf_internal_r+0x7e0>
 8002a24:	8809883a 	mov	r4,r17
 8002a28:	dc012d15 	stw	r16,1204(sp)
 8002a2c:	a023883a 	mov	r17,r20
 8002a30:	070001c4 	movi	fp,7
 8002a34:	dc012c17 	ldw	r16,1200(sp)
 8002a38:	2029883a 	mov	r20,r4
 8002a3c:	00000306 	br	8002a4c <___vfprintf_internal_r+0x78c>
 8002a40:	8c7ffc04 	addi	r17,r17,-16
 8002a44:	42000204 	addi	r8,r8,8
 8002a48:	b440110e 	bge	r22,r17,8002a90 <___vfprintf_internal_r+0x7d0>
 8002a4c:	18c00404 	addi	r3,r3,16
 8002a50:	10800044 	addi	r2,r2,1
 8002a54:	45c00015 	stw	r23,0(r8)
 8002a58:	45800115 	stw	r22,4(r8)
 8002a5c:	d8c12015 	stw	r3,1152(sp)
 8002a60:	d8811f15 	stw	r2,1148(sp)
 8002a64:	e0bff60e 	bge	fp,r2,8002a40 <__alt_data_end+0xf8002a40>
 8002a68:	8009883a 	mov	r4,r16
 8002a6c:	980b883a 	mov	r5,r19
 8002a70:	d9811e04 	addi	r6,sp,1144
 8002a74:	80095c80 	call	80095c8 <__sprint_r>
 8002a78:	103f2d1e 	bne	r2,zero,8002730 <__alt_data_end+0xf8002730>
 8002a7c:	8c7ffc04 	addi	r17,r17,-16
 8002a80:	d8c12017 	ldw	r3,1152(sp)
 8002a84:	d8811f17 	ldw	r2,1148(sp)
 8002a88:	da000404 	addi	r8,sp,16
 8002a8c:	b47fef16 	blt	r22,r17,8002a4c <__alt_data_end+0xf8002a4c>
 8002a90:	dc012d17 	ldw	r16,1204(sp)
 8002a94:	a009883a 	mov	r4,r20
 8002a98:	8829883a 	mov	r20,r17
 8002a9c:	2023883a 	mov	r17,r4
 8002aa0:	1d07883a 	add	r3,r3,r20
 8002aa4:	10800044 	addi	r2,r2,1
 8002aa8:	45400015 	stw	r21,0(r8)
 8002aac:	45000115 	stw	r20,4(r8)
 8002ab0:	d8c12015 	stw	r3,1152(sp)
 8002ab4:	d8811f15 	stw	r2,1148(sp)
 8002ab8:	010001c4 	movi	r4,7
 8002abc:	2082a616 	blt	r4,r2,8003558 <___vfprintf_internal_r+0x1298>
 8002ac0:	42000204 	addi	r8,r8,8
 8002ac4:	d9412a17 	ldw	r5,1192(sp)
 8002ac8:	2880400c 	andi	r2,r5,256
 8002acc:	1001b51e 	bne	r2,zero,80031a4 <___vfprintf_internal_r+0xee4>
 8002ad0:	d8812e17 	ldw	r2,1208(sp)
 8002ad4:	d9012e17 	ldw	r4,1208(sp)
 8002ad8:	44000015 	stw	r16,0(r8)
 8002adc:	1887883a 	add	r3,r3,r2
 8002ae0:	d8811f17 	ldw	r2,1148(sp)
 8002ae4:	10800044 	addi	r2,r2,1
 8002ae8:	41000115 	stw	r4,4(r8)
 8002aec:	d8c12015 	stw	r3,1152(sp)
 8002af0:	d8811f15 	stw	r2,1148(sp)
 8002af4:	010001c4 	movi	r4,7
 8002af8:	20818b16 	blt	r4,r2,8003128 <___vfprintf_internal_r+0xe68>
 8002afc:	42000204 	addi	r8,r8,8
 8002b00:	d9412a17 	ldw	r5,1192(sp)
 8002b04:	2880010c 	andi	r2,r5,4
 8002b08:	10003226 	beq	r2,zero,8002bd4 <___vfprintf_internal_r+0x914>
 8002b0c:	d8813017 	ldw	r2,1216(sp)
 8002b10:	d9012b17 	ldw	r4,1196(sp)
 8002b14:	1121c83a 	sub	r16,r2,r4
 8002b18:	04002e0e 	bge	zero,r16,8002bd4 <___vfprintf_internal_r+0x914>
 8002b1c:	04800404 	movi	r18,16
 8002b20:	d8811f17 	ldw	r2,1148(sp)
 8002b24:	9405240e 	bge	r18,r16,8003fb8 <___vfprintf_internal_r+0x1cf8>
 8002b28:	01020074 	movhi	r4,2049
 8002b2c:	21066084 	addi	r4,r4,6530
 8002b30:	d9013615 	stw	r4,1240(sp)
 8002b34:	050001c4 	movi	r20,7
 8002b38:	dd412c17 	ldw	r21,1200(sp)
 8002b3c:	00000306 	br	8002b4c <___vfprintf_internal_r+0x88c>
 8002b40:	843ffc04 	addi	r16,r16,-16
 8002b44:	42000204 	addi	r8,r8,8
 8002b48:	9400130e 	bge	r18,r16,8002b98 <___vfprintf_internal_r+0x8d8>
 8002b4c:	18c00404 	addi	r3,r3,16
 8002b50:	10800044 	addi	r2,r2,1
 8002b54:	01420074 	movhi	r5,2049
 8002b58:	29466084 	addi	r5,r5,6530
 8002b5c:	41400015 	stw	r5,0(r8)
 8002b60:	44800115 	stw	r18,4(r8)
 8002b64:	d8c12015 	stw	r3,1152(sp)
 8002b68:	d8811f15 	stw	r2,1148(sp)
 8002b6c:	a0bff40e 	bge	r20,r2,8002b40 <__alt_data_end+0xf8002b40>
 8002b70:	a809883a 	mov	r4,r21
 8002b74:	980b883a 	mov	r5,r19
 8002b78:	d9811e04 	addi	r6,sp,1144
 8002b7c:	80095c80 	call	80095c8 <__sprint_r>
 8002b80:	103eeb1e 	bne	r2,zero,8002730 <__alt_data_end+0xf8002730>
 8002b84:	843ffc04 	addi	r16,r16,-16
 8002b88:	d8c12017 	ldw	r3,1152(sp)
 8002b8c:	d8811f17 	ldw	r2,1148(sp)
 8002b90:	da000404 	addi	r8,sp,16
 8002b94:	943fed16 	blt	r18,r16,8002b4c <__alt_data_end+0xf8002b4c>
 8002b98:	d9013617 	ldw	r4,1240(sp)
 8002b9c:	1c07883a 	add	r3,r3,r16
 8002ba0:	10800044 	addi	r2,r2,1
 8002ba4:	41000015 	stw	r4,0(r8)
 8002ba8:	44000115 	stw	r16,4(r8)
 8002bac:	d8c12015 	stw	r3,1152(sp)
 8002bb0:	d8811f15 	stw	r2,1148(sp)
 8002bb4:	010001c4 	movi	r4,7
 8002bb8:	2080060e 	bge	r4,r2,8002bd4 <___vfprintf_internal_r+0x914>
 8002bbc:	d9012c17 	ldw	r4,1200(sp)
 8002bc0:	980b883a 	mov	r5,r19
 8002bc4:	d9811e04 	addi	r6,sp,1144
 8002bc8:	80095c80 	call	80095c8 <__sprint_r>
 8002bcc:	103ed81e 	bne	r2,zero,8002730 <__alt_data_end+0xf8002730>
 8002bd0:	d8c12017 	ldw	r3,1152(sp)
 8002bd4:	d8812b17 	ldw	r2,1196(sp)
 8002bd8:	d9413017 	ldw	r5,1216(sp)
 8002bdc:	1140010e 	bge	r2,r5,8002be4 <___vfprintf_internal_r+0x924>
 8002be0:	2805883a 	mov	r2,r5
 8002be4:	d9013117 	ldw	r4,1220(sp)
 8002be8:	2089883a 	add	r4,r4,r2
 8002bec:	d9013115 	stw	r4,1220(sp)
 8002bf0:	1802381e 	bne	r3,zero,80034d4 <___vfprintf_internal_r+0x1214>
 8002bf4:	88800007 	ldb	r2,0(r17)
 8002bf8:	d8011f15 	stw	zero,1148(sp)
 8002bfc:	da000404 	addi	r8,sp,16
 8002c00:	103def1e 	bne	r2,zero,80023c0 <__alt_data_end+0xf80023c0>
 8002c04:	8821883a 	mov	r16,r17
 8002c08:	003e0506 	br	8002420 <__alt_data_end+0xf8002420>
 8002c0c:	1829883a 	mov	r20,r3
 8002c10:	d8c12a17 	ldw	r3,1192(sp)
 8002c14:	dd812785 	stb	r22,1182(sp)
 8002c18:	e011883a 	mov	r8,fp
 8002c1c:	1880020c 	andi	r2,r3,8
 8002c20:	1003c926 	beq	r2,zero,8003b48 <___vfprintf_internal_r+0x1888>
 8002c24:	d9012f17 	ldw	r4,1212(sp)
 8002c28:	d9412f17 	ldw	r5,1212(sp)
 8002c2c:	d8812f17 	ldw	r2,1212(sp)
 8002c30:	21000017 	ldw	r4,0(r4)
 8002c34:	29400117 	ldw	r5,4(r5)
 8002c38:	10800204 	addi	r2,r2,8
 8002c3c:	d9013715 	stw	r4,1244(sp)
 8002c40:	d9413915 	stw	r5,1252(sp)
 8002c44:	d8812f15 	stw	r2,1212(sp)
 8002c48:	d9013717 	ldw	r4,1244(sp)
 8002c4c:	d9413917 	ldw	r5,1252(sp)
 8002c50:	da013f15 	stw	r8,1276(sp)
 8002c54:	04000044 	movi	r16,1
 8002c58:	80092200 	call	8009220 <__fpclassifyd>
 8002c5c:	da013f17 	ldw	r8,1276(sp)
 8002c60:	d9013717 	ldw	r4,1244(sp)
 8002c64:	d9413917 	ldw	r5,1252(sp)
 8002c68:	1403571e 	bne	r2,r16,80039c8 <___vfprintf_internal_r+0x1708>
 8002c6c:	000d883a 	mov	r6,zero
 8002c70:	000f883a 	mov	r7,zero
 8002c74:	800d5a40 	call	800d5a4 <__ledf2>
 8002c78:	da013f17 	ldw	r8,1276(sp)
 8002c7c:	1004f416 	blt	r2,zero,8004050 <___vfprintf_internal_r+0x1d90>
 8002c80:	df012783 	ldbu	fp,1182(sp)
 8002c84:	008011c4 	movi	r2,71
 8002c88:	14847a0e 	bge	r2,r18,8003e74 <___vfprintf_internal_r+0x1bb4>
 8002c8c:	04020074 	movhi	r16,2049
 8002c90:	84064d04 	addi	r16,r16,6452
 8002c94:	d9012a17 	ldw	r4,1192(sp)
 8002c98:	00bfdfc4 	movi	r2,-129
 8002c9c:	00c000c4 	movi	r3,3
 8002ca0:	2088703a 	and	r4,r4,r2
 8002ca4:	d8c12b15 	stw	r3,1196(sp)
 8002ca8:	d9012a15 	stw	r4,1192(sp)
 8002cac:	d8c12e15 	stw	r3,1208(sp)
 8002cb0:	0029883a 	mov	r20,zero
 8002cb4:	d8013315 	stw	zero,1228(sp)
 8002cb8:	003eea06 	br	8002864 <__alt_data_end+0xf8002864>
 8002cbc:	953ff404 	addi	r20,r18,-48
 8002cc0:	d8013015 	stw	zero,1216(sp)
 8002cc4:	0009883a 	mov	r4,zero
 8002cc8:	1825883a 	mov	r18,r3
 8002ccc:	01400284 	movi	r5,10
 8002cd0:	800c2080 	call	800c208 <__mulsi3>
 8002cd4:	88c00007 	ldb	r3,0(r17)
 8002cd8:	1509883a 	add	r4,r2,r20
 8002cdc:	8c400044 	addi	r17,r17,1
 8002ce0:	1d3ff404 	addi	r20,r3,-48
 8002ce4:	8805883a 	mov	r2,r17
 8002ce8:	ad3ff82e 	bgeu	r21,r20,8002ccc <__alt_data_end+0xf8002ccc>
 8002cec:	d9013015 	stw	r4,1216(sp)
 8002cf0:	9009883a 	mov	r4,r18
 8002cf4:	1023883a 	mov	r17,r2
 8002cf8:	1825883a 	mov	r18,r3
 8002cfc:	2007883a 	mov	r3,r4
 8002d00:	003dd506 	br	8002458 <__alt_data_end+0xf8002458>
 8002d04:	d8812a17 	ldw	r2,1192(sp)
 8002d08:	10800214 	ori	r2,r2,8
 8002d0c:	d8812a15 	stw	r2,1192(sp)
 8002d10:	8c800007 	ldb	r18,0(r17)
 8002d14:	003dcf06 	br	8002454 <__alt_data_end+0xf8002454>
 8002d18:	d9012a17 	ldw	r4,1192(sp)
 8002d1c:	e011883a 	mov	r8,fp
 8002d20:	1829883a 	mov	r20,r3
 8002d24:	21000414 	ori	r4,r4,16
 8002d28:	d9012a15 	stw	r4,1192(sp)
 8002d2c:	d9412a17 	ldw	r5,1192(sp)
 8002d30:	2880080c 	andi	r2,r5,32
 8002d34:	1000cf26 	beq	r2,zero,8003074 <___vfprintf_internal_r+0xdb4>
 8002d38:	d8812f17 	ldw	r2,1212(sp)
 8002d3c:	0007883a 	mov	r3,zero
 8002d40:	15400017 	ldw	r21,0(r2)
 8002d44:	15800117 	ldw	r22,4(r2)
 8002d48:	10800204 	addi	r2,r2,8
 8002d4c:	d8812f15 	stw	r2,1212(sp)
 8002d50:	ad84b03a 	or	r2,r21,r22
 8002d54:	d8012785 	stb	zero,1182(sp)
 8002d58:	0039883a 	mov	fp,zero
 8002d5c:	003eab06 	br	800280c <__alt_data_end+0xf800280c>
 8002d60:	d9012a17 	ldw	r4,1192(sp)
 8002d64:	e011883a 	mov	r8,fp
 8002d68:	1829883a 	mov	r20,r3
 8002d6c:	21000414 	ori	r4,r4,16
 8002d70:	d9012a15 	stw	r4,1192(sp)
 8002d74:	d9412a17 	ldw	r5,1192(sp)
 8002d78:	2880080c 	andi	r2,r5,32
 8002d7c:	1000cd26 	beq	r2,zero,80030b4 <___vfprintf_internal_r+0xdf4>
 8002d80:	d8812f17 	ldw	r2,1212(sp)
 8002d84:	00c00044 	movi	r3,1
 8002d88:	15400017 	ldw	r21,0(r2)
 8002d8c:	15800117 	ldw	r22,4(r2)
 8002d90:	10800204 	addi	r2,r2,8
 8002d94:	d8812f15 	stw	r2,1212(sp)
 8002d98:	ad84b03a 	or	r2,r21,r22
 8002d9c:	003fed06 	br	8002d54 <__alt_data_end+0xf8002d54>
 8002da0:	d9012a17 	ldw	r4,1192(sp)
 8002da4:	dd812785 	stb	r22,1182(sp)
 8002da8:	e011883a 	mov	r8,fp
 8002dac:	2080080c 	andi	r2,r4,32
 8002db0:	10039226 	beq	r2,zero,8003bfc <___vfprintf_internal_r+0x193c>
 8002db4:	d9412f17 	ldw	r5,1212(sp)
 8002db8:	d9013117 	ldw	r4,1220(sp)
 8002dbc:	28800017 	ldw	r2,0(r5)
 8002dc0:	2007d7fa 	srai	r3,r4,31
 8002dc4:	29400104 	addi	r5,r5,4
 8002dc8:	d9412f15 	stw	r5,1212(sp)
 8002dcc:	11000015 	stw	r4,0(r2)
 8002dd0:	10c00115 	stw	r3,4(r2)
 8002dd4:	003d7806 	br	80023b8 <__alt_data_end+0xf80023b8>
 8002dd8:	d8c12f17 	ldw	r3,1212(sp)
 8002ddc:	d9012f17 	ldw	r4,1212(sp)
 8002de0:	e011883a 	mov	r8,fp
 8002de4:	18800017 	ldw	r2,0(r3)
 8002de8:	21000104 	addi	r4,r4,4
 8002dec:	00c00044 	movi	r3,1
 8002df0:	d8c12b15 	stw	r3,1196(sp)
 8002df4:	d8012785 	stb	zero,1182(sp)
 8002df8:	d8810405 	stb	r2,1040(sp)
 8002dfc:	d9012f15 	stw	r4,1212(sp)
 8002e00:	d8c12e15 	stw	r3,1208(sp)
 8002e04:	0029883a 	mov	r20,zero
 8002e08:	d8013315 	stw	zero,1228(sp)
 8002e0c:	dc010404 	addi	r16,sp,1040
 8002e10:	0005883a 	mov	r2,zero
 8002e14:	003e9a06 	br	8002880 <__alt_data_end+0xf8002880>
 8002e18:	d9412a17 	ldw	r5,1192(sp)
 8002e1c:	01020074 	movhi	r4,2049
 8002e20:	21065504 	addi	r4,r4,6484
 8002e24:	dd812785 	stb	r22,1182(sp)
 8002e28:	d9013b15 	stw	r4,1260(sp)
 8002e2c:	2880080c 	andi	r2,r5,32
 8002e30:	e011883a 	mov	r8,fp
 8002e34:	1829883a 	mov	r20,r3
 8002e38:	10002f26 	beq	r2,zero,8002ef8 <___vfprintf_internal_r+0xc38>
 8002e3c:	d8812f17 	ldw	r2,1212(sp)
 8002e40:	15400017 	ldw	r21,0(r2)
 8002e44:	15800117 	ldw	r22,4(r2)
 8002e48:	10800204 	addi	r2,r2,8
 8002e4c:	d8812f15 	stw	r2,1212(sp)
 8002e50:	d9012a17 	ldw	r4,1192(sp)
 8002e54:	2080004c 	andi	r2,r4,1
 8002e58:	10025f26 	beq	r2,zero,80037d8 <___vfprintf_internal_r+0x1518>
 8002e5c:	ad84b03a 	or	r2,r21,r22
 8002e60:	10034e26 	beq	r2,zero,8003b9c <___vfprintf_internal_r+0x18dc>
 8002e64:	00c00c04 	movi	r3,48
 8002e68:	21000094 	ori	r4,r4,2
 8002e6c:	d8c12705 	stb	r3,1180(sp)
 8002e70:	dc812745 	stb	r18,1181(sp)
 8002e74:	d9012a15 	stw	r4,1192(sp)
 8002e78:	00c00084 	movi	r3,2
 8002e7c:	003fb506 	br	8002d54 <__alt_data_end+0xf8002d54>
 8002e80:	b0803fcc 	andi	r2,r22,255
 8002e84:	1080201c 	xori	r2,r2,128
 8002e88:	10bfe004 	addi	r2,r2,-128
 8002e8c:	1003501e 	bne	r2,zero,8003bd0 <___vfprintf_internal_r+0x1910>
 8002e90:	05800804 	movi	r22,32
 8002e94:	8c800007 	ldb	r18,0(r17)
 8002e98:	003d6e06 	br	8002454 <__alt_data_end+0xf8002454>
 8002e9c:	d9012a17 	ldw	r4,1192(sp)
 8002ea0:	21000054 	ori	r4,r4,1
 8002ea4:	d9012a15 	stw	r4,1192(sp)
 8002ea8:	8c800007 	ldb	r18,0(r17)
 8002eac:	003d6906 	br	8002454 <__alt_data_end+0xf8002454>
 8002eb0:	d9412f17 	ldw	r5,1212(sp)
 8002eb4:	d9012f17 	ldw	r4,1212(sp)
 8002eb8:	29400017 	ldw	r5,0(r5)
 8002ebc:	20800104 	addi	r2,r4,4
 8002ec0:	d9413015 	stw	r5,1216(sp)
 8002ec4:	283dc616 	blt	r5,zero,80025e0 <__alt_data_end+0xf80025e0>
 8002ec8:	d8812f15 	stw	r2,1212(sp)
 8002ecc:	8c800007 	ldb	r18,0(r17)
 8002ed0:	003d6006 	br	8002454 <__alt_data_end+0xf8002454>
 8002ed4:	d9412a17 	ldw	r5,1192(sp)
 8002ed8:	00820074 	movhi	r2,2049
 8002edc:	10865004 	addi	r2,r2,6464
 8002ee0:	d8813b15 	stw	r2,1260(sp)
 8002ee4:	dd812785 	stb	r22,1182(sp)
 8002ee8:	2880080c 	andi	r2,r5,32
 8002eec:	e011883a 	mov	r8,fp
 8002ef0:	1829883a 	mov	r20,r3
 8002ef4:	103fd11e 	bne	r2,zero,8002e3c <__alt_data_end+0xf8002e3c>
 8002ef8:	d8c12a17 	ldw	r3,1192(sp)
 8002efc:	1880040c 	andi	r2,r3,16
 8002f00:	10033526 	beq	r2,zero,8003bd8 <___vfprintf_internal_r+0x1918>
 8002f04:	d9012f17 	ldw	r4,1212(sp)
 8002f08:	002d883a 	mov	r22,zero
 8002f0c:	25400017 	ldw	r21,0(r4)
 8002f10:	21000104 	addi	r4,r4,4
 8002f14:	d9012f15 	stw	r4,1212(sp)
 8002f18:	003fcd06 	br	8002e50 <__alt_data_end+0xf8002e50>
 8002f1c:	d9012a17 	ldw	r4,1192(sp)
 8002f20:	21001014 	ori	r4,r4,64
 8002f24:	d9012a15 	stw	r4,1192(sp)
 8002f28:	8c800007 	ldb	r18,0(r17)
 8002f2c:	003d4906 	br	8002454 <__alt_data_end+0xf8002454>
 8002f30:	8c800007 	ldb	r18,0(r17)
 8002f34:	01401b04 	movi	r5,108
 8002f38:	8805883a 	mov	r2,r17
 8002f3c:	9143db26 	beq	r18,r5,8003eac <___vfprintf_internal_r+0x1bec>
 8002f40:	d9412a17 	ldw	r5,1192(sp)
 8002f44:	29400414 	ori	r5,r5,16
 8002f48:	d9412a15 	stw	r5,1192(sp)
 8002f4c:	003d4106 	br	8002454 <__alt_data_end+0xf8002454>
 8002f50:	1829883a 	mov	r20,r3
 8002f54:	d8c12a17 	ldw	r3,1192(sp)
 8002f58:	dd812785 	stb	r22,1182(sp)
 8002f5c:	e011883a 	mov	r8,fp
 8002f60:	1880080c 	andi	r2,r3,32
 8002f64:	103e1f1e 	bne	r2,zero,80027e4 <__alt_data_end+0xf80027e4>
 8002f68:	d9412a17 	ldw	r5,1192(sp)
 8002f6c:	2880040c 	andi	r2,r5,16
 8002f70:	10032f26 	beq	r2,zero,8003c30 <___vfprintf_internal_r+0x1970>
 8002f74:	d8812f17 	ldw	r2,1212(sp)
 8002f78:	15400017 	ldw	r21,0(r2)
 8002f7c:	10800104 	addi	r2,r2,4
 8002f80:	d8812f15 	stw	r2,1212(sp)
 8002f84:	a82dd7fa 	srai	r22,r21,31
 8002f88:	b005883a 	mov	r2,r22
 8002f8c:	003e1b06 	br	80027fc <__alt_data_end+0xf80027fc>
 8002f90:	d8812a17 	ldw	r2,1192(sp)
 8002f94:	10800814 	ori	r2,r2,32
 8002f98:	d8812a15 	stw	r2,1192(sp)
 8002f9c:	8c800007 	ldb	r18,0(r17)
 8002fa0:	003d2c06 	br	8002454 <__alt_data_end+0xf8002454>
 8002fa4:	1829883a 	mov	r20,r3
 8002fa8:	d8c12f17 	ldw	r3,1212(sp)
 8002fac:	d8012785 	stb	zero,1182(sp)
 8002fb0:	e011883a 	mov	r8,fp
 8002fb4:	1c000017 	ldw	r16,0(r3)
 8002fb8:	1d400104 	addi	r21,r3,4
 8002fbc:	80040226 	beq	r16,zero,8003fc8 <___vfprintf_internal_r+0x1d08>
 8002fc0:	8009883a 	mov	r4,r16
 8002fc4:	a003c716 	blt	r20,zero,8003ee4 <___vfprintf_internal_r+0x1c24>
 8002fc8:	000b883a 	mov	r5,zero
 8002fcc:	a00d883a 	mov	r6,r20
 8002fd0:	df013f15 	stw	fp,1276(sp)
 8002fd4:	80078500 	call	8007850 <memchr>
 8002fd8:	da013f17 	ldw	r8,1276(sp)
 8002fdc:	10044326 	beq	r2,zero,80040ec <___vfprintf_internal_r+0x1e2c>
 8002fe0:	1405c83a 	sub	r2,r2,r16
 8002fe4:	d8812e15 	stw	r2,1208(sp)
 8002fe8:	a0837c16 	blt	r20,r2,8003ddc <___vfprintf_internal_r+0x1b1c>
 8002fec:	d8812e17 	ldw	r2,1208(sp)
 8002ff0:	1003c116 	blt	r2,zero,8003ef8 <___vfprintf_internal_r+0x1c38>
 8002ff4:	df012783 	ldbu	fp,1182(sp)
 8002ff8:	d8812b15 	stw	r2,1196(sp)
 8002ffc:	dd412f15 	stw	r21,1212(sp)
 8003000:	0029883a 	mov	r20,zero
 8003004:	d8013315 	stw	zero,1228(sp)
 8003008:	003e1606 	br	8002864 <__alt_data_end+0xf8002864>
 800300c:	d9012f17 	ldw	r4,1212(sp)
 8003010:	d9412a17 	ldw	r5,1192(sp)
 8003014:	00800c04 	movi	r2,48
 8003018:	25400017 	ldw	r21,0(r4)
 800301c:	d8812705 	stb	r2,1180(sp)
 8003020:	00801e04 	movi	r2,120
 8003024:	29400094 	ori	r5,r5,2
 8003028:	d8812745 	stb	r2,1181(sp)
 800302c:	21000104 	addi	r4,r4,4
 8003030:	00820074 	movhi	r2,2049
 8003034:	10865504 	addi	r2,r2,6484
 8003038:	1829883a 	mov	r20,r3
 800303c:	d8813b15 	stw	r2,1260(sp)
 8003040:	e011883a 	mov	r8,fp
 8003044:	002d883a 	mov	r22,zero
 8003048:	d9412a15 	stw	r5,1192(sp)
 800304c:	d9012f15 	stw	r4,1212(sp)
 8003050:	00c00084 	movi	r3,2
 8003054:	04801e04 	movi	r18,120
 8003058:	a805883a 	mov	r2,r21
 800305c:	003f3d06 	br	8002d54 <__alt_data_end+0xf8002d54>
 8003060:	d9412a17 	ldw	r5,1192(sp)
 8003064:	e011883a 	mov	r8,fp
 8003068:	1829883a 	mov	r20,r3
 800306c:	2880080c 	andi	r2,r5,32
 8003070:	103f311e 	bne	r2,zero,8002d38 <__alt_data_end+0xf8002d38>
 8003074:	d8c12a17 	ldw	r3,1192(sp)
 8003078:	1880040c 	andi	r2,r3,16
 800307c:	1002c926 	beq	r2,zero,8003ba4 <___vfprintf_internal_r+0x18e4>
 8003080:	d9012f17 	ldw	r4,1212(sp)
 8003084:	002d883a 	mov	r22,zero
 8003088:	0007883a 	mov	r3,zero
 800308c:	25400017 	ldw	r21,0(r4)
 8003090:	21000104 	addi	r4,r4,4
 8003094:	d9012f15 	stw	r4,1212(sp)
 8003098:	a805883a 	mov	r2,r21
 800309c:	003f2d06 	br	8002d54 <__alt_data_end+0xf8002d54>
 80030a0:	d9412a17 	ldw	r5,1192(sp)
 80030a4:	e011883a 	mov	r8,fp
 80030a8:	1829883a 	mov	r20,r3
 80030ac:	2880080c 	andi	r2,r5,32
 80030b0:	103f331e 	bne	r2,zero,8002d80 <__alt_data_end+0xf8002d80>
 80030b4:	d8c12a17 	ldw	r3,1192(sp)
 80030b8:	1880040c 	andi	r2,r3,16
 80030bc:	1002ac26 	beq	r2,zero,8003b70 <___vfprintf_internal_r+0x18b0>
 80030c0:	d9012f17 	ldw	r4,1212(sp)
 80030c4:	002d883a 	mov	r22,zero
 80030c8:	00c00044 	movi	r3,1
 80030cc:	25400017 	ldw	r21,0(r4)
 80030d0:	21000104 	addi	r4,r4,4
 80030d4:	d9012f15 	stw	r4,1212(sp)
 80030d8:	a805883a 	mov	r2,r21
 80030dc:	003f1d06 	br	8002d54 <__alt_data_end+0xf8002d54>
 80030e0:	dd812785 	stb	r22,1182(sp)
 80030e4:	e011883a 	mov	r8,fp
 80030e8:	903d8b26 	beq	r18,zero,8002718 <__alt_data_end+0xf8002718>
 80030ec:	00c00044 	movi	r3,1
 80030f0:	d8c12b15 	stw	r3,1196(sp)
 80030f4:	dc810405 	stb	r18,1040(sp)
 80030f8:	d8012785 	stb	zero,1182(sp)
 80030fc:	003f4006 	br	8002e00 <__alt_data_end+0xf8002e00>
 8003100:	d8c12017 	ldw	r3,1152(sp)
 8003104:	003e2106 	br	800298c <__alt_data_end+0xf800298c>
 8003108:	45400015 	stw	r21,0(r8)
 800310c:	44000115 	stw	r16,4(r8)
 8003110:	1c07883a 	add	r3,r3,r16
 8003114:	10800044 	addi	r2,r2,1
 8003118:	d8c12015 	stw	r3,1152(sp)
 800311c:	d8811f15 	stw	r2,1148(sp)
 8003120:	010001c4 	movi	r4,7
 8003124:	20be750e 	bge	r4,r2,8002afc <__alt_data_end+0xf8002afc>
 8003128:	d9012c17 	ldw	r4,1200(sp)
 800312c:	980b883a 	mov	r5,r19
 8003130:	d9811e04 	addi	r6,sp,1144
 8003134:	80095c80 	call	80095c8 <__sprint_r>
 8003138:	103d7d1e 	bne	r2,zero,8002730 <__alt_data_end+0xf8002730>
 800313c:	d8c12017 	ldw	r3,1152(sp)
 8003140:	da000404 	addi	r8,sp,16
 8003144:	003e6e06 	br	8002b00 <__alt_data_end+0xf8002b00>
 8003148:	18803fcc 	andi	r2,r3,255
 800314c:	00c00044 	movi	r3,1
 8003150:	10c11926 	beq	r2,r3,80035b8 <___vfprintf_internal_r+0x12f8>
 8003154:	00c00084 	movi	r3,2
 8003158:	10c0e41e 	bne	r2,r3,80034ec <___vfprintf_internal_r+0x122c>
 800315c:	d9413b17 	ldw	r5,1260(sp)
 8003160:	d8c10dc4 	addi	r3,sp,1079
 8003164:	a88003cc 	andi	r2,r21,15
 8003168:	b008973a 	slli	r4,r22,28
 800316c:	2885883a 	add	r2,r5,r2
 8003170:	a82ad13a 	srli	r21,r21,4
 8003174:	10800003 	ldbu	r2,0(r2)
 8003178:	b02cd13a 	srli	r22,r22,4
 800317c:	256ab03a 	or	r21,r4,r21
 8003180:	18800005 	stb	r2,0(r3)
 8003184:	ad84b03a 	or	r2,r21,r22
 8003188:	1821883a 	mov	r16,r3
 800318c:	18ffffc4 	addi	r3,r3,-1
 8003190:	103ff41e 	bne	r2,zero,8003164 <__alt_data_end+0xf8003164>
 8003194:	d8c12917 	ldw	r3,1188(sp)
 8003198:	1c07c83a 	sub	r3,r3,r16
 800319c:	d8c12e15 	stw	r3,1208(sp)
 80031a0:	003dab06 	br	8002850 <__alt_data_end+0xf8002850>
 80031a4:	00801944 	movi	r2,101
 80031a8:	14807e0e 	bge	r2,r18,80033a4 <___vfprintf_internal_r+0x10e4>
 80031ac:	d9013717 	ldw	r4,1244(sp)
 80031b0:	d9413917 	ldw	r5,1252(sp)
 80031b4:	000d883a 	mov	r6,zero
 80031b8:	000f883a 	mov	r7,zero
 80031bc:	d8c13e15 	stw	r3,1272(sp)
 80031c0:	da013f15 	stw	r8,1276(sp)
 80031c4:	800d4480 	call	800d448 <__eqdf2>
 80031c8:	d8c13e17 	ldw	r3,1272(sp)
 80031cc:	da013f17 	ldw	r8,1276(sp)
 80031d0:	1001211e 	bne	r2,zero,8003658 <___vfprintf_internal_r+0x1398>
 80031d4:	d8811f17 	ldw	r2,1148(sp)
 80031d8:	01000044 	movi	r4,1
 80031dc:	18c00044 	addi	r3,r3,1
 80031e0:	10800044 	addi	r2,r2,1
 80031e4:	01420074 	movhi	r5,2049
 80031e8:	29465c04 	addi	r5,r5,6512
 80031ec:	41000115 	stw	r4,4(r8)
 80031f0:	41400015 	stw	r5,0(r8)
 80031f4:	d8c12015 	stw	r3,1152(sp)
 80031f8:	d8811f15 	stw	r2,1148(sp)
 80031fc:	010001c4 	movi	r4,7
 8003200:	2082a316 	blt	r4,r2,8003c90 <___vfprintf_internal_r+0x19d0>
 8003204:	42000204 	addi	r8,r8,8
 8003208:	d8812617 	ldw	r2,1176(sp)
 800320c:	d9013517 	ldw	r4,1236(sp)
 8003210:	11000316 	blt	r2,r4,8003220 <___vfprintf_internal_r+0xf60>
 8003214:	d9412a17 	ldw	r5,1192(sp)
 8003218:	2880004c 	andi	r2,r5,1
 800321c:	103e3826 	beq	r2,zero,8002b00 <__alt_data_end+0xf8002b00>
 8003220:	d8813817 	ldw	r2,1248(sp)
 8003224:	d9013417 	ldw	r4,1232(sp)
 8003228:	d9413817 	ldw	r5,1248(sp)
 800322c:	1887883a 	add	r3,r3,r2
 8003230:	d8811f17 	ldw	r2,1148(sp)
 8003234:	41000015 	stw	r4,0(r8)
 8003238:	41400115 	stw	r5,4(r8)
 800323c:	10800044 	addi	r2,r2,1
 8003240:	d8c12015 	stw	r3,1152(sp)
 8003244:	d8811f15 	stw	r2,1148(sp)
 8003248:	010001c4 	movi	r4,7
 800324c:	20831d16 	blt	r4,r2,8003ec4 <___vfprintf_internal_r+0x1c04>
 8003250:	42000204 	addi	r8,r8,8
 8003254:	d8813517 	ldw	r2,1236(sp)
 8003258:	143fffc4 	addi	r16,r2,-1
 800325c:	043e280e 	bge	zero,r16,8002b00 <__alt_data_end+0xf8002b00>
 8003260:	04800404 	movi	r18,16
 8003264:	d8811f17 	ldw	r2,1148(sp)
 8003268:	05420074 	movhi	r21,2049
 800326c:	ad465c84 	addi	r21,r21,6514
 8003270:	943fa50e 	bge	r18,r16,8003108 <__alt_data_end+0xf8003108>
 8003274:	050001c4 	movi	r20,7
 8003278:	dd812c17 	ldw	r22,1200(sp)
 800327c:	00000306 	br	800328c <___vfprintf_internal_r+0xfcc>
 8003280:	42000204 	addi	r8,r8,8
 8003284:	843ffc04 	addi	r16,r16,-16
 8003288:	943f9f0e 	bge	r18,r16,8003108 <__alt_data_end+0xf8003108>
 800328c:	18c00404 	addi	r3,r3,16
 8003290:	10800044 	addi	r2,r2,1
 8003294:	45c00015 	stw	r23,0(r8)
 8003298:	44800115 	stw	r18,4(r8)
 800329c:	d8c12015 	stw	r3,1152(sp)
 80032a0:	d8811f15 	stw	r2,1148(sp)
 80032a4:	a0bff60e 	bge	r20,r2,8003280 <__alt_data_end+0xf8003280>
 80032a8:	b009883a 	mov	r4,r22
 80032ac:	980b883a 	mov	r5,r19
 80032b0:	d9811e04 	addi	r6,sp,1144
 80032b4:	80095c80 	call	80095c8 <__sprint_r>
 80032b8:	103d1d1e 	bne	r2,zero,8002730 <__alt_data_end+0xf8002730>
 80032bc:	d8c12017 	ldw	r3,1152(sp)
 80032c0:	d8811f17 	ldw	r2,1148(sp)
 80032c4:	da000404 	addi	r8,sp,16
 80032c8:	003fee06 	br	8003284 <__alt_data_end+0xf8003284>
 80032cc:	d9413017 	ldw	r5,1216(sp)
 80032d0:	d8812b17 	ldw	r2,1196(sp)
 80032d4:	28adc83a 	sub	r22,r5,r2
 80032d8:	05bdca0e 	bge	zero,r22,8002a04 <__alt_data_end+0xf8002a04>
 80032dc:	07000404 	movi	fp,16
 80032e0:	d8811f17 	ldw	r2,1148(sp)
 80032e4:	05420074 	movhi	r21,2049
 80032e8:	ad465c84 	addi	r21,r21,6514
 80032ec:	e580230e 	bge	fp,r22,800337c <___vfprintf_internal_r+0x10bc>
 80032f0:	a809883a 	mov	r4,r21
 80032f4:	dc012d15 	stw	r16,1204(sp)
 80032f8:	882b883a 	mov	r21,r17
 80032fc:	01c001c4 	movi	r7,7
 8003300:	b023883a 	mov	r17,r22
 8003304:	dc012c17 	ldw	r16,1200(sp)
 8003308:	202d883a 	mov	r22,r4
 800330c:	00000306 	br	800331c <___vfprintf_internal_r+0x105c>
 8003310:	8c7ffc04 	addi	r17,r17,-16
 8003314:	42000204 	addi	r8,r8,8
 8003318:	e440130e 	bge	fp,r17,8003368 <___vfprintf_internal_r+0x10a8>
 800331c:	18c00404 	addi	r3,r3,16
 8003320:	10800044 	addi	r2,r2,1
 8003324:	45c00015 	stw	r23,0(r8)
 8003328:	47000115 	stw	fp,4(r8)
 800332c:	d8c12015 	stw	r3,1152(sp)
 8003330:	d8811f15 	stw	r2,1148(sp)
 8003334:	38bff60e 	bge	r7,r2,8003310 <__alt_data_end+0xf8003310>
 8003338:	8009883a 	mov	r4,r16
 800333c:	980b883a 	mov	r5,r19
 8003340:	d9811e04 	addi	r6,sp,1144
 8003344:	d9c13e15 	stw	r7,1272(sp)
 8003348:	80095c80 	call	80095c8 <__sprint_r>
 800334c:	d9c13e17 	ldw	r7,1272(sp)
 8003350:	103cf71e 	bne	r2,zero,8002730 <__alt_data_end+0xf8002730>
 8003354:	8c7ffc04 	addi	r17,r17,-16
 8003358:	d8c12017 	ldw	r3,1152(sp)
 800335c:	d8811f17 	ldw	r2,1148(sp)
 8003360:	da000404 	addi	r8,sp,16
 8003364:	e47fed16 	blt	fp,r17,800331c <__alt_data_end+0xf800331c>
 8003368:	dc012d17 	ldw	r16,1204(sp)
 800336c:	b009883a 	mov	r4,r22
 8003370:	882d883a 	mov	r22,r17
 8003374:	a823883a 	mov	r17,r21
 8003378:	202b883a 	mov	r21,r4
 800337c:	1d87883a 	add	r3,r3,r22
 8003380:	10800044 	addi	r2,r2,1
 8003384:	45400015 	stw	r21,0(r8)
 8003388:	45800115 	stw	r22,4(r8)
 800338c:	d8c12015 	stw	r3,1152(sp)
 8003390:	d8811f15 	stw	r2,1148(sp)
 8003394:	010001c4 	movi	r4,7
 8003398:	20817a16 	blt	r4,r2,8003984 <___vfprintf_internal_r+0x16c4>
 800339c:	42000204 	addi	r8,r8,8
 80033a0:	003d9806 	br	8002a04 <__alt_data_end+0xf8002a04>
 80033a4:	d9013517 	ldw	r4,1236(sp)
 80033a8:	00800044 	movi	r2,1
 80033ac:	1100340e 	bge	r2,r4,8003480 <___vfprintf_internal_r+0x11c0>
 80033b0:	dc811f17 	ldw	r18,1148(sp)
 80033b4:	00800044 	movi	r2,1
 80033b8:	18c00044 	addi	r3,r3,1
 80033bc:	94800044 	addi	r18,r18,1
 80033c0:	40800115 	stw	r2,4(r8)
 80033c4:	44000015 	stw	r16,0(r8)
 80033c8:	d8c12015 	stw	r3,1152(sp)
 80033cc:	dc811f15 	stw	r18,1148(sp)
 80033d0:	008001c4 	movi	r2,7
 80033d4:	14814e16 	blt	r2,r18,8003910 <___vfprintf_internal_r+0x1650>
 80033d8:	42000204 	addi	r8,r8,8
 80033dc:	d8813817 	ldw	r2,1248(sp)
 80033e0:	94800044 	addi	r18,r18,1
 80033e4:	dc811f15 	stw	r18,1148(sp)
 80033e8:	18ad883a 	add	r22,r3,r2
 80033ec:	d8c13417 	ldw	r3,1232(sp)
 80033f0:	40800115 	stw	r2,4(r8)
 80033f4:	dd812015 	stw	r22,1152(sp)
 80033f8:	40c00015 	stw	r3,0(r8)
 80033fc:	008001c4 	movi	r2,7
 8003400:	14814c16 	blt	r2,r18,8003934 <___vfprintf_internal_r+0x1674>
 8003404:	45000204 	addi	r20,r8,8
 8003408:	d9013717 	ldw	r4,1244(sp)
 800340c:	d9413917 	ldw	r5,1252(sp)
 8003410:	000d883a 	mov	r6,zero
 8003414:	000f883a 	mov	r7,zero
 8003418:	800d4480 	call	800d448 <__eqdf2>
 800341c:	1000cd26 	beq	r2,zero,8003754 <___vfprintf_internal_r+0x1494>
 8003420:	d9013517 	ldw	r4,1236(sp)
 8003424:	84000044 	addi	r16,r16,1
 8003428:	94800044 	addi	r18,r18,1
 800342c:	20bfffc4 	addi	r2,r4,-1
 8003430:	b0ad883a 	add	r22,r22,r2
 8003434:	a0800115 	stw	r2,4(r20)
 8003438:	a4000015 	stw	r16,0(r20)
 800343c:	dd812015 	stw	r22,1152(sp)
 8003440:	dc811f15 	stw	r18,1148(sp)
 8003444:	008001c4 	movi	r2,7
 8003448:	14801916 	blt	r2,r18,80034b0 <___vfprintf_internal_r+0x11f0>
 800344c:	a5000204 	addi	r20,r20,8
 8003450:	d9013a17 	ldw	r4,1256(sp)
 8003454:	d88122c4 	addi	r2,sp,1163
 8003458:	94800044 	addi	r18,r18,1
 800345c:	2587883a 	add	r3,r4,r22
 8003460:	a0800015 	stw	r2,0(r20)
 8003464:	a1000115 	stw	r4,4(r20)
 8003468:	d8c12015 	stw	r3,1152(sp)
 800346c:	dc811f15 	stw	r18,1148(sp)
 8003470:	008001c4 	movi	r2,7
 8003474:	14bf2c16 	blt	r2,r18,8003128 <__alt_data_end+0xf8003128>
 8003478:	a2000204 	addi	r8,r20,8
 800347c:	003da006 	br	8002b00 <__alt_data_end+0xf8002b00>
 8003480:	d9412a17 	ldw	r5,1192(sp)
 8003484:	2888703a 	and	r4,r5,r2
 8003488:	203fc91e 	bne	r4,zero,80033b0 <__alt_data_end+0xf80033b0>
 800348c:	dc811f17 	ldw	r18,1148(sp)
 8003490:	1d800044 	addi	r22,r3,1
 8003494:	40800115 	stw	r2,4(r8)
 8003498:	94800044 	addi	r18,r18,1
 800349c:	44000015 	stw	r16,0(r8)
 80034a0:	dd812015 	stw	r22,1152(sp)
 80034a4:	dc811f15 	stw	r18,1148(sp)
 80034a8:	008001c4 	movi	r2,7
 80034ac:	1482740e 	bge	r2,r18,8003e80 <___vfprintf_internal_r+0x1bc0>
 80034b0:	d9012c17 	ldw	r4,1200(sp)
 80034b4:	980b883a 	mov	r5,r19
 80034b8:	d9811e04 	addi	r6,sp,1144
 80034bc:	80095c80 	call	80095c8 <__sprint_r>
 80034c0:	103c9b1e 	bne	r2,zero,8002730 <__alt_data_end+0xf8002730>
 80034c4:	dd812017 	ldw	r22,1152(sp)
 80034c8:	dc811f17 	ldw	r18,1148(sp)
 80034cc:	dd000404 	addi	r20,sp,16
 80034d0:	003fdf06 	br	8003450 <__alt_data_end+0xf8003450>
 80034d4:	d9012c17 	ldw	r4,1200(sp)
 80034d8:	980b883a 	mov	r5,r19
 80034dc:	d9811e04 	addi	r6,sp,1144
 80034e0:	80095c80 	call	80095c8 <__sprint_r>
 80034e4:	103dc326 	beq	r2,zero,8002bf4 <__alt_data_end+0xf8002bf4>
 80034e8:	003c9106 	br	8002730 <__alt_data_end+0xf8002730>
 80034ec:	d8c10dc4 	addi	r3,sp,1079
 80034f0:	a808d0fa 	srli	r4,r21,3
 80034f4:	b00a977a 	slli	r5,r22,29
 80034f8:	b02cd0fa 	srli	r22,r22,3
 80034fc:	ad4001cc 	andi	r21,r21,7
 8003500:	a8800c04 	addi	r2,r21,48
 8003504:	292ab03a 	or	r21,r5,r4
 8003508:	18800005 	stb	r2,0(r3)
 800350c:	ad88b03a 	or	r4,r21,r22
 8003510:	1821883a 	mov	r16,r3
 8003514:	18ffffc4 	addi	r3,r3,-1
 8003518:	203ff51e 	bne	r4,zero,80034f0 <__alt_data_end+0xf80034f0>
 800351c:	d9412a17 	ldw	r5,1192(sp)
 8003520:	2900004c 	andi	r4,r5,1
 8003524:	800b883a 	mov	r5,r16
 8003528:	203f1a26 	beq	r4,zero,8003194 <__alt_data_end+0xf8003194>
 800352c:	10803fcc 	andi	r2,r2,255
 8003530:	1080201c 	xori	r2,r2,128
 8003534:	10bfe004 	addi	r2,r2,-128
 8003538:	01000c04 	movi	r4,48
 800353c:	113f1526 	beq	r2,r4,8003194 <__alt_data_end+0xf8003194>
 8003540:	1821883a 	mov	r16,r3
 8003544:	d8c12917 	ldw	r3,1188(sp)
 8003548:	293fffc5 	stb	r4,-1(r5)
 800354c:	1c07c83a 	sub	r3,r3,r16
 8003550:	d8c12e15 	stw	r3,1208(sp)
 8003554:	003cbe06 	br	8002850 <__alt_data_end+0xf8002850>
 8003558:	d9012c17 	ldw	r4,1200(sp)
 800355c:	980b883a 	mov	r5,r19
 8003560:	d9811e04 	addi	r6,sp,1144
 8003564:	80095c80 	call	80095c8 <__sprint_r>
 8003568:	103c711e 	bne	r2,zero,8002730 <__alt_data_end+0xf8002730>
 800356c:	d8c12017 	ldw	r3,1152(sp)
 8003570:	da000404 	addi	r8,sp,16
 8003574:	003d5306 	br	8002ac4 <__alt_data_end+0xf8002ac4>
 8003578:	d9012c17 	ldw	r4,1200(sp)
 800357c:	980b883a 	mov	r5,r19
 8003580:	d9811e04 	addi	r6,sp,1144
 8003584:	80095c80 	call	80095c8 <__sprint_r>
 8003588:	103c691e 	bne	r2,zero,8002730 <__alt_data_end+0xf8002730>
 800358c:	d8c12017 	ldw	r3,1152(sp)
 8003590:	da000404 	addi	r8,sp,16
 8003594:	003d0a06 	br	80029c0 <__alt_data_end+0xf80029c0>
 8003598:	d9012c17 	ldw	r4,1200(sp)
 800359c:	980b883a 	mov	r5,r19
 80035a0:	d9811e04 	addi	r6,sp,1144
 80035a4:	80095c80 	call	80095c8 <__sprint_r>
 80035a8:	103c611e 	bne	r2,zero,8002730 <__alt_data_end+0xf8002730>
 80035ac:	d8c12017 	ldw	r3,1152(sp)
 80035b0:	da000404 	addi	r8,sp,16
 80035b4:	003d1006 	br	80029f8 <__alt_data_end+0xf80029f8>
 80035b8:	b000021e 	bne	r22,zero,80035c4 <___vfprintf_internal_r+0x1304>
 80035bc:	00800244 	movi	r2,9
 80035c0:	15401c2e 	bgeu	r2,r21,8003634 <___vfprintf_internal_r+0x1374>
 80035c4:	dc412b15 	stw	r17,1196(sp)
 80035c8:	d8810dc4 	addi	r2,sp,1079
 80035cc:	b023883a 	mov	r17,r22
 80035d0:	402d883a 	mov	r22,r8
 80035d4:	a809883a 	mov	r4,r21
 80035d8:	880b883a 	mov	r5,r17
 80035dc:	01800284 	movi	r6,10
 80035e0:	000f883a 	mov	r7,zero
 80035e4:	1021883a 	mov	r16,r2
 80035e8:	800bac00 	call	800bac0 <__umoddi3>
 80035ec:	10800c04 	addi	r2,r2,48
 80035f0:	a809883a 	mov	r4,r21
 80035f4:	880b883a 	mov	r5,r17
 80035f8:	80800005 	stb	r2,0(r16)
 80035fc:	01800284 	movi	r6,10
 8003600:	000f883a 	mov	r7,zero
 8003604:	800b46c0 	call	800b46c <__udivdi3>
 8003608:	1823883a 	mov	r17,r3
 800360c:	10c6b03a 	or	r3,r2,r3
 8003610:	102b883a 	mov	r21,r2
 8003614:	80bfffc4 	addi	r2,r16,-1
 8003618:	183fee1e 	bne	r3,zero,80035d4 <__alt_data_end+0xf80035d4>
 800361c:	d8c12917 	ldw	r3,1188(sp)
 8003620:	b011883a 	mov	r8,r22
 8003624:	dc412b17 	ldw	r17,1196(sp)
 8003628:	1c07c83a 	sub	r3,r3,r16
 800362c:	d8c12e15 	stw	r3,1208(sp)
 8003630:	003c8706 	br	8002850 <__alt_data_end+0xf8002850>
 8003634:	d9013d17 	ldw	r4,1268(sp)
 8003638:	ad400c04 	addi	r21,r21,48
 800363c:	dd410dc5 	stb	r21,1079(sp)
 8003640:	d9012e15 	stw	r4,1208(sp)
 8003644:	dc010dc4 	addi	r16,sp,1079
 8003648:	003c8106 	br	8002850 <__alt_data_end+0xf8002850>
 800364c:	d8012e15 	stw	zero,1208(sp)
 8003650:	dc010e04 	addi	r16,sp,1080
 8003654:	003c7e06 	br	8002850 <__alt_data_end+0xf8002850>
 8003658:	d8812617 	ldw	r2,1176(sp)
 800365c:	0081940e 	bge	zero,r2,8003cb0 <___vfprintf_internal_r+0x19f0>
 8003660:	d9413517 	ldw	r5,1236(sp)
 8003664:	d8813317 	ldw	r2,1228(sp)
 8003668:	8165883a 	add	r18,r16,r5
 800366c:	9429c83a 	sub	r20,r18,r16
 8003670:	1500010e 	bge	r2,r20,8003678 <___vfprintf_internal_r+0x13b8>
 8003674:	1029883a 	mov	r20,r2
 8003678:	05000a0e 	bge	zero,r20,80036a4 <___vfprintf_internal_r+0x13e4>
 800367c:	d8811f17 	ldw	r2,1148(sp)
 8003680:	1d07883a 	add	r3,r3,r20
 8003684:	44000015 	stw	r16,0(r8)
 8003688:	10800044 	addi	r2,r2,1
 800368c:	45000115 	stw	r20,4(r8)
 8003690:	d8c12015 	stw	r3,1152(sp)
 8003694:	d8811f15 	stw	r2,1148(sp)
 8003698:	010001c4 	movi	r4,7
 800369c:	20822b16 	blt	r4,r2,8003f4c <___vfprintf_internal_r+0x1c8c>
 80036a0:	42000204 	addi	r8,r8,8
 80036a4:	a0022716 	blt	r20,zero,8003f44 <___vfprintf_internal_r+0x1c84>
 80036a8:	d9013317 	ldw	r4,1228(sp)
 80036ac:	2529c83a 	sub	r20,r4,r20
 80036b0:	0500530e 	bge	zero,r20,8003800 <___vfprintf_internal_r+0x1540>
 80036b4:	05800404 	movi	r22,16
 80036b8:	d8811f17 	ldw	r2,1148(sp)
 80036bc:	05420074 	movhi	r21,2049
 80036c0:	ad465c84 	addi	r21,r21,6514
 80036c4:	b501680e 	bge	r22,r20,8003c68 <___vfprintf_internal_r+0x19a8>
 80036c8:	8809883a 	mov	r4,r17
 80036cc:	dc012e15 	stw	r16,1208(sp)
 80036d0:	a023883a 	mov	r17,r20
 80036d4:	070001c4 	movi	fp,7
 80036d8:	dc012c17 	ldw	r16,1200(sp)
 80036dc:	2029883a 	mov	r20,r4
 80036e0:	00000306 	br	80036f0 <___vfprintf_internal_r+0x1430>
 80036e4:	42000204 	addi	r8,r8,8
 80036e8:	8c7ffc04 	addi	r17,r17,-16
 80036ec:	b4415a0e 	bge	r22,r17,8003c58 <___vfprintf_internal_r+0x1998>
 80036f0:	18c00404 	addi	r3,r3,16
 80036f4:	10800044 	addi	r2,r2,1
 80036f8:	45c00015 	stw	r23,0(r8)
 80036fc:	45800115 	stw	r22,4(r8)
 8003700:	d8c12015 	stw	r3,1152(sp)
 8003704:	d8811f15 	stw	r2,1148(sp)
 8003708:	e0bff60e 	bge	fp,r2,80036e4 <__alt_data_end+0xf80036e4>
 800370c:	8009883a 	mov	r4,r16
 8003710:	980b883a 	mov	r5,r19
 8003714:	d9811e04 	addi	r6,sp,1144
 8003718:	80095c80 	call	80095c8 <__sprint_r>
 800371c:	103c041e 	bne	r2,zero,8002730 <__alt_data_end+0xf8002730>
 8003720:	d8c12017 	ldw	r3,1152(sp)
 8003724:	d8811f17 	ldw	r2,1148(sp)
 8003728:	da000404 	addi	r8,sp,16
 800372c:	003fee06 	br	80036e8 <__alt_data_end+0xf80036e8>
 8003730:	d9012c17 	ldw	r4,1200(sp)
 8003734:	980b883a 	mov	r5,r19
 8003738:	d9811e04 	addi	r6,sp,1144
 800373c:	80095c80 	call	80095c8 <__sprint_r>
 8003740:	103bfb1e 	bne	r2,zero,8002730 <__alt_data_end+0xf8002730>
 8003744:	d8c12017 	ldw	r3,1152(sp)
 8003748:	d8812787 	ldb	r2,1182(sp)
 800374c:	da000404 	addi	r8,sp,16
 8003750:	003c8e06 	br	800298c <__alt_data_end+0xf800298c>
 8003754:	d9413517 	ldw	r5,1236(sp)
 8003758:	2c3fffc4 	addi	r16,r5,-1
 800375c:	043f3c0e 	bge	zero,r16,8003450 <__alt_data_end+0xf8003450>
 8003760:	07000404 	movi	fp,16
 8003764:	05420074 	movhi	r21,2049
 8003768:	ad465c84 	addi	r21,r21,6514
 800376c:	e4007c0e 	bge	fp,r16,8003960 <___vfprintf_internal_r+0x16a0>
 8003770:	dc412e15 	stw	r17,1208(sp)
 8003774:	00c001c4 	movi	r3,7
 8003778:	8023883a 	mov	r17,r16
 800377c:	dc012c17 	ldw	r16,1200(sp)
 8003780:	00000306 	br	8003790 <___vfprintf_internal_r+0x14d0>
 8003784:	a5000204 	addi	r20,r20,8
 8003788:	8c7ffc04 	addi	r17,r17,-16
 800378c:	e440720e 	bge	fp,r17,8003958 <___vfprintf_internal_r+0x1698>
 8003790:	b5800404 	addi	r22,r22,16
 8003794:	94800044 	addi	r18,r18,1
 8003798:	a5c00015 	stw	r23,0(r20)
 800379c:	a7000115 	stw	fp,4(r20)
 80037a0:	dd812015 	stw	r22,1152(sp)
 80037a4:	dc811f15 	stw	r18,1148(sp)
 80037a8:	1cbff60e 	bge	r3,r18,8003784 <__alt_data_end+0xf8003784>
 80037ac:	8009883a 	mov	r4,r16
 80037b0:	980b883a 	mov	r5,r19
 80037b4:	d9811e04 	addi	r6,sp,1144
 80037b8:	d8c13e15 	stw	r3,1272(sp)
 80037bc:	80095c80 	call	80095c8 <__sprint_r>
 80037c0:	d8c13e17 	ldw	r3,1272(sp)
 80037c4:	103bda1e 	bne	r2,zero,8002730 <__alt_data_end+0xf8002730>
 80037c8:	dd812017 	ldw	r22,1152(sp)
 80037cc:	dc811f17 	ldw	r18,1148(sp)
 80037d0:	dd000404 	addi	r20,sp,16
 80037d4:	003fec06 	br	8003788 <__alt_data_end+0xf8003788>
 80037d8:	00c00084 	movi	r3,2
 80037dc:	ad84b03a 	or	r2,r21,r22
 80037e0:	003d5c06 	br	8002d54 <__alt_data_end+0xf8002d54>
 80037e4:	d9012c17 	ldw	r4,1200(sp)
 80037e8:	980b883a 	mov	r5,r19
 80037ec:	d9811e04 	addi	r6,sp,1144
 80037f0:	80095c80 	call	80095c8 <__sprint_r>
 80037f4:	103bce1e 	bne	r2,zero,8002730 <__alt_data_end+0xf8002730>
 80037f8:	d8c12017 	ldw	r3,1152(sp)
 80037fc:	da000404 	addi	r8,sp,16
 8003800:	d9413317 	ldw	r5,1228(sp)
 8003804:	d8812617 	ldw	r2,1176(sp)
 8003808:	d9013517 	ldw	r4,1236(sp)
 800380c:	8161883a 	add	r16,r16,r5
 8003810:	11000316 	blt	r2,r4,8003820 <___vfprintf_internal_r+0x1560>
 8003814:	d9412a17 	ldw	r5,1192(sp)
 8003818:	2900004c 	andi	r4,r5,1
 800381c:	20000d26 	beq	r4,zero,8003854 <___vfprintf_internal_r+0x1594>
 8003820:	d9013817 	ldw	r4,1248(sp)
 8003824:	d9413417 	ldw	r5,1232(sp)
 8003828:	1907883a 	add	r3,r3,r4
 800382c:	d9011f17 	ldw	r4,1148(sp)
 8003830:	41400015 	stw	r5,0(r8)
 8003834:	d9413817 	ldw	r5,1248(sp)
 8003838:	21000044 	addi	r4,r4,1
 800383c:	d8c12015 	stw	r3,1152(sp)
 8003840:	41400115 	stw	r5,4(r8)
 8003844:	d9011f15 	stw	r4,1148(sp)
 8003848:	014001c4 	movi	r5,7
 800384c:	2901c716 	blt	r5,r4,8003f6c <___vfprintf_internal_r+0x1cac>
 8003850:	42000204 	addi	r8,r8,8
 8003854:	d9013517 	ldw	r4,1236(sp)
 8003858:	9425c83a 	sub	r18,r18,r16
 800385c:	2085c83a 	sub	r2,r4,r2
 8003860:	1029883a 	mov	r20,r2
 8003864:	9080010e 	bge	r18,r2,800386c <___vfprintf_internal_r+0x15ac>
 8003868:	9029883a 	mov	r20,r18
 800386c:	05000a0e 	bge	zero,r20,8003898 <___vfprintf_internal_r+0x15d8>
 8003870:	d9011f17 	ldw	r4,1148(sp)
 8003874:	1d07883a 	add	r3,r3,r20
 8003878:	44000015 	stw	r16,0(r8)
 800387c:	21000044 	addi	r4,r4,1
 8003880:	45000115 	stw	r20,4(r8)
 8003884:	d8c12015 	stw	r3,1152(sp)
 8003888:	d9011f15 	stw	r4,1148(sp)
 800388c:	014001c4 	movi	r5,7
 8003890:	2901dd16 	blt	r5,r4,8004008 <___vfprintf_internal_r+0x1d48>
 8003894:	42000204 	addi	r8,r8,8
 8003898:	a001d916 	blt	r20,zero,8004000 <___vfprintf_internal_r+0x1d40>
 800389c:	1521c83a 	sub	r16,r2,r20
 80038a0:	043c970e 	bge	zero,r16,8002b00 <__alt_data_end+0xf8002b00>
 80038a4:	04800404 	movi	r18,16
 80038a8:	d8811f17 	ldw	r2,1148(sp)
 80038ac:	05420074 	movhi	r21,2049
 80038b0:	ad465c84 	addi	r21,r21,6514
 80038b4:	943e140e 	bge	r18,r16,8003108 <__alt_data_end+0xf8003108>
 80038b8:	050001c4 	movi	r20,7
 80038bc:	dd812c17 	ldw	r22,1200(sp)
 80038c0:	00000306 	br	80038d0 <___vfprintf_internal_r+0x1610>
 80038c4:	42000204 	addi	r8,r8,8
 80038c8:	843ffc04 	addi	r16,r16,-16
 80038cc:	943e0e0e 	bge	r18,r16,8003108 <__alt_data_end+0xf8003108>
 80038d0:	18c00404 	addi	r3,r3,16
 80038d4:	10800044 	addi	r2,r2,1
 80038d8:	45c00015 	stw	r23,0(r8)
 80038dc:	44800115 	stw	r18,4(r8)
 80038e0:	d8c12015 	stw	r3,1152(sp)
 80038e4:	d8811f15 	stw	r2,1148(sp)
 80038e8:	a0bff60e 	bge	r20,r2,80038c4 <__alt_data_end+0xf80038c4>
 80038ec:	b009883a 	mov	r4,r22
 80038f0:	980b883a 	mov	r5,r19
 80038f4:	d9811e04 	addi	r6,sp,1144
 80038f8:	80095c80 	call	80095c8 <__sprint_r>
 80038fc:	103b8c1e 	bne	r2,zero,8002730 <__alt_data_end+0xf8002730>
 8003900:	d8c12017 	ldw	r3,1152(sp)
 8003904:	d8811f17 	ldw	r2,1148(sp)
 8003908:	da000404 	addi	r8,sp,16
 800390c:	003fee06 	br	80038c8 <__alt_data_end+0xf80038c8>
 8003910:	d9012c17 	ldw	r4,1200(sp)
 8003914:	980b883a 	mov	r5,r19
 8003918:	d9811e04 	addi	r6,sp,1144
 800391c:	80095c80 	call	80095c8 <__sprint_r>
 8003920:	103b831e 	bne	r2,zero,8002730 <__alt_data_end+0xf8002730>
 8003924:	d8c12017 	ldw	r3,1152(sp)
 8003928:	dc811f17 	ldw	r18,1148(sp)
 800392c:	da000404 	addi	r8,sp,16
 8003930:	003eaa06 	br	80033dc <__alt_data_end+0xf80033dc>
 8003934:	d9012c17 	ldw	r4,1200(sp)
 8003938:	980b883a 	mov	r5,r19
 800393c:	d9811e04 	addi	r6,sp,1144
 8003940:	80095c80 	call	80095c8 <__sprint_r>
 8003944:	103b7a1e 	bne	r2,zero,8002730 <__alt_data_end+0xf8002730>
 8003948:	dd812017 	ldw	r22,1152(sp)
 800394c:	dc811f17 	ldw	r18,1148(sp)
 8003950:	dd000404 	addi	r20,sp,16
 8003954:	003eac06 	br	8003408 <__alt_data_end+0xf8003408>
 8003958:	8821883a 	mov	r16,r17
 800395c:	dc412e17 	ldw	r17,1208(sp)
 8003960:	b42d883a 	add	r22,r22,r16
 8003964:	94800044 	addi	r18,r18,1
 8003968:	a5400015 	stw	r21,0(r20)
 800396c:	a4000115 	stw	r16,4(r20)
 8003970:	dd812015 	stw	r22,1152(sp)
 8003974:	dc811f15 	stw	r18,1148(sp)
 8003978:	008001c4 	movi	r2,7
 800397c:	14beb30e 	bge	r2,r18,800344c <__alt_data_end+0xf800344c>
 8003980:	003ecb06 	br	80034b0 <__alt_data_end+0xf80034b0>
 8003984:	d9012c17 	ldw	r4,1200(sp)
 8003988:	980b883a 	mov	r5,r19
 800398c:	d9811e04 	addi	r6,sp,1144
 8003990:	80095c80 	call	80095c8 <__sprint_r>
 8003994:	103b661e 	bne	r2,zero,8002730 <__alt_data_end+0xf8002730>
 8003998:	d8c12017 	ldw	r3,1152(sp)
 800399c:	da000404 	addi	r8,sp,16
 80039a0:	003c1806 	br	8002a04 <__alt_data_end+0xf8002a04>
 80039a4:	056bc83a 	sub	r21,zero,r21
 80039a8:	a804c03a 	cmpne	r2,r21,zero
 80039ac:	05adc83a 	sub	r22,zero,r22
 80039b0:	07000b44 	movi	fp,45
 80039b4:	b0adc83a 	sub	r22,r22,r2
 80039b8:	df012785 	stb	fp,1182(sp)
 80039bc:	00c00044 	movi	r3,1
 80039c0:	ad84b03a 	or	r2,r21,r22
 80039c4:	003b9106 	br	800280c <__alt_data_end+0xf800280c>
 80039c8:	da013f15 	stw	r8,1276(sp)
 80039cc:	80092200 	call	8009220 <__fpclassifyd>
 80039d0:	da013f17 	ldw	r8,1276(sp)
 80039d4:	1000f226 	beq	r2,zero,8003da0 <___vfprintf_internal_r+0x1ae0>
 80039d8:	05bff7c4 	movi	r22,-33
 80039dc:	00bfffc4 	movi	r2,-1
 80039e0:	95ac703a 	and	r22,r18,r22
 80039e4:	a0820b26 	beq	r20,r2,8004214 <___vfprintf_internal_r+0x1f54>
 80039e8:	008011c4 	movi	r2,71
 80039ec:	b081fc26 	beq	r22,r2,80041e0 <___vfprintf_internal_r+0x1f20>
 80039f0:	d8c12a17 	ldw	r3,1192(sp)
 80039f4:	d9013917 	ldw	r4,1252(sp)
 80039f8:	18c04014 	ori	r3,r3,256
 80039fc:	d8c12d15 	stw	r3,1204(sp)
 8003a00:	20020616 	blt	r4,zero,800421c <___vfprintf_internal_r+0x1f5c>
 8003a04:	dd413917 	ldw	r21,1252(sp)
 8003a08:	d8012b05 	stb	zero,1196(sp)
 8003a0c:	00801984 	movi	r2,102
 8003a10:	9081a526 	beq	r18,r2,80040a8 <___vfprintf_internal_r+0x1de8>
 8003a14:	00801184 	movi	r2,70
 8003a18:	9081a326 	beq	r18,r2,80040a8 <___vfprintf_internal_r+0x1de8>
 8003a1c:	00801144 	movi	r2,69
 8003a20:	b0820226 	beq	r22,r2,800422c <___vfprintf_internal_r+0x1f6c>
 8003a24:	a039883a 	mov	fp,r20
 8003a28:	d8812604 	addi	r2,sp,1176
 8003a2c:	d8800115 	stw	r2,4(sp)
 8003a30:	d9012c17 	ldw	r4,1200(sp)
 8003a34:	d8812504 	addi	r2,sp,1172
 8003a38:	d9413717 	ldw	r5,1244(sp)
 8003a3c:	d8800215 	stw	r2,8(sp)
 8003a40:	d8812104 	addi	r2,sp,1156
 8003a44:	df000015 	stw	fp,0(sp)
 8003a48:	d8800315 	stw	r2,12(sp)
 8003a4c:	a80d883a 	mov	r6,r21
 8003a50:	01c00084 	movi	r7,2
 8003a54:	da013f15 	stw	r8,1276(sp)
 8003a58:	80047980 	call	8004798 <_dtoa_r>
 8003a5c:	1021883a 	mov	r16,r2
 8003a60:	008019c4 	movi	r2,103
 8003a64:	da013f17 	ldw	r8,1276(sp)
 8003a68:	90800226 	beq	r18,r2,8003a74 <___vfprintf_internal_r+0x17b4>
 8003a6c:	008011c4 	movi	r2,71
 8003a70:	9080031e 	bne	r18,r2,8003a80 <___vfprintf_internal_r+0x17c0>
 8003a74:	d9012a17 	ldw	r4,1192(sp)
 8003a78:	2080004c 	andi	r2,r4,1
 8003a7c:	1001fe26 	beq	r2,zero,8004278 <___vfprintf_internal_r+0x1fb8>
 8003a80:	00801184 	movi	r2,70
 8003a84:	8713883a 	add	r9,r16,fp
 8003a88:	b0819f26 	beq	r22,r2,8004108 <___vfprintf_internal_r+0x1e48>
 8003a8c:	d9013717 	ldw	r4,1244(sp)
 8003a90:	a80b883a 	mov	r5,r21
 8003a94:	000d883a 	mov	r6,zero
 8003a98:	000f883a 	mov	r7,zero
 8003a9c:	da013f15 	stw	r8,1276(sp)
 8003aa0:	da413e15 	stw	r9,1272(sp)
 8003aa4:	800d4480 	call	800d448 <__eqdf2>
 8003aa8:	da013f17 	ldw	r8,1276(sp)
 8003aac:	da413e17 	ldw	r9,1272(sp)
 8003ab0:	10017b26 	beq	r2,zero,80040a0 <___vfprintf_internal_r+0x1de0>
 8003ab4:	d8812117 	ldw	r2,1156(sp)
 8003ab8:	1240062e 	bgeu	r2,r9,8003ad4 <___vfprintf_internal_r+0x1814>
 8003abc:	01000c04 	movi	r4,48
 8003ac0:	10c00044 	addi	r3,r2,1
 8003ac4:	d8c12115 	stw	r3,1156(sp)
 8003ac8:	11000005 	stb	r4,0(r2)
 8003acc:	d8812117 	ldw	r2,1156(sp)
 8003ad0:	127ffb36 	bltu	r2,r9,8003ac0 <__alt_data_end+0xf8003ac0>
 8003ad4:	1405c83a 	sub	r2,r2,r16
 8003ad8:	d8813515 	stw	r2,1236(sp)
 8003adc:	008011c4 	movi	r2,71
 8003ae0:	b0816926 	beq	r22,r2,8004088 <___vfprintf_internal_r+0x1dc8>
 8003ae4:	00801944 	movi	r2,101
 8003ae8:	14823f0e 	bge	r2,r18,80043e8 <___vfprintf_internal_r+0x2128>
 8003aec:	d8c12617 	ldw	r3,1176(sp)
 8003af0:	00801984 	movi	r2,102
 8003af4:	d8c13315 	stw	r3,1228(sp)
 8003af8:	9081e126 	beq	r18,r2,8004280 <___vfprintf_internal_r+0x1fc0>
 8003afc:	d8c13317 	ldw	r3,1228(sp)
 8003b00:	d9013517 	ldw	r4,1236(sp)
 8003b04:	1901cb16 	blt	r3,r4,8004234 <___vfprintf_internal_r+0x1f74>
 8003b08:	d9412a17 	ldw	r5,1192(sp)
 8003b0c:	2880004c 	andi	r2,r5,1
 8003b10:	1001d11e 	bne	r2,zero,8004258 <___vfprintf_internal_r+0x1f98>
 8003b14:	1805883a 	mov	r2,r3
 8003b18:	18023116 	blt	r3,zero,80043e0 <___vfprintf_internal_r+0x2120>
 8003b1c:	d8c13317 	ldw	r3,1228(sp)
 8003b20:	048019c4 	movi	r18,103
 8003b24:	d8c12e15 	stw	r3,1208(sp)
 8003b28:	df012b07 	ldb	fp,1196(sp)
 8003b2c:	e0014e1e 	bne	fp,zero,8004068 <___vfprintf_internal_r+0x1da8>
 8003b30:	d8c12d17 	ldw	r3,1204(sp)
 8003b34:	df012783 	ldbu	fp,1182(sp)
 8003b38:	d8812b15 	stw	r2,1196(sp)
 8003b3c:	d8c12a15 	stw	r3,1192(sp)
 8003b40:	0029883a 	mov	r20,zero
 8003b44:	003b4706 	br	8002864 <__alt_data_end+0xf8002864>
 8003b48:	d8c12f17 	ldw	r3,1212(sp)
 8003b4c:	d9012f17 	ldw	r4,1212(sp)
 8003b50:	d9412f17 	ldw	r5,1212(sp)
 8003b54:	18c00017 	ldw	r3,0(r3)
 8003b58:	21000117 	ldw	r4,4(r4)
 8003b5c:	29400204 	addi	r5,r5,8
 8003b60:	d8c13715 	stw	r3,1244(sp)
 8003b64:	d9013915 	stw	r4,1252(sp)
 8003b68:	d9412f15 	stw	r5,1212(sp)
 8003b6c:	003c3606 	br	8002c48 <__alt_data_end+0xf8002c48>
 8003b70:	d9412a17 	ldw	r5,1192(sp)
 8003b74:	2880100c 	andi	r2,r5,64
 8003b78:	1000b026 	beq	r2,zero,8003e3c <___vfprintf_internal_r+0x1b7c>
 8003b7c:	d8812f17 	ldw	r2,1212(sp)
 8003b80:	002d883a 	mov	r22,zero
 8003b84:	00c00044 	movi	r3,1
 8003b88:	1540000b 	ldhu	r21,0(r2)
 8003b8c:	10800104 	addi	r2,r2,4
 8003b90:	d8812f15 	stw	r2,1212(sp)
 8003b94:	a805883a 	mov	r2,r21
 8003b98:	003c6e06 	br	8002d54 <__alt_data_end+0xf8002d54>
 8003b9c:	00c00084 	movi	r3,2
 8003ba0:	003c6c06 	br	8002d54 <__alt_data_end+0xf8002d54>
 8003ba4:	d9412a17 	ldw	r5,1192(sp)
 8003ba8:	2880100c 	andi	r2,r5,64
 8003bac:	10009b26 	beq	r2,zero,8003e1c <___vfprintf_internal_r+0x1b5c>
 8003bb0:	d8812f17 	ldw	r2,1212(sp)
 8003bb4:	002d883a 	mov	r22,zero
 8003bb8:	0007883a 	mov	r3,zero
 8003bbc:	1540000b 	ldhu	r21,0(r2)
 8003bc0:	10800104 	addi	r2,r2,4
 8003bc4:	d8812f15 	stw	r2,1212(sp)
 8003bc8:	a805883a 	mov	r2,r21
 8003bcc:	003c6106 	br	8002d54 <__alt_data_end+0xf8002d54>
 8003bd0:	8c800007 	ldb	r18,0(r17)
 8003bd4:	003a1f06 	br	8002454 <__alt_data_end+0xf8002454>
 8003bd8:	d9412a17 	ldw	r5,1192(sp)
 8003bdc:	2880100c 	andi	r2,r5,64
 8003be0:	10009e26 	beq	r2,zero,8003e5c <___vfprintf_internal_r+0x1b9c>
 8003be4:	d8812f17 	ldw	r2,1212(sp)
 8003be8:	002d883a 	mov	r22,zero
 8003bec:	1540000b 	ldhu	r21,0(r2)
 8003bf0:	10800104 	addi	r2,r2,4
 8003bf4:	d8812f15 	stw	r2,1212(sp)
 8003bf8:	003c9506 	br	8002e50 <__alt_data_end+0xf8002e50>
 8003bfc:	d9412a17 	ldw	r5,1192(sp)
 8003c00:	2880040c 	andi	r2,r5,16
 8003c04:	10007e1e 	bne	r2,zero,8003e00 <___vfprintf_internal_r+0x1b40>
 8003c08:	d9412a17 	ldw	r5,1192(sp)
 8003c0c:	2880100c 	andi	r2,r5,64
 8003c10:	10010826 	beq	r2,zero,8004034 <___vfprintf_internal_r+0x1d74>
 8003c14:	d8c12f17 	ldw	r3,1212(sp)
 8003c18:	d9013117 	ldw	r4,1220(sp)
 8003c1c:	18800017 	ldw	r2,0(r3)
 8003c20:	18c00104 	addi	r3,r3,4
 8003c24:	d8c12f15 	stw	r3,1212(sp)
 8003c28:	1100000d 	sth	r4,0(r2)
 8003c2c:	0039e206 	br	80023b8 <__alt_data_end+0xf80023b8>
 8003c30:	d8c12a17 	ldw	r3,1192(sp)
 8003c34:	1880100c 	andi	r2,r3,64
 8003c38:	10006a26 	beq	r2,zero,8003de4 <___vfprintf_internal_r+0x1b24>
 8003c3c:	d9012f17 	ldw	r4,1212(sp)
 8003c40:	2540000f 	ldh	r21,0(r4)
 8003c44:	21000104 	addi	r4,r4,4
 8003c48:	d9012f15 	stw	r4,1212(sp)
 8003c4c:	a82dd7fa 	srai	r22,r21,31
 8003c50:	b005883a 	mov	r2,r22
 8003c54:	003ae906 	br	80027fc <__alt_data_end+0xf80027fc>
 8003c58:	dc012e17 	ldw	r16,1208(sp)
 8003c5c:	a009883a 	mov	r4,r20
 8003c60:	8829883a 	mov	r20,r17
 8003c64:	2023883a 	mov	r17,r4
 8003c68:	1d07883a 	add	r3,r3,r20
 8003c6c:	10800044 	addi	r2,r2,1
 8003c70:	45400015 	stw	r21,0(r8)
 8003c74:	45000115 	stw	r20,4(r8)
 8003c78:	d8c12015 	stw	r3,1152(sp)
 8003c7c:	d8811f15 	stw	r2,1148(sp)
 8003c80:	010001c4 	movi	r4,7
 8003c84:	20bed716 	blt	r4,r2,80037e4 <__alt_data_end+0xf80037e4>
 8003c88:	42000204 	addi	r8,r8,8
 8003c8c:	003edc06 	br	8003800 <__alt_data_end+0xf8003800>
 8003c90:	d9012c17 	ldw	r4,1200(sp)
 8003c94:	980b883a 	mov	r5,r19
 8003c98:	d9811e04 	addi	r6,sp,1144
 8003c9c:	80095c80 	call	80095c8 <__sprint_r>
 8003ca0:	103aa31e 	bne	r2,zero,8002730 <__alt_data_end+0xf8002730>
 8003ca4:	d8c12017 	ldw	r3,1152(sp)
 8003ca8:	da000404 	addi	r8,sp,16
 8003cac:	003d5606 	br	8003208 <__alt_data_end+0xf8003208>
 8003cb0:	d9011f17 	ldw	r4,1148(sp)
 8003cb4:	01420074 	movhi	r5,2049
 8003cb8:	29465c04 	addi	r5,r5,6512
 8003cbc:	18c00044 	addi	r3,r3,1
 8003cc0:	21000044 	addi	r4,r4,1
 8003cc4:	41400015 	stw	r5,0(r8)
 8003cc8:	01400044 	movi	r5,1
 8003ccc:	41400115 	stw	r5,4(r8)
 8003cd0:	d8c12015 	stw	r3,1152(sp)
 8003cd4:	d9011f15 	stw	r4,1148(sp)
 8003cd8:	014001c4 	movi	r5,7
 8003cdc:	29006a16 	blt	r5,r4,8003e88 <___vfprintf_internal_r+0x1bc8>
 8003ce0:	42000204 	addi	r8,r8,8
 8003ce4:	1025883a 	mov	r18,r2
 8003ce8:	9000051e 	bne	r18,zero,8003d00 <___vfprintf_internal_r+0x1a40>
 8003cec:	d8813517 	ldw	r2,1236(sp)
 8003cf0:	1000031e 	bne	r2,zero,8003d00 <___vfprintf_internal_r+0x1a40>
 8003cf4:	d9012a17 	ldw	r4,1192(sp)
 8003cf8:	2080004c 	andi	r2,r4,1
 8003cfc:	103b8026 	beq	r2,zero,8002b00 <__alt_data_end+0xf8002b00>
 8003d00:	d8813417 	ldw	r2,1232(sp)
 8003d04:	d9413817 	ldw	r5,1248(sp)
 8003d08:	010001c4 	movi	r4,7
 8003d0c:	40800015 	stw	r2,0(r8)
 8003d10:	d8811f17 	ldw	r2,1148(sp)
 8003d14:	1947883a 	add	r3,r3,r5
 8003d18:	41400115 	stw	r5,4(r8)
 8003d1c:	10800044 	addi	r2,r2,1
 8003d20:	d8c12015 	stw	r3,1152(sp)
 8003d24:	d8811f15 	stw	r2,1148(sp)
 8003d28:	20813016 	blt	r4,r2,80041ec <___vfprintf_internal_r+0x1f2c>
 8003d2c:	42000204 	addi	r8,r8,8
 8003d30:	04a5c83a 	sub	r18,zero,r18
 8003d34:	04807a0e 	bge	zero,r18,8003f20 <___vfprintf_internal_r+0x1c60>
 8003d38:	05000404 	movi	r20,16
 8003d3c:	05420074 	movhi	r21,2049
 8003d40:	ad465c84 	addi	r21,r21,6514
 8003d44:	a480920e 	bge	r20,r18,8003f90 <___vfprintf_internal_r+0x1cd0>
 8003d48:	058001c4 	movi	r22,7
 8003d4c:	df012c17 	ldw	fp,1200(sp)
 8003d50:	00000306 	br	8003d60 <___vfprintf_internal_r+0x1aa0>
 8003d54:	42000204 	addi	r8,r8,8
 8003d58:	94bffc04 	addi	r18,r18,-16
 8003d5c:	a4808c0e 	bge	r20,r18,8003f90 <___vfprintf_internal_r+0x1cd0>
 8003d60:	18c00404 	addi	r3,r3,16
 8003d64:	10800044 	addi	r2,r2,1
 8003d68:	45c00015 	stw	r23,0(r8)
 8003d6c:	45000115 	stw	r20,4(r8)
 8003d70:	d8c12015 	stw	r3,1152(sp)
 8003d74:	d8811f15 	stw	r2,1148(sp)
 8003d78:	b0bff60e 	bge	r22,r2,8003d54 <__alt_data_end+0xf8003d54>
 8003d7c:	e009883a 	mov	r4,fp
 8003d80:	980b883a 	mov	r5,r19
 8003d84:	d9811e04 	addi	r6,sp,1144
 8003d88:	80095c80 	call	80095c8 <__sprint_r>
 8003d8c:	103a681e 	bne	r2,zero,8002730 <__alt_data_end+0xf8002730>
 8003d90:	d8c12017 	ldw	r3,1152(sp)
 8003d94:	d8811f17 	ldw	r2,1148(sp)
 8003d98:	da000404 	addi	r8,sp,16
 8003d9c:	003fee06 	br	8003d58 <__alt_data_end+0xf8003d58>
 8003da0:	008011c4 	movi	r2,71
 8003da4:	1480ad16 	blt	r2,r18,800405c <___vfprintf_internal_r+0x1d9c>
 8003da8:	04020074 	movhi	r16,2049
 8003dac:	84064e04 	addi	r16,r16,6456
 8003db0:	d9012a17 	ldw	r4,1192(sp)
 8003db4:	00bfdfc4 	movi	r2,-129
 8003db8:	00c000c4 	movi	r3,3
 8003dbc:	2088703a 	and	r4,r4,r2
 8003dc0:	d8c12b15 	stw	r3,1196(sp)
 8003dc4:	d9012a15 	stw	r4,1192(sp)
 8003dc8:	df012783 	ldbu	fp,1182(sp)
 8003dcc:	d8c12e15 	stw	r3,1208(sp)
 8003dd0:	0029883a 	mov	r20,zero
 8003dd4:	d8013315 	stw	zero,1228(sp)
 8003dd8:	003aa206 	br	8002864 <__alt_data_end+0xf8002864>
 8003ddc:	dd012e15 	stw	r20,1208(sp)
 8003de0:	003c8206 	br	8002fec <__alt_data_end+0xf8002fec>
 8003de4:	d9412f17 	ldw	r5,1212(sp)
 8003de8:	2d400017 	ldw	r21,0(r5)
 8003dec:	29400104 	addi	r5,r5,4
 8003df0:	d9412f15 	stw	r5,1212(sp)
 8003df4:	a82dd7fa 	srai	r22,r21,31
 8003df8:	b005883a 	mov	r2,r22
 8003dfc:	003a7f06 	br	80027fc <__alt_data_end+0xf80027fc>
 8003e00:	d8c12f17 	ldw	r3,1212(sp)
 8003e04:	d9013117 	ldw	r4,1220(sp)
 8003e08:	18800017 	ldw	r2,0(r3)
 8003e0c:	18c00104 	addi	r3,r3,4
 8003e10:	d8c12f15 	stw	r3,1212(sp)
 8003e14:	11000015 	stw	r4,0(r2)
 8003e18:	00396706 	br	80023b8 <__alt_data_end+0xf80023b8>
 8003e1c:	d8c12f17 	ldw	r3,1212(sp)
 8003e20:	002d883a 	mov	r22,zero
 8003e24:	1d400017 	ldw	r21,0(r3)
 8003e28:	18c00104 	addi	r3,r3,4
 8003e2c:	d8c12f15 	stw	r3,1212(sp)
 8003e30:	a805883a 	mov	r2,r21
 8003e34:	0007883a 	mov	r3,zero
 8003e38:	003bc606 	br	8002d54 <__alt_data_end+0xf8002d54>
 8003e3c:	d8c12f17 	ldw	r3,1212(sp)
 8003e40:	002d883a 	mov	r22,zero
 8003e44:	1d400017 	ldw	r21,0(r3)
 8003e48:	18c00104 	addi	r3,r3,4
 8003e4c:	d8c12f15 	stw	r3,1212(sp)
 8003e50:	a805883a 	mov	r2,r21
 8003e54:	00c00044 	movi	r3,1
 8003e58:	003bbe06 	br	8002d54 <__alt_data_end+0xf8002d54>
 8003e5c:	d8c12f17 	ldw	r3,1212(sp)
 8003e60:	002d883a 	mov	r22,zero
 8003e64:	1d400017 	ldw	r21,0(r3)
 8003e68:	18c00104 	addi	r3,r3,4
 8003e6c:	d8c12f15 	stw	r3,1212(sp)
 8003e70:	003bf706 	br	8002e50 <__alt_data_end+0xf8002e50>
 8003e74:	04020074 	movhi	r16,2049
 8003e78:	84064c04 	addi	r16,r16,6448
 8003e7c:	003b8506 	br	8002c94 <__alt_data_end+0xf8002c94>
 8003e80:	45000204 	addi	r20,r8,8
 8003e84:	003d7206 	br	8003450 <__alt_data_end+0xf8003450>
 8003e88:	d9012c17 	ldw	r4,1200(sp)
 8003e8c:	980b883a 	mov	r5,r19
 8003e90:	d9811e04 	addi	r6,sp,1144
 8003e94:	80095c80 	call	80095c8 <__sprint_r>
 8003e98:	103a251e 	bne	r2,zero,8002730 <__alt_data_end+0xf8002730>
 8003e9c:	dc812617 	ldw	r18,1176(sp)
 8003ea0:	d8c12017 	ldw	r3,1152(sp)
 8003ea4:	da000404 	addi	r8,sp,16
 8003ea8:	003f8f06 	br	8003ce8 <__alt_data_end+0xf8003ce8>
 8003eac:	d9012a17 	ldw	r4,1192(sp)
 8003eb0:	8c400044 	addi	r17,r17,1
 8003eb4:	14800047 	ldb	r18,1(r2)
 8003eb8:	21000814 	ori	r4,r4,32
 8003ebc:	d9012a15 	stw	r4,1192(sp)
 8003ec0:	00396406 	br	8002454 <__alt_data_end+0xf8002454>
 8003ec4:	d9012c17 	ldw	r4,1200(sp)
 8003ec8:	980b883a 	mov	r5,r19
 8003ecc:	d9811e04 	addi	r6,sp,1144
 8003ed0:	80095c80 	call	80095c8 <__sprint_r>
 8003ed4:	103a161e 	bne	r2,zero,8002730 <__alt_data_end+0xf8002730>
 8003ed8:	d8c12017 	ldw	r3,1152(sp)
 8003edc:	da000404 	addi	r8,sp,16
 8003ee0:	003cdc06 	br	8003254 <__alt_data_end+0xf8003254>
 8003ee4:	df013f15 	stw	fp,1276(sp)
 8003ee8:	80022340 	call	8002234 <strlen>
 8003eec:	d8812e15 	stw	r2,1208(sp)
 8003ef0:	da013f17 	ldw	r8,1276(sp)
 8003ef4:	103c3f0e 	bge	r2,zero,8002ff4 <__alt_data_end+0xf8002ff4>
 8003ef8:	0005883a 	mov	r2,zero
 8003efc:	003c3d06 	br	8002ff4 <__alt_data_end+0xf8002ff4>
 8003f00:	d9012c17 	ldw	r4,1200(sp)
 8003f04:	980b883a 	mov	r5,r19
 8003f08:	d9811e04 	addi	r6,sp,1144
 8003f0c:	80095c80 	call	80095c8 <__sprint_r>
 8003f10:	103a071e 	bne	r2,zero,8002730 <__alt_data_end+0xf8002730>
 8003f14:	d8c12017 	ldw	r3,1152(sp)
 8003f18:	d8811f17 	ldw	r2,1148(sp)
 8003f1c:	da000404 	addi	r8,sp,16
 8003f20:	d9013517 	ldw	r4,1236(sp)
 8003f24:	10800044 	addi	r2,r2,1
 8003f28:	44000015 	stw	r16,0(r8)
 8003f2c:	20c7883a 	add	r3,r4,r3
 8003f30:	003aed06 	br	8002ae8 <__alt_data_end+0xf8002ae8>
 8003f34:	01020074 	movhi	r4,2049
 8003f38:	21066084 	addi	r4,r4,6530
 8003f3c:	d9013615 	stw	r4,1240(sp)
 8003f40:	003a8706 	br	8002960 <__alt_data_end+0xf8002960>
 8003f44:	0029883a 	mov	r20,zero
 8003f48:	003dd706 	br	80036a8 <__alt_data_end+0xf80036a8>
 8003f4c:	d9012c17 	ldw	r4,1200(sp)
 8003f50:	980b883a 	mov	r5,r19
 8003f54:	d9811e04 	addi	r6,sp,1144
 8003f58:	80095c80 	call	80095c8 <__sprint_r>
 8003f5c:	1039f41e 	bne	r2,zero,8002730 <__alt_data_end+0xf8002730>
 8003f60:	d8c12017 	ldw	r3,1152(sp)
 8003f64:	da000404 	addi	r8,sp,16
 8003f68:	003dce06 	br	80036a4 <__alt_data_end+0xf80036a4>
 8003f6c:	d9012c17 	ldw	r4,1200(sp)
 8003f70:	980b883a 	mov	r5,r19
 8003f74:	d9811e04 	addi	r6,sp,1144
 8003f78:	80095c80 	call	80095c8 <__sprint_r>
 8003f7c:	1039ec1e 	bne	r2,zero,8002730 <__alt_data_end+0xf8002730>
 8003f80:	d8812617 	ldw	r2,1176(sp)
 8003f84:	d8c12017 	ldw	r3,1152(sp)
 8003f88:	da000404 	addi	r8,sp,16
 8003f8c:	003e3106 	br	8003854 <__alt_data_end+0xf8003854>
 8003f90:	1c87883a 	add	r3,r3,r18
 8003f94:	10800044 	addi	r2,r2,1
 8003f98:	45400015 	stw	r21,0(r8)
 8003f9c:	44800115 	stw	r18,4(r8)
 8003fa0:	d8c12015 	stw	r3,1152(sp)
 8003fa4:	d8811f15 	stw	r2,1148(sp)
 8003fa8:	010001c4 	movi	r4,7
 8003fac:	20bfd416 	blt	r4,r2,8003f00 <__alt_data_end+0xf8003f00>
 8003fb0:	42000204 	addi	r8,r8,8
 8003fb4:	003fda06 	br	8003f20 <__alt_data_end+0xf8003f20>
 8003fb8:	01420074 	movhi	r5,2049
 8003fbc:	29466084 	addi	r5,r5,6530
 8003fc0:	d9413615 	stw	r5,1240(sp)
 8003fc4:	003af406 	br	8002b98 <__alt_data_end+0xf8002b98>
 8003fc8:	00800184 	movi	r2,6
 8003fcc:	1500012e 	bgeu	r2,r20,8003fd4 <___vfprintf_internal_r+0x1d14>
 8003fd0:	1029883a 	mov	r20,r2
 8003fd4:	dd012e15 	stw	r20,1208(sp)
 8003fd8:	a005883a 	mov	r2,r20
 8003fdc:	a000d216 	blt	r20,zero,8004328 <___vfprintf_internal_r+0x2068>
 8003fe0:	d8812b15 	stw	r2,1196(sp)
 8003fe4:	dd412f15 	stw	r21,1212(sp)
 8003fe8:	0029883a 	mov	r20,zero
 8003fec:	d8013315 	stw	zero,1228(sp)
 8003ff0:	04020074 	movhi	r16,2049
 8003ff4:	84065a04 	addi	r16,r16,6504
 8003ff8:	0005883a 	mov	r2,zero
 8003ffc:	003a2006 	br	8002880 <__alt_data_end+0xf8002880>
 8004000:	0029883a 	mov	r20,zero
 8004004:	003e2506 	br	800389c <__alt_data_end+0xf800389c>
 8004008:	d9012c17 	ldw	r4,1200(sp)
 800400c:	980b883a 	mov	r5,r19
 8004010:	d9811e04 	addi	r6,sp,1144
 8004014:	80095c80 	call	80095c8 <__sprint_r>
 8004018:	1039c51e 	bne	r2,zero,8002730 <__alt_data_end+0xf8002730>
 800401c:	d8812617 	ldw	r2,1176(sp)
 8004020:	d9413517 	ldw	r5,1236(sp)
 8004024:	d8c12017 	ldw	r3,1152(sp)
 8004028:	da000404 	addi	r8,sp,16
 800402c:	2885c83a 	sub	r2,r5,r2
 8004030:	003e1906 	br	8003898 <__alt_data_end+0xf8003898>
 8004034:	d9412f17 	ldw	r5,1212(sp)
 8004038:	d8c13117 	ldw	r3,1220(sp)
 800403c:	28800017 	ldw	r2,0(r5)
 8004040:	29400104 	addi	r5,r5,4
 8004044:	d9412f15 	stw	r5,1212(sp)
 8004048:	10c00015 	stw	r3,0(r2)
 800404c:	0038da06 	br	80023b8 <__alt_data_end+0xf80023b8>
 8004050:	07000b44 	movi	fp,45
 8004054:	df012785 	stb	fp,1182(sp)
 8004058:	003b0a06 	br	8002c84 <__alt_data_end+0xf8002c84>
 800405c:	04020074 	movhi	r16,2049
 8004060:	84064f04 	addi	r16,r16,6460
 8004064:	003f5206 	br	8003db0 <__alt_data_end+0xf8003db0>
 8004068:	00c00b44 	movi	r3,45
 800406c:	d8c12785 	stb	r3,1182(sp)
 8004070:	d8c12d17 	ldw	r3,1204(sp)
 8004074:	d8812b15 	stw	r2,1196(sp)
 8004078:	0029883a 	mov	r20,zero
 800407c:	d8c12a15 	stw	r3,1192(sp)
 8004080:	00800b44 	movi	r2,45
 8004084:	0039fb06 	br	8002874 <__alt_data_end+0xf8002874>
 8004088:	d8812617 	ldw	r2,1176(sp)
 800408c:	00ffff44 	movi	r3,-3
 8004090:	10c03216 	blt	r2,r3,800415c <___vfprintf_internal_r+0x1e9c>
 8004094:	a0803116 	blt	r20,r2,800415c <___vfprintf_internal_r+0x1e9c>
 8004098:	d8813315 	stw	r2,1228(sp)
 800409c:	003e9706 	br	8003afc <__alt_data_end+0xf8003afc>
 80040a0:	4805883a 	mov	r2,r9
 80040a4:	003e8b06 	br	8003ad4 <__alt_data_end+0xf8003ad4>
 80040a8:	d8812604 	addi	r2,sp,1176
 80040ac:	d8800115 	stw	r2,4(sp)
 80040b0:	d9012c17 	ldw	r4,1200(sp)
 80040b4:	d8812504 	addi	r2,sp,1172
 80040b8:	d9413717 	ldw	r5,1244(sp)
 80040bc:	d8800215 	stw	r2,8(sp)
 80040c0:	d8812104 	addi	r2,sp,1156
 80040c4:	dd000015 	stw	r20,0(sp)
 80040c8:	d8800315 	stw	r2,12(sp)
 80040cc:	a80d883a 	mov	r6,r21
 80040d0:	01c000c4 	movi	r7,3
 80040d4:	da013f15 	stw	r8,1276(sp)
 80040d8:	80047980 	call	8004798 <_dtoa_r>
 80040dc:	1021883a 	mov	r16,r2
 80040e0:	a039883a 	mov	fp,r20
 80040e4:	da013f17 	ldw	r8,1276(sp)
 80040e8:	003e6506 	br	8003a80 <__alt_data_end+0xf8003a80>
 80040ec:	dd012b15 	stw	r20,1196(sp)
 80040f0:	dd012e15 	stw	r20,1208(sp)
 80040f4:	df012783 	ldbu	fp,1182(sp)
 80040f8:	dd412f15 	stw	r21,1212(sp)
 80040fc:	0029883a 	mov	r20,zero
 8004100:	d8013315 	stw	zero,1228(sp)
 8004104:	0039d706 	br	8002864 <__alt_data_end+0xf8002864>
 8004108:	81000007 	ldb	r4,0(r16)
 800410c:	00800c04 	movi	r2,48
 8004110:	20800326 	beq	r4,r2,8004120 <___vfprintf_internal_r+0x1e60>
 8004114:	d8c12617 	ldw	r3,1176(sp)
 8004118:	48d3883a 	add	r9,r9,r3
 800411c:	003e5b06 	br	8003a8c <__alt_data_end+0xf8003a8c>
 8004120:	d9013717 	ldw	r4,1244(sp)
 8004124:	a80b883a 	mov	r5,r21
 8004128:	000d883a 	mov	r6,zero
 800412c:	000f883a 	mov	r7,zero
 8004130:	da013f15 	stw	r8,1276(sp)
 8004134:	da413e15 	stw	r9,1272(sp)
 8004138:	800d4480 	call	800d448 <__eqdf2>
 800413c:	da013f17 	ldw	r8,1276(sp)
 8004140:	da413e17 	ldw	r9,1272(sp)
 8004144:	103ff326 	beq	r2,zero,8004114 <__alt_data_end+0xf8004114>
 8004148:	00800044 	movi	r2,1
 800414c:	1707c83a 	sub	r3,r2,fp
 8004150:	d8c12615 	stw	r3,1176(sp)
 8004154:	48d3883a 	add	r9,r9,r3
 8004158:	003e4c06 	br	8003a8c <__alt_data_end+0xf8003a8c>
 800415c:	94bfff84 	addi	r18,r18,-2
 8004160:	157fffc4 	addi	r21,r2,-1
 8004164:	dd412615 	stw	r21,1176(sp)
 8004168:	dc8122c5 	stb	r18,1163(sp)
 800416c:	a8009016 	blt	r21,zero,80043b0 <___vfprintf_internal_r+0x20f0>
 8004170:	00800ac4 	movi	r2,43
 8004174:	d8812305 	stb	r2,1164(sp)
 8004178:	05000244 	movi	r20,9
 800417c:	a5404a16 	blt	r20,r21,80042a8 <___vfprintf_internal_r+0x1fe8>
 8004180:	00800c04 	movi	r2,48
 8004184:	ad400c04 	addi	r21,r21,48
 8004188:	d8812345 	stb	r2,1165(sp)
 800418c:	dd412385 	stb	r21,1166(sp)
 8004190:	d8c123c4 	addi	r3,sp,1167
 8004194:	d88122c4 	addi	r2,sp,1163
 8004198:	1885c83a 	sub	r2,r3,r2
 800419c:	d8c13517 	ldw	r3,1236(sp)
 80041a0:	d9013517 	ldw	r4,1236(sp)
 80041a4:	d8813a15 	stw	r2,1256(sp)
 80041a8:	1887883a 	add	r3,r3,r2
 80041ac:	d8c12e15 	stw	r3,1208(sp)
 80041b0:	00800044 	movi	r2,1
 80041b4:	11007a0e 	bge	r2,r4,80043a0 <___vfprintf_internal_r+0x20e0>
 80041b8:	d8c12e17 	ldw	r3,1208(sp)
 80041bc:	18c00044 	addi	r3,r3,1
 80041c0:	d8c12e15 	stw	r3,1208(sp)
 80041c4:	1805883a 	mov	r2,r3
 80041c8:	18000216 	blt	r3,zero,80041d4 <___vfprintf_internal_r+0x1f14>
 80041cc:	d8013315 	stw	zero,1228(sp)
 80041d0:	003e5506 	br	8003b28 <__alt_data_end+0xf8003b28>
 80041d4:	0005883a 	mov	r2,zero
 80041d8:	d8013315 	stw	zero,1228(sp)
 80041dc:	003e5206 	br	8003b28 <__alt_data_end+0xf8003b28>
 80041e0:	a03e031e 	bne	r20,zero,80039f0 <__alt_data_end+0xf80039f0>
 80041e4:	8029883a 	mov	r20,r16
 80041e8:	003e0106 	br	80039f0 <__alt_data_end+0xf80039f0>
 80041ec:	d9012c17 	ldw	r4,1200(sp)
 80041f0:	980b883a 	mov	r5,r19
 80041f4:	d9811e04 	addi	r6,sp,1144
 80041f8:	80095c80 	call	80095c8 <__sprint_r>
 80041fc:	10394c1e 	bne	r2,zero,8002730 <__alt_data_end+0xf8002730>
 8004200:	dc812617 	ldw	r18,1176(sp)
 8004204:	d8c12017 	ldw	r3,1152(sp)
 8004208:	d8811f17 	ldw	r2,1148(sp)
 800420c:	da000404 	addi	r8,sp,16
 8004210:	003ec706 	br	8003d30 <__alt_data_end+0xf8003d30>
 8004214:	05000184 	movi	r20,6
 8004218:	003df506 	br	80039f0 <__alt_data_end+0xf80039f0>
 800421c:	00c00b44 	movi	r3,45
 8004220:	2560003c 	xorhi	r21,r4,32768
 8004224:	d8c12b05 	stb	r3,1196(sp)
 8004228:	003df806 	br	8003a0c <__alt_data_end+0xf8003a0c>
 800422c:	a7000044 	addi	fp,r20,1
 8004230:	003dfd06 	br	8003a28 <__alt_data_end+0xf8003a28>
 8004234:	d8c13317 	ldw	r3,1228(sp)
 8004238:	00c0610e 	bge	zero,r3,80043c0 <___vfprintf_internal_r+0x2100>
 800423c:	00800044 	movi	r2,1
 8004240:	d9013517 	ldw	r4,1236(sp)
 8004244:	1105883a 	add	r2,r2,r4
 8004248:	d8812e15 	stw	r2,1208(sp)
 800424c:	10000716 	blt	r2,zero,800426c <___vfprintf_internal_r+0x1fac>
 8004250:	048019c4 	movi	r18,103
 8004254:	003e3406 	br	8003b28 <__alt_data_end+0xf8003b28>
 8004258:	d8c13317 	ldw	r3,1228(sp)
 800425c:	18c00044 	addi	r3,r3,1
 8004260:	d8c12e15 	stw	r3,1208(sp)
 8004264:	1805883a 	mov	r2,r3
 8004268:	183ff90e 	bge	r3,zero,8004250 <__alt_data_end+0xf8004250>
 800426c:	0005883a 	mov	r2,zero
 8004270:	048019c4 	movi	r18,103
 8004274:	003e2c06 	br	8003b28 <__alt_data_end+0xf8003b28>
 8004278:	d8812117 	ldw	r2,1156(sp)
 800427c:	003e1506 	br	8003ad4 <__alt_data_end+0xf8003ad4>
 8004280:	00c0400e 	bge	zero,r3,8004384 <___vfprintf_internal_r+0x20c4>
 8004284:	a0002a1e 	bne	r20,zero,8004330 <___vfprintf_internal_r+0x2070>
 8004288:	d9012a17 	ldw	r4,1192(sp)
 800428c:	2080004c 	andi	r2,r4,1
 8004290:	1000271e 	bne	r2,zero,8004330 <___vfprintf_internal_r+0x2070>
 8004294:	1805883a 	mov	r2,r3
 8004298:	18005a16 	blt	r3,zero,8004404 <___vfprintf_internal_r+0x2144>
 800429c:	d8c13317 	ldw	r3,1228(sp)
 80042a0:	d8c12e15 	stw	r3,1208(sp)
 80042a4:	003e2006 	br	8003b28 <__alt_data_end+0xf8003b28>
 80042a8:	d8c12284 	addi	r3,sp,1162
 80042ac:	4039883a 	mov	fp,r8
 80042b0:	a809883a 	mov	r4,r21
 80042b4:	01400284 	movi	r5,10
 80042b8:	182d883a 	mov	r22,r3
 80042bc:	800c1ac0 	call	800c1ac <__modsi3>
 80042c0:	10800c04 	addi	r2,r2,48
 80042c4:	a809883a 	mov	r4,r21
 80042c8:	b0800005 	stb	r2,0(r22)
 80042cc:	01400284 	movi	r5,10
 80042d0:	800c1640 	call	800c164 <__divsi3>
 80042d4:	102b883a 	mov	r21,r2
 80042d8:	b0ffffc4 	addi	r3,r22,-1
 80042dc:	a0bff416 	blt	r20,r2,80042b0 <__alt_data_end+0xf80042b0>
 80042e0:	11400c04 	addi	r5,r2,48
 80042e4:	b17fffc5 	stb	r5,-1(r22)
 80042e8:	d88122c4 	addi	r2,sp,1163
 80042ec:	e011883a 	mov	r8,fp
 80042f0:	1880462e 	bgeu	r3,r2,800440c <___vfprintf_internal_r+0x214c>
 80042f4:	d9012344 	addi	r4,sp,1165
 80042f8:	b007883a 	mov	r3,r22
 80042fc:	00000206 	br	8004308 <___vfprintf_internal_r+0x2048>
 8004300:	19400003 	ldbu	r5,0(r3)
 8004304:	18c00044 	addi	r3,r3,1
 8004308:	21400005 	stb	r5,0(r4)
 800430c:	21000044 	addi	r4,r4,1
 8004310:	10fffb1e 	bne	r2,r3,8004300 <__alt_data_end+0xf8004300>
 8004314:	d8c12304 	addi	r3,sp,1164
 8004318:	1d87c83a 	sub	r3,r3,r22
 800431c:	d9412344 	addi	r5,sp,1165
 8004320:	28c7883a 	add	r3,r5,r3
 8004324:	003f9c06 	br	8004198 <__alt_data_end+0xf8004198>
 8004328:	0005883a 	mov	r2,zero
 800432c:	003f2c06 	br	8003fe0 <__alt_data_end+0xf8003fe0>
 8004330:	d8c13317 	ldw	r3,1228(sp)
 8004334:	a5000044 	addi	r20,r20,1
 8004338:	1d29883a 	add	r20,r3,r20
 800433c:	dd012e15 	stw	r20,1208(sp)
 8004340:	a005883a 	mov	r2,r20
 8004344:	a03df80e 	bge	r20,zero,8003b28 <__alt_data_end+0xf8003b28>
 8004348:	0005883a 	mov	r2,zero
 800434c:	003df606 	br	8003b28 <__alt_data_end+0xf8003b28>
 8004350:	043fffc4 	movi	r16,-1
 8004354:	0038d406 	br	80026a8 <__alt_data_end+0xf80026a8>
 8004358:	d9012f17 	ldw	r4,1212(sp)
 800435c:	8c800043 	ldbu	r18,1(r17)
 8004360:	1023883a 	mov	r17,r2
 8004364:	20c00017 	ldw	r3,0(r4)
 8004368:	21000104 	addi	r4,r4,4
 800436c:	d9012f15 	stw	r4,1212(sp)
 8004370:	18001f16 	blt	r3,zero,80043f0 <___vfprintf_internal_r+0x2130>
 8004374:	94803fcc 	andi	r18,r18,255
 8004378:	9480201c 	xori	r18,r18,128
 800437c:	94bfe004 	addi	r18,r18,-128
 8004380:	00383406 	br	8002454 <__alt_data_end+0xf8002454>
 8004384:	a000111e 	bne	r20,zero,80043cc <___vfprintf_internal_r+0x210c>
 8004388:	d9012a17 	ldw	r4,1192(sp)
 800438c:	2080004c 	andi	r2,r4,1
 8004390:	10000e1e 	bne	r2,zero,80043cc <___vfprintf_internal_r+0x210c>
 8004394:	00800044 	movi	r2,1
 8004398:	d8812e15 	stw	r2,1208(sp)
 800439c:	003de206 	br	8003b28 <__alt_data_end+0xf8003b28>
 80043a0:	d9412a17 	ldw	r5,1192(sp)
 80043a4:	2884703a 	and	r2,r5,r2
 80043a8:	103f831e 	bne	r2,zero,80041b8 <__alt_data_end+0xf80041b8>
 80043ac:	003f8506 	br	80041c4 <__alt_data_end+0xf80041c4>
 80043b0:	00800b44 	movi	r2,45
 80043b4:	056bc83a 	sub	r21,zero,r21
 80043b8:	d8812305 	stb	r2,1164(sp)
 80043bc:	003f6e06 	br	8004178 <__alt_data_end+0xf8004178>
 80043c0:	00800084 	movi	r2,2
 80043c4:	10c5c83a 	sub	r2,r2,r3
 80043c8:	003f9d06 	br	8004240 <__alt_data_end+0xf8004240>
 80043cc:	a5000084 	addi	r20,r20,2
 80043d0:	dd012e15 	stw	r20,1208(sp)
 80043d4:	a005883a 	mov	r2,r20
 80043d8:	a03dd30e 	bge	r20,zero,8003b28 <__alt_data_end+0xf8003b28>
 80043dc:	003fda06 	br	8004348 <__alt_data_end+0xf8004348>
 80043e0:	0005883a 	mov	r2,zero
 80043e4:	003dcd06 	br	8003b1c <__alt_data_end+0xf8003b1c>
 80043e8:	d8812617 	ldw	r2,1176(sp)
 80043ec:	003f5c06 	br	8004160 <__alt_data_end+0xf8004160>
 80043f0:	94803fcc 	andi	r18,r18,255
 80043f4:	9480201c 	xori	r18,r18,128
 80043f8:	00ffffc4 	movi	r3,-1
 80043fc:	94bfe004 	addi	r18,r18,-128
 8004400:	00381406 	br	8002454 <__alt_data_end+0xf8002454>
 8004404:	0005883a 	mov	r2,zero
 8004408:	003fa406 	br	800429c <__alt_data_end+0xf800429c>
 800440c:	d8c12344 	addi	r3,sp,1165
 8004410:	003f6106 	br	8004198 <__alt_data_end+0xf8004198>

08004414 <__vfprintf_internal>:
 8004414:	00820074 	movhi	r2,2049
 8004418:	108db504 	addi	r2,r2,14036
 800441c:	2007883a 	mov	r3,r4
 8004420:	11000017 	ldw	r4,0(r2)
 8004424:	2805883a 	mov	r2,r5
 8004428:	300f883a 	mov	r7,r6
 800442c:	180b883a 	mov	r5,r3
 8004430:	100d883a 	mov	r6,r2
 8004434:	80022c01 	jmpi	80022c0 <___vfprintf_internal_r>

08004438 <__swsetup_r>:
 8004438:	00820074 	movhi	r2,2049
 800443c:	108db504 	addi	r2,r2,14036
 8004440:	10800017 	ldw	r2,0(r2)
 8004444:	defffd04 	addi	sp,sp,-12
 8004448:	dc400115 	stw	r17,4(sp)
 800444c:	dc000015 	stw	r16,0(sp)
 8004450:	dfc00215 	stw	ra,8(sp)
 8004454:	2023883a 	mov	r17,r4
 8004458:	2821883a 	mov	r16,r5
 800445c:	10000226 	beq	r2,zero,8004468 <__swsetup_r+0x30>
 8004460:	10c00e17 	ldw	r3,56(r2)
 8004464:	18002e26 	beq	r3,zero,8004520 <__swsetup_r+0xe8>
 8004468:	8080030b 	ldhu	r2,12(r16)
 800446c:	10c0020c 	andi	r3,r2,8
 8004470:	100d883a 	mov	r6,r2
 8004474:	18000f26 	beq	r3,zero,80044b4 <__swsetup_r+0x7c>
 8004478:	80c00417 	ldw	r3,16(r16)
 800447c:	18001526 	beq	r3,zero,80044d4 <__swsetup_r+0x9c>
 8004480:	1100004c 	andi	r4,r2,1
 8004484:	20001c1e 	bne	r4,zero,80044f8 <__swsetup_r+0xc0>
 8004488:	1080008c 	andi	r2,r2,2
 800448c:	1000271e 	bne	r2,zero,800452c <__swsetup_r+0xf4>
 8004490:	80800517 	ldw	r2,20(r16)
 8004494:	80800215 	stw	r2,8(r16)
 8004498:	18001c26 	beq	r3,zero,800450c <__swsetup_r+0xd4>
 800449c:	0005883a 	mov	r2,zero
 80044a0:	dfc00217 	ldw	ra,8(sp)
 80044a4:	dc400117 	ldw	r17,4(sp)
 80044a8:	dc000017 	ldw	r16,0(sp)
 80044ac:	dec00304 	addi	sp,sp,12
 80044b0:	f800283a 	ret
 80044b4:	3080040c 	andi	r2,r6,16
 80044b8:	10001726 	beq	r2,zero,8004518 <__swsetup_r+0xe0>
 80044bc:	3080010c 	andi	r2,r6,4
 80044c0:	10001d1e 	bne	r2,zero,8004538 <__swsetup_r+0x100>
 80044c4:	80c00417 	ldw	r3,16(r16)
 80044c8:	30800214 	ori	r2,r6,8
 80044cc:	8080030d 	sth	r2,12(r16)
 80044d0:	183feb1e 	bne	r3,zero,8004480 <__alt_data_end+0xf8004480>
 80044d4:	1140a00c 	andi	r5,r2,640
 80044d8:	01008004 	movi	r4,512
 80044dc:	293fe826 	beq	r5,r4,8004480 <__alt_data_end+0xf8004480>
 80044e0:	8809883a 	mov	r4,r17
 80044e4:	800b883a 	mov	r5,r16
 80044e8:	8006ed80 	call	8006ed8 <__smakebuf_r>
 80044ec:	8080030b 	ldhu	r2,12(r16)
 80044f0:	80c00417 	ldw	r3,16(r16)
 80044f4:	003fe206 	br	8004480 <__alt_data_end+0xf8004480>
 80044f8:	80800517 	ldw	r2,20(r16)
 80044fc:	80000215 	stw	zero,8(r16)
 8004500:	0085c83a 	sub	r2,zero,r2
 8004504:	80800615 	stw	r2,24(r16)
 8004508:	183fe41e 	bne	r3,zero,800449c <__alt_data_end+0xf800449c>
 800450c:	8080030b 	ldhu	r2,12(r16)
 8004510:	1080200c 	andi	r2,r2,128
 8004514:	103fe226 	beq	r2,zero,80044a0 <__alt_data_end+0xf80044a0>
 8004518:	00bfffc4 	movi	r2,-1
 800451c:	003fe006 	br	80044a0 <__alt_data_end+0xf80044a0>
 8004520:	1009883a 	mov	r4,r2
 8004524:	80060f40 	call	80060f4 <__sinit>
 8004528:	003fcf06 	br	8004468 <__alt_data_end+0xf8004468>
 800452c:	0005883a 	mov	r2,zero
 8004530:	80800215 	stw	r2,8(r16)
 8004534:	003fd806 	br	8004498 <__alt_data_end+0xf8004498>
 8004538:	81400c17 	ldw	r5,48(r16)
 800453c:	28000626 	beq	r5,zero,8004558 <__swsetup_r+0x120>
 8004540:	80801004 	addi	r2,r16,64
 8004544:	28800326 	beq	r5,r2,8004554 <__swsetup_r+0x11c>
 8004548:	8809883a 	mov	r4,r17
 800454c:	80065280 	call	8006528 <_free_r>
 8004550:	8180030b 	ldhu	r6,12(r16)
 8004554:	80000c15 	stw	zero,48(r16)
 8004558:	80c00417 	ldw	r3,16(r16)
 800455c:	00bff6c4 	movi	r2,-37
 8004560:	118c703a 	and	r6,r2,r6
 8004564:	80000115 	stw	zero,4(r16)
 8004568:	80c00015 	stw	r3,0(r16)
 800456c:	003fd606 	br	80044c8 <__alt_data_end+0xf80044c8>

08004570 <quorem>:
 8004570:	defff204 	addi	sp,sp,-56
 8004574:	dd400915 	stw	r21,36(sp)
 8004578:	20800417 	ldw	r2,16(r4)
 800457c:	2d400417 	ldw	r21,16(r5)
 8004580:	dfc00d15 	stw	ra,52(sp)
 8004584:	df000c15 	stw	fp,48(sp)
 8004588:	ddc00b15 	stw	r23,44(sp)
 800458c:	dd800a15 	stw	r22,40(sp)
 8004590:	dd000815 	stw	r20,32(sp)
 8004594:	dcc00715 	stw	r19,28(sp)
 8004598:	dc800615 	stw	r18,24(sp)
 800459c:	dc400515 	stw	r17,20(sp)
 80045a0:	dc000415 	stw	r16,16(sp)
 80045a4:	d9000015 	stw	r4,0(sp)
 80045a8:	d9400115 	stw	r5,4(sp)
 80045ac:	15407816 	blt	r2,r21,8004790 <quorem+0x220>
 80045b0:	ad7fffc4 	addi	r21,r21,-1
 80045b4:	ad79883a 	add	fp,r21,r21
 80045b8:	28c00504 	addi	r3,r5,20
 80045bc:	e739883a 	add	fp,fp,fp
 80045c0:	1f2f883a 	add	r23,r3,fp
 80045c4:	24400504 	addi	r17,r4,20
 80045c8:	8f39883a 	add	fp,r17,fp
 80045cc:	b9400017 	ldw	r5,0(r23)
 80045d0:	e1000017 	ldw	r4,0(fp)
 80045d4:	d8c00215 	stw	r3,8(sp)
 80045d8:	29400044 	addi	r5,r5,1
 80045dc:	df000315 	stw	fp,12(sp)
 80045e0:	800c1f80 	call	800c1f8 <__udivsi3>
 80045e4:	1021883a 	mov	r16,r2
 80045e8:	10003026 	beq	r2,zero,80046ac <quorem+0x13c>
 80045ec:	dcc00217 	ldw	r19,8(sp)
 80045f0:	8829883a 	mov	r20,r17
 80045f4:	002d883a 	mov	r22,zero
 80045f8:	0039883a 	mov	fp,zero
 80045fc:	9c800017 	ldw	r18,0(r19)
 8004600:	800b883a 	mov	r5,r16
 8004604:	9cc00104 	addi	r19,r19,4
 8004608:	913fffcc 	andi	r4,r18,65535
 800460c:	800c2080 	call	800c208 <__mulsi3>
 8004610:	9008d43a 	srli	r4,r18,16
 8004614:	800b883a 	mov	r5,r16
 8004618:	b0ad883a 	add	r22,r22,r2
 800461c:	800c2080 	call	800c208 <__mulsi3>
 8004620:	a1400017 	ldw	r5,0(r20)
 8004624:	b010d43a 	srli	r8,r22,16
 8004628:	b0ffffcc 	andi	r3,r22,65535
 800462c:	293fffcc 	andi	r4,r5,65535
 8004630:	2709883a 	add	r4,r4,fp
 8004634:	280cd43a 	srli	r6,r5,16
 8004638:	20c9c83a 	sub	r4,r4,r3
 800463c:	4085883a 	add	r2,r8,r2
 8004640:	2007d43a 	srai	r3,r4,16
 8004644:	117fffcc 	andi	r5,r2,65535
 8004648:	314bc83a 	sub	r5,r6,r5
 800464c:	28cb883a 	add	r5,r5,r3
 8004650:	280c943a 	slli	r6,r5,16
 8004654:	213fffcc 	andi	r4,r4,65535
 8004658:	102cd43a 	srli	r22,r2,16
 800465c:	3108b03a 	or	r4,r6,r4
 8004660:	a1000015 	stw	r4,0(r20)
 8004664:	2839d43a 	srai	fp,r5,16
 8004668:	a5000104 	addi	r20,r20,4
 800466c:	bcffe32e 	bgeu	r23,r19,80045fc <__alt_data_end+0xf80045fc>
 8004670:	d8c00317 	ldw	r3,12(sp)
 8004674:	18800017 	ldw	r2,0(r3)
 8004678:	10000c1e 	bne	r2,zero,80046ac <quorem+0x13c>
 800467c:	18bfff04 	addi	r2,r3,-4
 8004680:	8880082e 	bgeu	r17,r2,80046a4 <quorem+0x134>
 8004684:	18ffff17 	ldw	r3,-4(r3)
 8004688:	18000326 	beq	r3,zero,8004698 <quorem+0x128>
 800468c:	00000506 	br	80046a4 <quorem+0x134>
 8004690:	10c00017 	ldw	r3,0(r2)
 8004694:	1800031e 	bne	r3,zero,80046a4 <quorem+0x134>
 8004698:	10bfff04 	addi	r2,r2,-4
 800469c:	ad7fffc4 	addi	r21,r21,-1
 80046a0:	88bffb36 	bltu	r17,r2,8004690 <__alt_data_end+0xf8004690>
 80046a4:	d8c00017 	ldw	r3,0(sp)
 80046a8:	1d400415 	stw	r21,16(r3)
 80046ac:	d9000017 	ldw	r4,0(sp)
 80046b0:	d9400117 	ldw	r5,4(sp)
 80046b4:	80086040 	call	8008604 <__mcmp>
 80046b8:	10002816 	blt	r2,zero,800475c <quorem+0x1ec>
 80046bc:	d8c00217 	ldw	r3,8(sp)
 80046c0:	84000044 	addi	r16,r16,1
 80046c4:	880d883a 	mov	r6,r17
 80046c8:	000f883a 	mov	r7,zero
 80046cc:	32800017 	ldw	r10,0(r6)
 80046d0:	1a400017 	ldw	r9,0(r3)
 80046d4:	31800104 	addi	r6,r6,4
 80046d8:	523fffcc 	andi	r8,r10,65535
 80046dc:	48bfffcc 	andi	r2,r9,65535
 80046e0:	41cf883a 	add	r7,r8,r7
 80046e4:	3891c83a 	sub	r8,r7,r2
 80046e8:	4812d43a 	srli	r9,r9,16
 80046ec:	500ed43a 	srli	r7,r10,16
 80046f0:	4005d43a 	srai	r2,r8,16
 80046f4:	423fffcc 	andi	r8,r8,65535
 80046f8:	3a4fc83a 	sub	r7,r7,r9
 80046fc:	388f883a 	add	r7,r7,r2
 8004700:	3804943a 	slli	r2,r7,16
 8004704:	18c00104 	addi	r3,r3,4
 8004708:	380fd43a 	srai	r7,r7,16
 800470c:	1210b03a 	or	r8,r2,r8
 8004710:	323fff15 	stw	r8,-4(r6)
 8004714:	b8ffed2e 	bgeu	r23,r3,80046cc <__alt_data_end+0xf80046cc>
 8004718:	ad45883a 	add	r2,r21,r21
 800471c:	1085883a 	add	r2,r2,r2
 8004720:	8887883a 	add	r3,r17,r2
 8004724:	18800017 	ldw	r2,0(r3)
 8004728:	10000c1e 	bne	r2,zero,800475c <quorem+0x1ec>
 800472c:	18bfff04 	addi	r2,r3,-4
 8004730:	8880082e 	bgeu	r17,r2,8004754 <quorem+0x1e4>
 8004734:	18ffff17 	ldw	r3,-4(r3)
 8004738:	18000326 	beq	r3,zero,8004748 <quorem+0x1d8>
 800473c:	00000506 	br	8004754 <quorem+0x1e4>
 8004740:	10c00017 	ldw	r3,0(r2)
 8004744:	1800031e 	bne	r3,zero,8004754 <quorem+0x1e4>
 8004748:	10bfff04 	addi	r2,r2,-4
 800474c:	ad7fffc4 	addi	r21,r21,-1
 8004750:	88bffb36 	bltu	r17,r2,8004740 <__alt_data_end+0xf8004740>
 8004754:	d8c00017 	ldw	r3,0(sp)
 8004758:	1d400415 	stw	r21,16(r3)
 800475c:	8005883a 	mov	r2,r16
 8004760:	dfc00d17 	ldw	ra,52(sp)
 8004764:	df000c17 	ldw	fp,48(sp)
 8004768:	ddc00b17 	ldw	r23,44(sp)
 800476c:	dd800a17 	ldw	r22,40(sp)
 8004770:	dd400917 	ldw	r21,36(sp)
 8004774:	dd000817 	ldw	r20,32(sp)
 8004778:	dcc00717 	ldw	r19,28(sp)
 800477c:	dc800617 	ldw	r18,24(sp)
 8004780:	dc400517 	ldw	r17,20(sp)
 8004784:	dc000417 	ldw	r16,16(sp)
 8004788:	dec00e04 	addi	sp,sp,56
 800478c:	f800283a 	ret
 8004790:	0005883a 	mov	r2,zero
 8004794:	003ff206 	br	8004760 <__alt_data_end+0xf8004760>

08004798 <_dtoa_r>:
 8004798:	20801017 	ldw	r2,64(r4)
 800479c:	deffdf04 	addi	sp,sp,-132
 80047a0:	dcc01a15 	stw	r19,104(sp)
 80047a4:	dc801915 	stw	r18,100(sp)
 80047a8:	dc401815 	stw	r17,96(sp)
 80047ac:	dc001715 	stw	r16,92(sp)
 80047b0:	dfc02015 	stw	ra,128(sp)
 80047b4:	df001f15 	stw	fp,124(sp)
 80047b8:	ddc01e15 	stw	r23,120(sp)
 80047bc:	dd801d15 	stw	r22,116(sp)
 80047c0:	dd401c15 	stw	r21,112(sp)
 80047c4:	dd001b15 	stw	r20,108(sp)
 80047c8:	d9400315 	stw	r5,12(sp)
 80047cc:	d9c00415 	stw	r7,16(sp)
 80047d0:	2021883a 	mov	r16,r4
 80047d4:	3023883a 	mov	r17,r6
 80047d8:	dcc02317 	ldw	r19,140(sp)
 80047dc:	3025883a 	mov	r18,r6
 80047e0:	10000826 	beq	r2,zero,8004804 <_dtoa_r+0x6c>
 80047e4:	20c01117 	ldw	r3,68(r4)
 80047e8:	01800044 	movi	r6,1
 80047ec:	100b883a 	mov	r5,r2
 80047f0:	30cc983a 	sll	r6,r6,r3
 80047f4:	10c00115 	stw	r3,4(r2)
 80047f8:	11800215 	stw	r6,8(r2)
 80047fc:	8007d3c0 	call	8007d3c <_Bfree>
 8004800:	80001015 	stw	zero,64(r16)
 8004804:	88002e16 	blt	r17,zero,80048c0 <_dtoa_r+0x128>
 8004808:	98000015 	stw	zero,0(r19)
 800480c:	88dffc2c 	andhi	r3,r17,32752
 8004810:	009ffc34 	movhi	r2,32752
 8004814:	18801b26 	beq	r3,r2,8004884 <_dtoa_r+0xec>
 8004818:	d9000317 	ldw	r4,12(sp)
 800481c:	900b883a 	mov	r5,r18
 8004820:	000d883a 	mov	r6,zero
 8004824:	000f883a 	mov	r7,zero
 8004828:	800d4480 	call	800d448 <__eqdf2>
 800482c:	10002b1e 	bne	r2,zero,80048dc <_dtoa_r+0x144>
 8004830:	d8c02217 	ldw	r3,136(sp)
 8004834:	d9002417 	ldw	r4,144(sp)
 8004838:	00800044 	movi	r2,1
 800483c:	18800015 	stw	r2,0(r3)
 8004840:	2001a026 	beq	r4,zero,8004ec4 <_dtoa_r+0x72c>
 8004844:	00820074 	movhi	r2,2049
 8004848:	10865c44 	addi	r2,r2,6513
 800484c:	20800015 	stw	r2,0(r4)
 8004850:	10bfffc4 	addi	r2,r2,-1
 8004854:	dfc02017 	ldw	ra,128(sp)
 8004858:	df001f17 	ldw	fp,124(sp)
 800485c:	ddc01e17 	ldw	r23,120(sp)
 8004860:	dd801d17 	ldw	r22,116(sp)
 8004864:	dd401c17 	ldw	r21,112(sp)
 8004868:	dd001b17 	ldw	r20,108(sp)
 800486c:	dcc01a17 	ldw	r19,104(sp)
 8004870:	dc801917 	ldw	r18,100(sp)
 8004874:	dc401817 	ldw	r17,96(sp)
 8004878:	dc001717 	ldw	r16,92(sp)
 800487c:	dec02104 	addi	sp,sp,132
 8004880:	f800283a 	ret
 8004884:	d8c02217 	ldw	r3,136(sp)
 8004888:	d9000317 	ldw	r4,12(sp)
 800488c:	0089c3c4 	movi	r2,9999
 8004890:	18800015 	stw	r2,0(r3)
 8004894:	20017926 	beq	r4,zero,8004e7c <_dtoa_r+0x6e4>
 8004898:	00820074 	movhi	r2,2049
 800489c:	10866804 	addi	r2,r2,6560
 80048a0:	d9802417 	ldw	r6,144(sp)
 80048a4:	303feb26 	beq	r6,zero,8004854 <__alt_data_end+0xf8004854>
 80048a8:	10c000c7 	ldb	r3,3(r2)
 80048ac:	18017a1e 	bne	r3,zero,8004e98 <_dtoa_r+0x700>
 80048b0:	10c000c4 	addi	r3,r2,3
 80048b4:	d9c02417 	ldw	r7,144(sp)
 80048b8:	38c00015 	stw	r3,0(r7)
 80048bc:	003fe506 	br	8004854 <__alt_data_end+0xf8004854>
 80048c0:	04a00034 	movhi	r18,32768
 80048c4:	94bfffc4 	addi	r18,r18,-1
 80048c8:	8ca4703a 	and	r18,r17,r18
 80048cc:	00800044 	movi	r2,1
 80048d0:	98800015 	stw	r2,0(r19)
 80048d4:	9023883a 	mov	r17,r18
 80048d8:	003fcc06 	br	800480c <__alt_data_end+0xf800480c>
 80048dc:	d9400317 	ldw	r5,12(sp)
 80048e0:	d8800204 	addi	r2,sp,8
 80048e4:	8828d53a 	srli	r20,r17,20
 80048e8:	d8800015 	stw	r2,0(sp)
 80048ec:	8009883a 	mov	r4,r16
 80048f0:	900d883a 	mov	r6,r18
 80048f4:	d9c00104 	addi	r7,sp,4
 80048f8:	80089640 	call	8008964 <__d2b>
 80048fc:	1039883a 	mov	fp,r2
 8004900:	a001671e 	bne	r20,zero,8004ea0 <_dtoa_r+0x708>
 8004904:	dd400217 	ldw	r21,8(sp)
 8004908:	dd000117 	ldw	r20,4(sp)
 800490c:	00befbc4 	movi	r2,-1041
 8004910:	ad29883a 	add	r20,r21,r20
 8004914:	a082d616 	blt	r20,r2,8005470 <_dtoa_r+0xcd8>
 8004918:	d9800317 	ldw	r6,12(sp)
 800491c:	013f0384 	movi	r4,-1010
 8004920:	2509c83a 	sub	r4,r4,r20
 8004924:	a0810484 	addi	r2,r20,1042
 8004928:	8922983a 	sll	r17,r17,r4
 800492c:	3084d83a 	srl	r2,r6,r2
 8004930:	8888b03a 	or	r4,r17,r2
 8004934:	800e8680 	call	800e868 <__floatunsidf>
 8004938:	1009883a 	mov	r4,r2
 800493c:	017f8434 	movhi	r5,65040
 8004940:	00800044 	movi	r2,1
 8004944:	194b883a 	add	r5,r3,r5
 8004948:	a53fffc4 	addi	r20,r20,-1
 800494c:	d8800f15 	stw	r2,60(sp)
 8004950:	000d883a 	mov	r6,zero
 8004954:	01cffe34 	movhi	r7,16376
 8004958:	800de900 	call	800de90 <__subdf3>
 800495c:	1009883a 	mov	r4,r2
 8004960:	180b883a 	mov	r5,r3
 8004964:	0198dbf4 	movhi	r6,25455
 8004968:	3190d844 	addi	r6,r6,17249
 800496c:	01cff4f4 	movhi	r7,16339
 8004970:	39e1e9c4 	addi	r7,r7,-30809
 8004974:	800d6900 	call	800d690 <__muldf3>
 8004978:	180b883a 	mov	r5,r3
 800497c:	01a2d874 	movhi	r6,35681
 8004980:	31b22cc4 	addi	r6,r6,-14157
 8004984:	01cff1f4 	movhi	r7,16327
 8004988:	39e28a04 	addi	r7,r7,-30168
 800498c:	1009883a 	mov	r4,r2
 8004990:	800c2300 	call	800c230 <__adddf3>
 8004994:	a009883a 	mov	r4,r20
 8004998:	1027883a 	mov	r19,r2
 800499c:	1823883a 	mov	r17,r3
 80049a0:	800e7980 	call	800e798 <__floatsidf>
 80049a4:	1009883a 	mov	r4,r2
 80049a8:	180b883a 	mov	r5,r3
 80049ac:	019427f4 	movhi	r6,20639
 80049b0:	319e7ec4 	addi	r6,r6,31227
 80049b4:	01cff4f4 	movhi	r7,16339
 80049b8:	39d104c4 	addi	r7,r7,17427
 80049bc:	800d6900 	call	800d690 <__muldf3>
 80049c0:	9809883a 	mov	r4,r19
 80049c4:	880b883a 	mov	r5,r17
 80049c8:	100d883a 	mov	r6,r2
 80049cc:	180f883a 	mov	r7,r3
 80049d0:	800c2300 	call	800c230 <__adddf3>
 80049d4:	1009883a 	mov	r4,r2
 80049d8:	180b883a 	mov	r5,r3
 80049dc:	1027883a 	mov	r19,r2
 80049e0:	1823883a 	mov	r17,r3
 80049e4:	800e7180 	call	800e718 <__fixdfsi>
 80049e8:	9809883a 	mov	r4,r19
 80049ec:	880b883a 	mov	r5,r17
 80049f0:	000d883a 	mov	r6,zero
 80049f4:	000f883a 	mov	r7,zero
 80049f8:	d8800615 	stw	r2,24(sp)
 80049fc:	800d5a40 	call	800d5a4 <__ledf2>
 8004a00:	10028416 	blt	r2,zero,8005414 <_dtoa_r+0xc7c>
 8004a04:	d9000617 	ldw	r4,24(sp)
 8004a08:	00800584 	movi	r2,22
 8004a0c:	11027236 	bltu	r2,r4,80053d8 <_dtoa_r+0xc40>
 8004a10:	200490fa 	slli	r2,r4,3
 8004a14:	00c20074 	movhi	r3,2049
 8004a18:	18c68404 	addi	r3,r3,6672
 8004a1c:	d9800317 	ldw	r6,12(sp)
 8004a20:	1885883a 	add	r2,r3,r2
 8004a24:	11000017 	ldw	r4,0(r2)
 8004a28:	11400117 	ldw	r5,4(r2)
 8004a2c:	900f883a 	mov	r7,r18
 8004a30:	800d4cc0 	call	800d4cc <__gedf2>
 8004a34:	0082930e 	bge	zero,r2,8005484 <_dtoa_r+0xcec>
 8004a38:	d9800617 	ldw	r6,24(sp)
 8004a3c:	d8000e15 	stw	zero,56(sp)
 8004a40:	31bfffc4 	addi	r6,r6,-1
 8004a44:	d9800615 	stw	r6,24(sp)
 8004a48:	ad2bc83a 	sub	r21,r21,r20
 8004a4c:	ad7fffc4 	addi	r21,r21,-1
 8004a50:	a8026c16 	blt	r21,zero,8005404 <_dtoa_r+0xc6c>
 8004a54:	d8000815 	stw	zero,32(sp)
 8004a58:	d8800617 	ldw	r2,24(sp)
 8004a5c:	10026116 	blt	r2,zero,80053e4 <_dtoa_r+0xc4c>
 8004a60:	a8ab883a 	add	r21,r21,r2
 8004a64:	d8800b15 	stw	r2,44(sp)
 8004a68:	d8000a15 	stw	zero,40(sp)
 8004a6c:	d9c00417 	ldw	r7,16(sp)
 8004a70:	00800244 	movi	r2,9
 8004a74:	11c11636 	bltu	r2,r7,8004ed0 <_dtoa_r+0x738>
 8004a78:	00800144 	movi	r2,5
 8004a7c:	11c4cc0e 	bge	r2,r7,8005db0 <_dtoa_r+0x1618>
 8004a80:	39ffff04 	addi	r7,r7,-4
 8004a84:	d9c00415 	stw	r7,16(sp)
 8004a88:	0027883a 	mov	r19,zero
 8004a8c:	d8c00417 	ldw	r3,16(sp)
 8004a90:	008000c4 	movi	r2,3
 8004a94:	1883aa26 	beq	r3,r2,8005940 <_dtoa_r+0x11a8>
 8004a98:	10c35b0e 	bge	r2,r3,8005808 <_dtoa_r+0x1070>
 8004a9c:	d9000417 	ldw	r4,16(sp)
 8004aa0:	00800104 	movi	r2,4
 8004aa4:	2082da26 	beq	r4,r2,8005610 <_dtoa_r+0xe78>
 8004aa8:	00800144 	movi	r2,5
 8004aac:	2081091e 	bne	r4,r2,8004ed4 <_dtoa_r+0x73c>
 8004ab0:	01c00044 	movi	r7,1
 8004ab4:	d9c00c15 	stw	r7,48(sp)
 8004ab8:	d8c02117 	ldw	r3,132(sp)
 8004abc:	d9000617 	ldw	r4,24(sp)
 8004ac0:	1907883a 	add	r3,r3,r4
 8004ac4:	19800044 	addi	r6,r3,1
 8004ac8:	d8c00d15 	stw	r3,52(sp)
 8004acc:	d9800915 	stw	r6,36(sp)
 8004ad0:	0183a90e 	bge	zero,r6,8005978 <_dtoa_r+0x11e0>
 8004ad4:	d9800917 	ldw	r6,36(sp)
 8004ad8:	80001115 	stw	zero,68(r16)
 8004adc:	008005c4 	movi	r2,23
 8004ae0:	1184b52e 	bgeu	r2,r6,8005db8 <_dtoa_r+0x1620>
 8004ae4:	00c00044 	movi	r3,1
 8004ae8:	00800104 	movi	r2,4
 8004aec:	1085883a 	add	r2,r2,r2
 8004af0:	11000504 	addi	r4,r2,20
 8004af4:	180b883a 	mov	r5,r3
 8004af8:	18c00044 	addi	r3,r3,1
 8004afc:	313ffb2e 	bgeu	r6,r4,8004aec <__alt_data_end+0xf8004aec>
 8004b00:	81401115 	stw	r5,68(r16)
 8004b04:	3023883a 	mov	r17,r6
 8004b08:	8009883a 	mov	r4,r16
 8004b0c:	8007c940 	call	8007c94 <_Balloc>
 8004b10:	d8800715 	stw	r2,28(sp)
 8004b14:	80801015 	stw	r2,64(r16)
 8004b18:	00800384 	movi	r2,14
 8004b1c:	1440f936 	bltu	r2,r17,8004f04 <_dtoa_r+0x76c>
 8004b20:	9800f826 	beq	r19,zero,8004f04 <_dtoa_r+0x76c>
 8004b24:	d9c00617 	ldw	r7,24(sp)
 8004b28:	01c39c0e 	bge	zero,r7,800599c <_dtoa_r+0x1204>
 8004b2c:	388003cc 	andi	r2,r7,15
 8004b30:	100490fa 	slli	r2,r2,3
 8004b34:	382dd13a 	srai	r22,r7,4
 8004b38:	00c20074 	movhi	r3,2049
 8004b3c:	18c68404 	addi	r3,r3,6672
 8004b40:	1885883a 	add	r2,r3,r2
 8004b44:	b0c0040c 	andi	r3,r22,16
 8004b48:	12800017 	ldw	r10,0(r2)
 8004b4c:	12400117 	ldw	r9,4(r2)
 8004b50:	18038526 	beq	r3,zero,8005968 <_dtoa_r+0x11d0>
 8004b54:	00820074 	movhi	r2,2049
 8004b58:	10867a04 	addi	r2,r2,6632
 8004b5c:	11800817 	ldw	r6,32(r2)
 8004b60:	11c00917 	ldw	r7,36(r2)
 8004b64:	d9000317 	ldw	r4,12(sp)
 8004b68:	900b883a 	mov	r5,r18
 8004b6c:	da401515 	stw	r9,84(sp)
 8004b70:	da801615 	stw	r10,88(sp)
 8004b74:	800caac0 	call	800caac <__divdf3>
 8004b78:	da401517 	ldw	r9,84(sp)
 8004b7c:	da801617 	ldw	r10,88(sp)
 8004b80:	1027883a 	mov	r19,r2
 8004b84:	1829883a 	mov	r20,r3
 8004b88:	b58003cc 	andi	r22,r22,15
 8004b8c:	044000c4 	movi	r17,3
 8004b90:	b0001126 	beq	r22,zero,8004bd8 <_dtoa_r+0x440>
 8004b94:	05c20074 	movhi	r23,2049
 8004b98:	bdc67a04 	addi	r23,r23,6632
 8004b9c:	5005883a 	mov	r2,r10
 8004ba0:	4807883a 	mov	r3,r9
 8004ba4:	b180004c 	andi	r6,r22,1
 8004ba8:	1009883a 	mov	r4,r2
 8004bac:	b02dd07a 	srai	r22,r22,1
 8004bb0:	180b883a 	mov	r5,r3
 8004bb4:	30000426 	beq	r6,zero,8004bc8 <_dtoa_r+0x430>
 8004bb8:	b9800017 	ldw	r6,0(r23)
 8004bbc:	b9c00117 	ldw	r7,4(r23)
 8004bc0:	8c400044 	addi	r17,r17,1
 8004bc4:	800d6900 	call	800d690 <__muldf3>
 8004bc8:	bdc00204 	addi	r23,r23,8
 8004bcc:	b03ff51e 	bne	r22,zero,8004ba4 <__alt_data_end+0xf8004ba4>
 8004bd0:	1015883a 	mov	r10,r2
 8004bd4:	1813883a 	mov	r9,r3
 8004bd8:	9809883a 	mov	r4,r19
 8004bdc:	a00b883a 	mov	r5,r20
 8004be0:	500d883a 	mov	r6,r10
 8004be4:	480f883a 	mov	r7,r9
 8004be8:	800caac0 	call	800caac <__divdf3>
 8004bec:	1027883a 	mov	r19,r2
 8004bf0:	1829883a 	mov	r20,r3
 8004bf4:	d8c00e17 	ldw	r3,56(sp)
 8004bf8:	18000626 	beq	r3,zero,8004c14 <_dtoa_r+0x47c>
 8004bfc:	9809883a 	mov	r4,r19
 8004c00:	a00b883a 	mov	r5,r20
 8004c04:	000d883a 	mov	r6,zero
 8004c08:	01cffc34 	movhi	r7,16368
 8004c0c:	800d5a40 	call	800d5a4 <__ledf2>
 8004c10:	10041516 	blt	r2,zero,8005c68 <_dtoa_r+0x14d0>
 8004c14:	8809883a 	mov	r4,r17
 8004c18:	800e7980 	call	800e798 <__floatsidf>
 8004c1c:	1009883a 	mov	r4,r2
 8004c20:	180b883a 	mov	r5,r3
 8004c24:	980d883a 	mov	r6,r19
 8004c28:	a00f883a 	mov	r7,r20
 8004c2c:	800d6900 	call	800d690 <__muldf3>
 8004c30:	1009883a 	mov	r4,r2
 8004c34:	180b883a 	mov	r5,r3
 8004c38:	000d883a 	mov	r6,zero
 8004c3c:	01d00734 	movhi	r7,16412
 8004c40:	800c2300 	call	800c230 <__adddf3>
 8004c44:	1023883a 	mov	r17,r2
 8004c48:	d8800917 	ldw	r2,36(sp)
 8004c4c:	05bf3034 	movhi	r22,64704
 8004c50:	1daf883a 	add	r23,r3,r22
 8004c54:	10031e26 	beq	r2,zero,80058d0 <_dtoa_r+0x1138>
 8004c58:	d8c00617 	ldw	r3,24(sp)
 8004c5c:	dac00917 	ldw	r11,36(sp)
 8004c60:	d8c01315 	stw	r3,76(sp)
 8004c64:	d9000c17 	ldw	r4,48(sp)
 8004c68:	20039626 	beq	r4,zero,8005ac4 <_dtoa_r+0x132c>
 8004c6c:	58bfffc4 	addi	r2,r11,-1
 8004c70:	100490fa 	slli	r2,r2,3
 8004c74:	00c20074 	movhi	r3,2049
 8004c78:	18c68404 	addi	r3,r3,6672
 8004c7c:	0009883a 	mov	r4,zero
 8004c80:	1885883a 	add	r2,r3,r2
 8004c84:	11800017 	ldw	r6,0(r2)
 8004c88:	11c00117 	ldw	r7,4(r2)
 8004c8c:	d8800717 	ldw	r2,28(sp)
 8004c90:	014ff834 	movhi	r5,16352
 8004c94:	dac01615 	stw	r11,88(sp)
 8004c98:	15800044 	addi	r22,r2,1
 8004c9c:	800caac0 	call	800caac <__divdf3>
 8004ca0:	880d883a 	mov	r6,r17
 8004ca4:	b80f883a 	mov	r7,r23
 8004ca8:	1009883a 	mov	r4,r2
 8004cac:	180b883a 	mov	r5,r3
 8004cb0:	800de900 	call	800de90 <__subdf3>
 8004cb4:	a00b883a 	mov	r5,r20
 8004cb8:	9809883a 	mov	r4,r19
 8004cbc:	102f883a 	mov	r23,r2
 8004cc0:	d8c01015 	stw	r3,64(sp)
 8004cc4:	800e7180 	call	800e718 <__fixdfsi>
 8004cc8:	1009883a 	mov	r4,r2
 8004ccc:	d8801515 	stw	r2,84(sp)
 8004cd0:	800e7980 	call	800e798 <__floatsidf>
 8004cd4:	9809883a 	mov	r4,r19
 8004cd8:	a00b883a 	mov	r5,r20
 8004cdc:	100d883a 	mov	r6,r2
 8004ce0:	180f883a 	mov	r7,r3
 8004ce4:	800de900 	call	800de90 <__subdf3>
 8004ce8:	da401517 	ldw	r9,84(sp)
 8004cec:	1827883a 	mov	r19,r3
 8004cf0:	d8c00717 	ldw	r3,28(sp)
 8004cf4:	d9401017 	ldw	r5,64(sp)
 8004cf8:	4a400c04 	addi	r9,r9,48
 8004cfc:	1023883a 	mov	r17,r2
 8004d00:	1a400005 	stb	r9,0(r3)
 8004d04:	b809883a 	mov	r4,r23
 8004d08:	880d883a 	mov	r6,r17
 8004d0c:	980f883a 	mov	r7,r19
 8004d10:	4829883a 	mov	r20,r9
 8004d14:	800d4cc0 	call	800d4cc <__gedf2>
 8004d18:	00842216 	blt	zero,r2,8005da4 <_dtoa_r+0x160c>
 8004d1c:	0009883a 	mov	r4,zero
 8004d20:	014ffc34 	movhi	r5,16368
 8004d24:	880d883a 	mov	r6,r17
 8004d28:	980f883a 	mov	r7,r19
 8004d2c:	800de900 	call	800de90 <__subdf3>
 8004d30:	d9401017 	ldw	r5,64(sp)
 8004d34:	b809883a 	mov	r4,r23
 8004d38:	100d883a 	mov	r6,r2
 8004d3c:	180f883a 	mov	r7,r3
 8004d40:	800d4cc0 	call	800d4cc <__gedf2>
 8004d44:	dac01617 	ldw	r11,88(sp)
 8004d48:	00841316 	blt	zero,r2,8005d98 <_dtoa_r+0x1600>
 8004d4c:	00800044 	movi	r2,1
 8004d50:	12c06c0e 	bge	r2,r11,8004f04 <_dtoa_r+0x76c>
 8004d54:	d9000717 	ldw	r4,28(sp)
 8004d58:	dd401215 	stw	r21,72(sp)
 8004d5c:	dc001115 	stw	r16,68(sp)
 8004d60:	22d7883a 	add	r11,r4,r11
 8004d64:	dc801415 	stw	r18,80(sp)
 8004d68:	582b883a 	mov	r21,r11
 8004d6c:	b021883a 	mov	r16,r22
 8004d70:	dc801017 	ldw	r18,64(sp)
 8004d74:	00000906 	br	8004d9c <_dtoa_r+0x604>
 8004d78:	800de900 	call	800de90 <__subdf3>
 8004d7c:	1009883a 	mov	r4,r2
 8004d80:	180b883a 	mov	r5,r3
 8004d84:	b80d883a 	mov	r6,r23
 8004d88:	900f883a 	mov	r7,r18
 8004d8c:	800d5a40 	call	800d5a4 <__ledf2>
 8004d90:	1003ea16 	blt	r2,zero,8005d3c <_dtoa_r+0x15a4>
 8004d94:	b543ed26 	beq	r22,r21,8005d4c <_dtoa_r+0x15b4>
 8004d98:	b021883a 	mov	r16,r22
 8004d9c:	b809883a 	mov	r4,r23
 8004da0:	900b883a 	mov	r5,r18
 8004da4:	000d883a 	mov	r6,zero
 8004da8:	01d00934 	movhi	r7,16420
 8004dac:	800d6900 	call	800d690 <__muldf3>
 8004db0:	000d883a 	mov	r6,zero
 8004db4:	01d00934 	movhi	r7,16420
 8004db8:	8809883a 	mov	r4,r17
 8004dbc:	980b883a 	mov	r5,r19
 8004dc0:	102f883a 	mov	r23,r2
 8004dc4:	1825883a 	mov	r18,r3
 8004dc8:	800d6900 	call	800d690 <__muldf3>
 8004dcc:	180b883a 	mov	r5,r3
 8004dd0:	1009883a 	mov	r4,r2
 8004dd4:	1823883a 	mov	r17,r3
 8004dd8:	1027883a 	mov	r19,r2
 8004ddc:	800e7180 	call	800e718 <__fixdfsi>
 8004de0:	1009883a 	mov	r4,r2
 8004de4:	1029883a 	mov	r20,r2
 8004de8:	800e7980 	call	800e798 <__floatsidf>
 8004dec:	9809883a 	mov	r4,r19
 8004df0:	880b883a 	mov	r5,r17
 8004df4:	100d883a 	mov	r6,r2
 8004df8:	180f883a 	mov	r7,r3
 8004dfc:	800de900 	call	800de90 <__subdf3>
 8004e00:	a5000c04 	addi	r20,r20,48
 8004e04:	1009883a 	mov	r4,r2
 8004e08:	180b883a 	mov	r5,r3
 8004e0c:	b80d883a 	mov	r6,r23
 8004e10:	900f883a 	mov	r7,r18
 8004e14:	85000005 	stb	r20,0(r16)
 8004e18:	1023883a 	mov	r17,r2
 8004e1c:	1827883a 	mov	r19,r3
 8004e20:	800d5a40 	call	800d5a4 <__ledf2>
 8004e24:	b5800044 	addi	r22,r22,1
 8004e28:	0009883a 	mov	r4,zero
 8004e2c:	014ffc34 	movhi	r5,16368
 8004e30:	880d883a 	mov	r6,r17
 8004e34:	980f883a 	mov	r7,r19
 8004e38:	103fcf0e 	bge	r2,zero,8004d78 <__alt_data_end+0xf8004d78>
 8004e3c:	d8c01317 	ldw	r3,76(sp)
 8004e40:	dc001117 	ldw	r16,68(sp)
 8004e44:	d8c00615 	stw	r3,24(sp)
 8004e48:	8009883a 	mov	r4,r16
 8004e4c:	e00b883a 	mov	r5,fp
 8004e50:	8007d3c0 	call	8007d3c <_Bfree>
 8004e54:	d9800617 	ldw	r6,24(sp)
 8004e58:	d9c02217 	ldw	r7,136(sp)
 8004e5c:	b0000005 	stb	zero,0(r22)
 8004e60:	30800044 	addi	r2,r6,1
 8004e64:	38800015 	stw	r2,0(r7)
 8004e68:	d8802417 	ldw	r2,144(sp)
 8004e6c:	10026426 	beq	r2,zero,8005800 <_dtoa_r+0x1068>
 8004e70:	15800015 	stw	r22,0(r2)
 8004e74:	d8800717 	ldw	r2,28(sp)
 8004e78:	003e7606 	br	8004854 <__alt_data_end+0xf8004854>
 8004e7c:	00800434 	movhi	r2,16
 8004e80:	10bfffc4 	addi	r2,r2,-1
 8004e84:	88a2703a 	and	r17,r17,r2
 8004e88:	883e831e 	bne	r17,zero,8004898 <__alt_data_end+0xf8004898>
 8004e8c:	00820074 	movhi	r2,2049
 8004e90:	10866504 	addi	r2,r2,6548
 8004e94:	003e8206 	br	80048a0 <__alt_data_end+0xf80048a0>
 8004e98:	10c00204 	addi	r3,r2,8
 8004e9c:	003e8506 	br	80048b4 <__alt_data_end+0xf80048b4>
 8004ea0:	01400434 	movhi	r5,16
 8004ea4:	297fffc4 	addi	r5,r5,-1
 8004ea8:	914a703a 	and	r5,r18,r5
 8004eac:	d9000317 	ldw	r4,12(sp)
 8004eb0:	294ffc34 	orhi	r5,r5,16368
 8004eb4:	a53f0044 	addi	r20,r20,-1023
 8004eb8:	dd400217 	ldw	r21,8(sp)
 8004ebc:	d8000f15 	stw	zero,60(sp)
 8004ec0:	003ea306 	br	8004950 <__alt_data_end+0xf8004950>
 8004ec4:	00820074 	movhi	r2,2049
 8004ec8:	10865c04 	addi	r2,r2,6512
 8004ecc:	003e6106 	br	8004854 <__alt_data_end+0xf8004854>
 8004ed0:	d8000415 	stw	zero,16(sp)
 8004ed4:	8009883a 	mov	r4,r16
 8004ed8:	80001115 	stw	zero,68(r16)
 8004edc:	000b883a 	mov	r5,zero
 8004ee0:	8007c940 	call	8007c94 <_Balloc>
 8004ee4:	00ffffc4 	movi	r3,-1
 8004ee8:	01000044 	movi	r4,1
 8004eec:	d8800715 	stw	r2,28(sp)
 8004ef0:	d8c00d15 	stw	r3,52(sp)
 8004ef4:	80801015 	stw	r2,64(r16)
 8004ef8:	d8002115 	stw	zero,132(sp)
 8004efc:	d8c00915 	stw	r3,36(sp)
 8004f00:	d9000c15 	stw	r4,48(sp)
 8004f04:	d8800117 	ldw	r2,4(sp)
 8004f08:	10008e16 	blt	r2,zero,8005144 <_dtoa_r+0x9ac>
 8004f0c:	d9000617 	ldw	r4,24(sp)
 8004f10:	00c00384 	movi	r3,14
 8004f14:	19008b16 	blt	r3,r4,8005144 <_dtoa_r+0x9ac>
 8004f18:	200490fa 	slli	r2,r4,3
 8004f1c:	d9802117 	ldw	r6,132(sp)
 8004f20:	00c20074 	movhi	r3,2049
 8004f24:	18c68404 	addi	r3,r3,6672
 8004f28:	1885883a 	add	r2,r3,r2
 8004f2c:	14400017 	ldw	r17,0(r2)
 8004f30:	14c00117 	ldw	r19,4(r2)
 8004f34:	3001be16 	blt	r6,zero,8005630 <_dtoa_r+0xe98>
 8004f38:	d9000317 	ldw	r4,12(sp)
 8004f3c:	880d883a 	mov	r6,r17
 8004f40:	980f883a 	mov	r7,r19
 8004f44:	900b883a 	mov	r5,r18
 8004f48:	800caac0 	call	800caac <__divdf3>
 8004f4c:	180b883a 	mov	r5,r3
 8004f50:	1009883a 	mov	r4,r2
 8004f54:	800e7180 	call	800e718 <__fixdfsi>
 8004f58:	1009883a 	mov	r4,r2
 8004f5c:	102f883a 	mov	r23,r2
 8004f60:	800e7980 	call	800e798 <__floatsidf>
 8004f64:	1009883a 	mov	r4,r2
 8004f68:	180b883a 	mov	r5,r3
 8004f6c:	880d883a 	mov	r6,r17
 8004f70:	980f883a 	mov	r7,r19
 8004f74:	800d6900 	call	800d690 <__muldf3>
 8004f78:	d9000317 	ldw	r4,12(sp)
 8004f7c:	900b883a 	mov	r5,r18
 8004f80:	100d883a 	mov	r6,r2
 8004f84:	180f883a 	mov	r7,r3
 8004f88:	800de900 	call	800de90 <__subdf3>
 8004f8c:	d9c00717 	ldw	r7,28(sp)
 8004f90:	1009883a 	mov	r4,r2
 8004f94:	b8800c04 	addi	r2,r23,48
 8004f98:	38800005 	stb	r2,0(r7)
 8004f9c:	3d800044 	addi	r22,r7,1
 8004fa0:	d9c00917 	ldw	r7,36(sp)
 8004fa4:	01800044 	movi	r6,1
 8004fa8:	180b883a 	mov	r5,r3
 8004fac:	2005883a 	mov	r2,r4
 8004fb0:	39803e26 	beq	r7,r6,80050ac <_dtoa_r+0x914>
 8004fb4:	000d883a 	mov	r6,zero
 8004fb8:	01d00934 	movhi	r7,16420
 8004fbc:	800d6900 	call	800d690 <__muldf3>
 8004fc0:	1009883a 	mov	r4,r2
 8004fc4:	180b883a 	mov	r5,r3
 8004fc8:	000d883a 	mov	r6,zero
 8004fcc:	000f883a 	mov	r7,zero
 8004fd0:	1029883a 	mov	r20,r2
 8004fd4:	182b883a 	mov	r21,r3
 8004fd8:	800d4480 	call	800d448 <__eqdf2>
 8004fdc:	103f9a26 	beq	r2,zero,8004e48 <__alt_data_end+0xf8004e48>
 8004fe0:	d8c00717 	ldw	r3,28(sp)
 8004fe4:	d9000917 	ldw	r4,36(sp)
 8004fe8:	b025883a 	mov	r18,r22
 8004fec:	df000415 	stw	fp,16(sp)
 8004ff0:	1905883a 	add	r2,r3,r4
 8004ff4:	15ffffc4 	addi	r23,r2,-1
 8004ff8:	dc000315 	stw	r16,12(sp)
 8004ffc:	00000a06 	br	8005028 <_dtoa_r+0x890>
 8005000:	800d6900 	call	800d690 <__muldf3>
 8005004:	1009883a 	mov	r4,r2
 8005008:	180b883a 	mov	r5,r3
 800500c:	000d883a 	mov	r6,zero
 8005010:	000f883a 	mov	r7,zero
 8005014:	1029883a 	mov	r20,r2
 8005018:	182b883a 	mov	r21,r3
 800501c:	800d4480 	call	800d448 <__eqdf2>
 8005020:	10021926 	beq	r2,zero,8005888 <_dtoa_r+0x10f0>
 8005024:	e025883a 	mov	r18,fp
 8005028:	880d883a 	mov	r6,r17
 800502c:	980f883a 	mov	r7,r19
 8005030:	a009883a 	mov	r4,r20
 8005034:	a80b883a 	mov	r5,r21
 8005038:	800caac0 	call	800caac <__divdf3>
 800503c:	180b883a 	mov	r5,r3
 8005040:	1009883a 	mov	r4,r2
 8005044:	800e7180 	call	800e718 <__fixdfsi>
 8005048:	1009883a 	mov	r4,r2
 800504c:	1021883a 	mov	r16,r2
 8005050:	800e7980 	call	800e798 <__floatsidf>
 8005054:	1009883a 	mov	r4,r2
 8005058:	180b883a 	mov	r5,r3
 800505c:	880d883a 	mov	r6,r17
 8005060:	980f883a 	mov	r7,r19
 8005064:	800d6900 	call	800d690 <__muldf3>
 8005068:	a009883a 	mov	r4,r20
 800506c:	a80b883a 	mov	r5,r21
 8005070:	100d883a 	mov	r6,r2
 8005074:	180f883a 	mov	r7,r3
 8005078:	800de900 	call	800de90 <__subdf3>
 800507c:	82800c04 	addi	r10,r16,48
 8005080:	97000044 	addi	fp,r18,1
 8005084:	92800005 	stb	r10,0(r18)
 8005088:	000d883a 	mov	r6,zero
 800508c:	01d00934 	movhi	r7,16420
 8005090:	1009883a 	mov	r4,r2
 8005094:	180b883a 	mov	r5,r3
 8005098:	e02d883a 	mov	r22,fp
 800509c:	95ffd81e 	bne	r18,r23,8005000 <__alt_data_end+0xf8005000>
 80050a0:	802f883a 	mov	r23,r16
 80050a4:	df000417 	ldw	fp,16(sp)
 80050a8:	dc000317 	ldw	r16,12(sp)
 80050ac:	1009883a 	mov	r4,r2
 80050b0:	180b883a 	mov	r5,r3
 80050b4:	100d883a 	mov	r6,r2
 80050b8:	180f883a 	mov	r7,r3
 80050bc:	800c2300 	call	800c230 <__adddf3>
 80050c0:	8809883a 	mov	r4,r17
 80050c4:	980b883a 	mov	r5,r19
 80050c8:	100d883a 	mov	r6,r2
 80050cc:	180f883a 	mov	r7,r3
 80050d0:	1025883a 	mov	r18,r2
 80050d4:	1829883a 	mov	r20,r3
 80050d8:	800d5a40 	call	800d5a4 <__ledf2>
 80050dc:	10000816 	blt	r2,zero,8005100 <_dtoa_r+0x968>
 80050e0:	8809883a 	mov	r4,r17
 80050e4:	980b883a 	mov	r5,r19
 80050e8:	900d883a 	mov	r6,r18
 80050ec:	a00f883a 	mov	r7,r20
 80050f0:	800d4480 	call	800d448 <__eqdf2>
 80050f4:	103f541e 	bne	r2,zero,8004e48 <__alt_data_end+0xf8004e48>
 80050f8:	bdc0004c 	andi	r23,r23,1
 80050fc:	b83f5226 	beq	r23,zero,8004e48 <__alt_data_end+0xf8004e48>
 8005100:	b53fffc3 	ldbu	r20,-1(r22)
 8005104:	b0ffff84 	addi	r3,r22,-2
 8005108:	01400e44 	movi	r5,57
 800510c:	d9800717 	ldw	r6,28(sp)
 8005110:	00000406 	br	8005124 <_dtoa_r+0x98c>
 8005114:	30824326 	beq	r6,r2,8005a24 <_dtoa_r+0x128c>
 8005118:	1d000003 	ldbu	r20,0(r3)
 800511c:	102d883a 	mov	r22,r2
 8005120:	18ffffc4 	addi	r3,r3,-1
 8005124:	a1003fcc 	andi	r4,r20,255
 8005128:	2100201c 	xori	r4,r4,128
 800512c:	213fe004 	addi	r4,r4,-128
 8005130:	b0bfffc4 	addi	r2,r22,-1
 8005134:	217ff726 	beq	r4,r5,8005114 <__alt_data_end+0xf8005114>
 8005138:	a2400044 	addi	r9,r20,1
 800513c:	12400005 	stb	r9,0(r2)
 8005140:	003f4106 	br	8004e48 <__alt_data_end+0xf8004e48>
 8005144:	d9000c17 	ldw	r4,48(sp)
 8005148:	2000be26 	beq	r4,zero,8005444 <_dtoa_r+0xcac>
 800514c:	d9800417 	ldw	r6,16(sp)
 8005150:	00c00044 	movi	r3,1
 8005154:	19815e0e 	bge	r3,r6,80056d0 <_dtoa_r+0xf38>
 8005158:	d8800917 	ldw	r2,36(sp)
 800515c:	d8c00a17 	ldw	r3,40(sp)
 8005160:	153fffc4 	addi	r20,r2,-1
 8005164:	1d01f816 	blt	r3,r20,8005948 <_dtoa_r+0x11b0>
 8005168:	1d29c83a 	sub	r20,r3,r20
 800516c:	d9c00917 	ldw	r7,36(sp)
 8005170:	3802ad16 	blt	r7,zero,8005c28 <_dtoa_r+0x1490>
 8005174:	dcc00817 	ldw	r19,32(sp)
 8005178:	d8800917 	ldw	r2,36(sp)
 800517c:	d8c00817 	ldw	r3,32(sp)
 8005180:	8009883a 	mov	r4,r16
 8005184:	01400044 	movi	r5,1
 8005188:	1887883a 	add	r3,r3,r2
 800518c:	d8c00815 	stw	r3,32(sp)
 8005190:	a8ab883a 	add	r21,r21,r2
 8005194:	80080c40 	call	80080c4 <__i2b>
 8005198:	1023883a 	mov	r17,r2
 800519c:	98000826 	beq	r19,zero,80051c0 <_dtoa_r+0xa28>
 80051a0:	0540070e 	bge	zero,r21,80051c0 <_dtoa_r+0xa28>
 80051a4:	a805883a 	mov	r2,r21
 80051a8:	9d411716 	blt	r19,r21,8005608 <_dtoa_r+0xe70>
 80051ac:	d9000817 	ldw	r4,32(sp)
 80051b0:	98a7c83a 	sub	r19,r19,r2
 80051b4:	a8abc83a 	sub	r21,r21,r2
 80051b8:	2089c83a 	sub	r4,r4,r2
 80051bc:	d9000815 	stw	r4,32(sp)
 80051c0:	d9800a17 	ldw	r6,40(sp)
 80051c4:	0180140e 	bge	zero,r6,8005218 <_dtoa_r+0xa80>
 80051c8:	d9c00c17 	ldw	r7,48(sp)
 80051cc:	3801d626 	beq	r7,zero,8005928 <_dtoa_r+0x1190>
 80051d0:	05000e0e 	bge	zero,r20,800520c <_dtoa_r+0xa74>
 80051d4:	880b883a 	mov	r5,r17
 80051d8:	8009883a 	mov	r4,r16
 80051dc:	a00d883a 	mov	r6,r20
 80051e0:	800836c0 	call	800836c <__pow5mult>
 80051e4:	e00d883a 	mov	r6,fp
 80051e8:	8009883a 	mov	r4,r16
 80051ec:	100b883a 	mov	r5,r2
 80051f0:	1023883a 	mov	r17,r2
 80051f4:	80081000 	call	8008100 <__multiply>
 80051f8:	102d883a 	mov	r22,r2
 80051fc:	e00b883a 	mov	r5,fp
 8005200:	8009883a 	mov	r4,r16
 8005204:	8007d3c0 	call	8007d3c <_Bfree>
 8005208:	b039883a 	mov	fp,r22
 800520c:	d8800a17 	ldw	r2,40(sp)
 8005210:	150dc83a 	sub	r6,r2,r20
 8005214:	30011f1e 	bne	r6,zero,8005694 <_dtoa_r+0xefc>
 8005218:	8009883a 	mov	r4,r16
 800521c:	01400044 	movi	r5,1
 8005220:	80080c40 	call	80080c4 <__i2b>
 8005224:	d8c00b17 	ldw	r3,44(sp)
 8005228:	1029883a 	mov	r20,r2
 800522c:	00c0050e 	bge	zero,r3,8005244 <_dtoa_r+0xaac>
 8005230:	8009883a 	mov	r4,r16
 8005234:	100b883a 	mov	r5,r2
 8005238:	180d883a 	mov	r6,r3
 800523c:	800836c0 	call	800836c <__pow5mult>
 8005240:	1029883a 	mov	r20,r2
 8005244:	d9000417 	ldw	r4,16(sp)
 8005248:	00800044 	movi	r2,1
 800524c:	1100e00e 	bge	r2,r4,80055d0 <_dtoa_r+0xe38>
 8005250:	0025883a 	mov	r18,zero
 8005254:	d8800b17 	ldw	r2,44(sp)
 8005258:	10015f1e 	bne	r2,zero,80057d8 <_dtoa_r+0x1040>
 800525c:	00800044 	movi	r2,1
 8005260:	1545883a 	add	r2,r2,r21
 8005264:	108007cc 	andi	r2,r2,31
 8005268:	10007a26 	beq	r2,zero,8005454 <_dtoa_r+0xcbc>
 800526c:	01000804 	movi	r4,32
 8005270:	2089c83a 	sub	r4,r4,r2
 8005274:	00c00104 	movi	r3,4
 8005278:	1902d20e 	bge	r3,r4,8005dc4 <_dtoa_r+0x162c>
 800527c:	00c00704 	movi	r3,28
 8005280:	1885c83a 	sub	r2,r3,r2
 8005284:	d8c00817 	ldw	r3,32(sp)
 8005288:	98a7883a 	add	r19,r19,r2
 800528c:	a8ab883a 	add	r21,r21,r2
 8005290:	1887883a 	add	r3,r3,r2
 8005294:	d8c00815 	stw	r3,32(sp)
 8005298:	d9800817 	ldw	r6,32(sp)
 800529c:	0180040e 	bge	zero,r6,80052b0 <_dtoa_r+0xb18>
 80052a0:	e00b883a 	mov	r5,fp
 80052a4:	8009883a 	mov	r4,r16
 80052a8:	80084b40 	call	80084b4 <__lshift>
 80052ac:	1039883a 	mov	fp,r2
 80052b0:	0540050e 	bge	zero,r21,80052c8 <_dtoa_r+0xb30>
 80052b4:	a00b883a 	mov	r5,r20
 80052b8:	8009883a 	mov	r4,r16
 80052bc:	a80d883a 	mov	r6,r21
 80052c0:	80084b40 	call	80084b4 <__lshift>
 80052c4:	1029883a 	mov	r20,r2
 80052c8:	d9c00e17 	ldw	r7,56(sp)
 80052cc:	3801301e 	bne	r7,zero,8005790 <_dtoa_r+0xff8>
 80052d0:	d9c00917 	ldw	r7,36(sp)
 80052d4:	01c1500e 	bge	zero,r7,8005818 <_dtoa_r+0x1080>
 80052d8:	d8800c17 	ldw	r2,48(sp)
 80052dc:	10006b1e 	bne	r2,zero,800548c <_dtoa_r+0xcf4>
 80052e0:	dc800717 	ldw	r18,28(sp)
 80052e4:	dcc00917 	ldw	r19,36(sp)
 80052e8:	902b883a 	mov	r21,r18
 80052ec:	00000206 	br	80052f8 <_dtoa_r+0xb60>
 80052f0:	8007d640 	call	8007d64 <__multadd>
 80052f4:	1039883a 	mov	fp,r2
 80052f8:	e009883a 	mov	r4,fp
 80052fc:	a00b883a 	mov	r5,r20
 8005300:	80045700 	call	8004570 <quorem>
 8005304:	10800c04 	addi	r2,r2,48
 8005308:	90800005 	stb	r2,0(r18)
 800530c:	94800044 	addi	r18,r18,1
 8005310:	9547c83a 	sub	r3,r18,r21
 8005314:	8009883a 	mov	r4,r16
 8005318:	e00b883a 	mov	r5,fp
 800531c:	01800284 	movi	r6,10
 8005320:	000f883a 	mov	r7,zero
 8005324:	1cfff216 	blt	r3,r19,80052f0 <__alt_data_end+0xf80052f0>
 8005328:	102f883a 	mov	r23,r2
 800532c:	d8800917 	ldw	r2,36(sp)
 8005330:	0082410e 	bge	zero,r2,8005c38 <_dtoa_r+0x14a0>
 8005334:	d9000717 	ldw	r4,28(sp)
 8005338:	002b883a 	mov	r21,zero
 800533c:	20ad883a 	add	r22,r4,r2
 8005340:	e00b883a 	mov	r5,fp
 8005344:	8009883a 	mov	r4,r16
 8005348:	01800044 	movi	r6,1
 800534c:	80084b40 	call	80084b4 <__lshift>
 8005350:	1009883a 	mov	r4,r2
 8005354:	a00b883a 	mov	r5,r20
 8005358:	1039883a 	mov	fp,r2
 800535c:	80086040 	call	8008604 <__mcmp>
 8005360:	0080d10e 	bge	zero,r2,80056a8 <_dtoa_r+0xf10>
 8005364:	b13fffc3 	ldbu	r4,-1(r22)
 8005368:	b0ffff84 	addi	r3,r22,-2
 800536c:	01800e44 	movi	r6,57
 8005370:	d9c00717 	ldw	r7,28(sp)
 8005374:	00000406 	br	8005388 <_dtoa_r+0xbf0>
 8005378:	38813c26 	beq	r7,r2,800586c <_dtoa_r+0x10d4>
 800537c:	19000003 	ldbu	r4,0(r3)
 8005380:	102d883a 	mov	r22,r2
 8005384:	18ffffc4 	addi	r3,r3,-1
 8005388:	21403fcc 	andi	r5,r4,255
 800538c:	2940201c 	xori	r5,r5,128
 8005390:	297fe004 	addi	r5,r5,-128
 8005394:	b0bfffc4 	addi	r2,r22,-1
 8005398:	29bff726 	beq	r5,r6,8005378 <__alt_data_end+0xf8005378>
 800539c:	21000044 	addi	r4,r4,1
 80053a0:	11000005 	stb	r4,0(r2)
 80053a4:	8009883a 	mov	r4,r16
 80053a8:	a00b883a 	mov	r5,r20
 80053ac:	8007d3c0 	call	8007d3c <_Bfree>
 80053b0:	883ea526 	beq	r17,zero,8004e48 <__alt_data_end+0xf8004e48>
 80053b4:	a8000426 	beq	r21,zero,80053c8 <_dtoa_r+0xc30>
 80053b8:	ac400326 	beq	r21,r17,80053c8 <_dtoa_r+0xc30>
 80053bc:	8009883a 	mov	r4,r16
 80053c0:	a80b883a 	mov	r5,r21
 80053c4:	8007d3c0 	call	8007d3c <_Bfree>
 80053c8:	8009883a 	mov	r4,r16
 80053cc:	880b883a 	mov	r5,r17
 80053d0:	8007d3c0 	call	8007d3c <_Bfree>
 80053d4:	003e9c06 	br	8004e48 <__alt_data_end+0xf8004e48>
 80053d8:	01c00044 	movi	r7,1
 80053dc:	d9c00e15 	stw	r7,56(sp)
 80053e0:	003d9906 	br	8004a48 <__alt_data_end+0xf8004a48>
 80053e4:	d8c00817 	ldw	r3,32(sp)
 80053e8:	d9000617 	ldw	r4,24(sp)
 80053ec:	d8000b15 	stw	zero,44(sp)
 80053f0:	1907c83a 	sub	r3,r3,r4
 80053f4:	010dc83a 	sub	r6,zero,r4
 80053f8:	d8c00815 	stw	r3,32(sp)
 80053fc:	d9800a15 	stw	r6,40(sp)
 8005400:	003d9a06 	br	8004a6c <__alt_data_end+0xf8004a6c>
 8005404:	056bc83a 	sub	r21,zero,r21
 8005408:	dd400815 	stw	r21,32(sp)
 800540c:	002b883a 	mov	r21,zero
 8005410:	003d9106 	br	8004a58 <__alt_data_end+0xf8004a58>
 8005414:	d9000617 	ldw	r4,24(sp)
 8005418:	800e7980 	call	800e798 <__floatsidf>
 800541c:	1009883a 	mov	r4,r2
 8005420:	180b883a 	mov	r5,r3
 8005424:	980d883a 	mov	r6,r19
 8005428:	880f883a 	mov	r7,r17
 800542c:	800d4480 	call	800d448 <__eqdf2>
 8005430:	103d7426 	beq	r2,zero,8004a04 <__alt_data_end+0xf8004a04>
 8005434:	d8c00617 	ldw	r3,24(sp)
 8005438:	18ffffc4 	addi	r3,r3,-1
 800543c:	d8c00615 	stw	r3,24(sp)
 8005440:	003d7006 	br	8004a04 <__alt_data_end+0xf8004a04>
 8005444:	dd000a17 	ldw	r20,40(sp)
 8005448:	dcc00817 	ldw	r19,32(sp)
 800544c:	0023883a 	mov	r17,zero
 8005450:	003f5206 	br	800519c <__alt_data_end+0xf800519c>
 8005454:	00800704 	movi	r2,28
 8005458:	d9000817 	ldw	r4,32(sp)
 800545c:	98a7883a 	add	r19,r19,r2
 8005460:	a8ab883a 	add	r21,r21,r2
 8005464:	2089883a 	add	r4,r4,r2
 8005468:	d9000815 	stw	r4,32(sp)
 800546c:	003f8a06 	br	8005298 <__alt_data_end+0xf8005298>
 8005470:	d9c00317 	ldw	r7,12(sp)
 8005474:	013efb84 	movi	r4,-1042
 8005478:	2509c83a 	sub	r4,r4,r20
 800547c:	3908983a 	sll	r4,r7,r4
 8005480:	003d2c06 	br	8004934 <__alt_data_end+0xf8004934>
 8005484:	d8000e15 	stw	zero,56(sp)
 8005488:	003d6f06 	br	8004a48 <__alt_data_end+0xf8004a48>
 800548c:	04c0050e 	bge	zero,r19,80054a4 <_dtoa_r+0xd0c>
 8005490:	880b883a 	mov	r5,r17
 8005494:	8009883a 	mov	r4,r16
 8005498:	980d883a 	mov	r6,r19
 800549c:	80084b40 	call	80084b4 <__lshift>
 80054a0:	1023883a 	mov	r17,r2
 80054a4:	9001681e 	bne	r18,zero,8005a48 <_dtoa_r+0x12b0>
 80054a8:	8827883a 	mov	r19,r17
 80054ac:	d8c00717 	ldw	r3,28(sp)
 80054b0:	d9000917 	ldw	r4,36(sp)
 80054b4:	1dffffc4 	addi	r23,r3,-1
 80054b8:	1825883a 	mov	r18,r3
 80054bc:	d8c00317 	ldw	r3,12(sp)
 80054c0:	b92f883a 	add	r23,r23,r4
 80054c4:	ddc00515 	stw	r23,20(sp)
 80054c8:	18c0004c 	andi	r3,r3,1
 80054cc:	d8c00315 	stw	r3,12(sp)
 80054d0:	e009883a 	mov	r4,fp
 80054d4:	a00b883a 	mov	r5,r20
 80054d8:	80045700 	call	8004570 <quorem>
 80054dc:	e009883a 	mov	r4,fp
 80054e0:	880b883a 	mov	r5,r17
 80054e4:	102d883a 	mov	r22,r2
 80054e8:	80086040 	call	8008604 <__mcmp>
 80054ec:	8009883a 	mov	r4,r16
 80054f0:	a00b883a 	mov	r5,r20
 80054f4:	980d883a 	mov	r6,r19
 80054f8:	102b883a 	mov	r21,r2
 80054fc:	80086640 	call	8008664 <__mdiff>
 8005500:	1007883a 	mov	r3,r2
 8005504:	10800317 	ldw	r2,12(r2)
 8005508:	b5c00c04 	addi	r23,r22,48
 800550c:	10009b1e 	bne	r2,zero,800577c <_dtoa_r+0xfe4>
 8005510:	180b883a 	mov	r5,r3
 8005514:	e009883a 	mov	r4,fp
 8005518:	d8c01515 	stw	r3,84(sp)
 800551c:	80086040 	call	8008604 <__mcmp>
 8005520:	d8c01517 	ldw	r3,84(sp)
 8005524:	8009883a 	mov	r4,r16
 8005528:	d8801515 	stw	r2,84(sp)
 800552c:	180b883a 	mov	r5,r3
 8005530:	8007d3c0 	call	8007d3c <_Bfree>
 8005534:	d8801517 	ldw	r2,84(sp)
 8005538:	1000041e 	bne	r2,zero,800554c <_dtoa_r+0xdb4>
 800553c:	d9000417 	ldw	r4,16(sp)
 8005540:	2000021e 	bne	r4,zero,800554c <_dtoa_r+0xdb4>
 8005544:	d8c00317 	ldw	r3,12(sp)
 8005548:	18007926 	beq	r3,zero,8005730 <_dtoa_r+0xf98>
 800554c:	a8006616 	blt	r21,zero,80056e8 <_dtoa_r+0xf50>
 8005550:	a800041e 	bne	r21,zero,8005564 <_dtoa_r+0xdcc>
 8005554:	d9000417 	ldw	r4,16(sp)
 8005558:	2000021e 	bne	r4,zero,8005564 <_dtoa_r+0xdcc>
 800555c:	d8c00317 	ldw	r3,12(sp)
 8005560:	18006126 	beq	r3,zero,80056e8 <_dtoa_r+0xf50>
 8005564:	00814916 	blt	zero,r2,8005a8c <_dtoa_r+0x12f4>
 8005568:	d8c00517 	ldw	r3,20(sp)
 800556c:	95400044 	addi	r21,r18,1
 8005570:	95c00005 	stb	r23,0(r18)
 8005574:	a82d883a 	mov	r22,r21
 8005578:	90c14c26 	beq	r18,r3,8005aac <_dtoa_r+0x1314>
 800557c:	e00b883a 	mov	r5,fp
 8005580:	8009883a 	mov	r4,r16
 8005584:	01800284 	movi	r6,10
 8005588:	000f883a 	mov	r7,zero
 800558c:	8007d640 	call	8007d64 <__multadd>
 8005590:	1039883a 	mov	fp,r2
 8005594:	8cc07026 	beq	r17,r19,8005758 <_dtoa_r+0xfc0>
 8005598:	880b883a 	mov	r5,r17
 800559c:	01800284 	movi	r6,10
 80055a0:	000f883a 	mov	r7,zero
 80055a4:	8009883a 	mov	r4,r16
 80055a8:	8007d640 	call	8007d64 <__multadd>
 80055ac:	980b883a 	mov	r5,r19
 80055b0:	8009883a 	mov	r4,r16
 80055b4:	01800284 	movi	r6,10
 80055b8:	000f883a 	mov	r7,zero
 80055bc:	1023883a 	mov	r17,r2
 80055c0:	8007d640 	call	8007d64 <__multadd>
 80055c4:	1027883a 	mov	r19,r2
 80055c8:	a825883a 	mov	r18,r21
 80055cc:	003fc006 	br	80054d0 <__alt_data_end+0xf80054d0>
 80055d0:	d9800317 	ldw	r6,12(sp)
 80055d4:	303f1e1e 	bne	r6,zero,8005250 <__alt_data_end+0xf8005250>
 80055d8:	00c00434 	movhi	r3,16
 80055dc:	18ffffc4 	addi	r3,r3,-1
 80055e0:	90c6703a 	and	r3,r18,r3
 80055e4:	183f1a1e 	bne	r3,zero,8005250 <__alt_data_end+0xf8005250>
 80055e8:	949ffc2c 	andhi	r18,r18,32752
 80055ec:	903f1826 	beq	r18,zero,8005250 <__alt_data_end+0xf8005250>
 80055f0:	d9c00817 	ldw	r7,32(sp)
 80055f4:	a8ab883a 	add	r21,r21,r2
 80055f8:	1025883a 	mov	r18,r2
 80055fc:	388f883a 	add	r7,r7,r2
 8005600:	d9c00815 	stw	r7,32(sp)
 8005604:	003f1306 	br	8005254 <__alt_data_end+0xf8005254>
 8005608:	9805883a 	mov	r2,r19
 800560c:	003ee706 	br	80051ac <__alt_data_end+0xf80051ac>
 8005610:	01800044 	movi	r6,1
 8005614:	d9800c15 	stw	r6,48(sp)
 8005618:	d8802117 	ldw	r2,132(sp)
 800561c:	0080da0e 	bge	zero,r2,8005988 <_dtoa_r+0x11f0>
 8005620:	100d883a 	mov	r6,r2
 8005624:	d8800d15 	stw	r2,52(sp)
 8005628:	d8800915 	stw	r2,36(sp)
 800562c:	003d2a06 	br	8004ad8 <__alt_data_end+0xf8004ad8>
 8005630:	d8800917 	ldw	r2,36(sp)
 8005634:	00be4016 	blt	zero,r2,8004f38 <__alt_data_end+0xf8004f38>
 8005638:	1000b81e 	bne	r2,zero,800591c <_dtoa_r+0x1184>
 800563c:	8809883a 	mov	r4,r17
 8005640:	980b883a 	mov	r5,r19
 8005644:	000d883a 	mov	r6,zero
 8005648:	01d00534 	movhi	r7,16404
 800564c:	800d6900 	call	800d690 <__muldf3>
 8005650:	d9800317 	ldw	r6,12(sp)
 8005654:	1009883a 	mov	r4,r2
 8005658:	180b883a 	mov	r5,r3
 800565c:	900f883a 	mov	r7,r18
 8005660:	800d4cc0 	call	800d4cc <__gedf2>
 8005664:	0029883a 	mov	r20,zero
 8005668:	0023883a 	mov	r17,zero
 800566c:	10007716 	blt	r2,zero,800584c <_dtoa_r+0x10b4>
 8005670:	d9002117 	ldw	r4,132(sp)
 8005674:	dd800717 	ldw	r22,28(sp)
 8005678:	0108303a 	nor	r4,zero,r4
 800567c:	d9000615 	stw	r4,24(sp)
 8005680:	8009883a 	mov	r4,r16
 8005684:	a00b883a 	mov	r5,r20
 8005688:	8007d3c0 	call	8007d3c <_Bfree>
 800568c:	883f4e1e 	bne	r17,zero,80053c8 <__alt_data_end+0xf80053c8>
 8005690:	003ded06 	br	8004e48 <__alt_data_end+0xf8004e48>
 8005694:	e00b883a 	mov	r5,fp
 8005698:	8009883a 	mov	r4,r16
 800569c:	800836c0 	call	800836c <__pow5mult>
 80056a0:	1039883a 	mov	fp,r2
 80056a4:	003edc06 	br	8005218 <__alt_data_end+0xf8005218>
 80056a8:	1000021e 	bne	r2,zero,80056b4 <_dtoa_r+0xf1c>
 80056ac:	ba40004c 	andi	r9,r23,1
 80056b0:	483f2c1e 	bne	r9,zero,8005364 <__alt_data_end+0xf8005364>
 80056b4:	01000c04 	movi	r4,48
 80056b8:	00000106 	br	80056c0 <_dtoa_r+0xf28>
 80056bc:	102d883a 	mov	r22,r2
 80056c0:	b0bfffc4 	addi	r2,r22,-1
 80056c4:	10c00007 	ldb	r3,0(r2)
 80056c8:	193ffc26 	beq	r3,r4,80056bc <__alt_data_end+0xf80056bc>
 80056cc:	003f3506 	br	80053a4 <__alt_data_end+0xf80053a4>
 80056d0:	d9c00f17 	ldw	r7,60(sp)
 80056d4:	38015a26 	beq	r7,zero,8005c40 <_dtoa_r+0x14a8>
 80056d8:	10810cc4 	addi	r2,r2,1075
 80056dc:	dd000a17 	ldw	r20,40(sp)
 80056e0:	dcc00817 	ldw	r19,32(sp)
 80056e4:	003ea506 	br	800517c <__alt_data_end+0xf800517c>
 80056e8:	00800c0e 	bge	zero,r2,800571c <_dtoa_r+0xf84>
 80056ec:	e00b883a 	mov	r5,fp
 80056f0:	8009883a 	mov	r4,r16
 80056f4:	01800044 	movi	r6,1
 80056f8:	80084b40 	call	80084b4 <__lshift>
 80056fc:	1009883a 	mov	r4,r2
 8005700:	a00b883a 	mov	r5,r20
 8005704:	1039883a 	mov	fp,r2
 8005708:	80086040 	call	8008604 <__mcmp>
 800570c:	0081930e 	bge	zero,r2,8005d5c <_dtoa_r+0x15c4>
 8005710:	00800e44 	movi	r2,57
 8005714:	b8800a26 	beq	r23,r2,8005740 <_dtoa_r+0xfa8>
 8005718:	b5c00c44 	addi	r23,r22,49
 800571c:	882b883a 	mov	r21,r17
 8005720:	95800044 	addi	r22,r18,1
 8005724:	95c00005 	stb	r23,0(r18)
 8005728:	9823883a 	mov	r17,r19
 800572c:	003f1d06 	br	80053a4 <__alt_data_end+0xf80053a4>
 8005730:	00800e44 	movi	r2,57
 8005734:	b8800226 	beq	r23,r2,8005740 <_dtoa_r+0xfa8>
 8005738:	057ff716 	blt	zero,r21,8005718 <__alt_data_end+0xf8005718>
 800573c:	003ff706 	br	800571c <__alt_data_end+0xf800571c>
 8005740:	01000e44 	movi	r4,57
 8005744:	882b883a 	mov	r21,r17
 8005748:	95800044 	addi	r22,r18,1
 800574c:	91000005 	stb	r4,0(r18)
 8005750:	9823883a 	mov	r17,r19
 8005754:	003f0406 	br	8005368 <__alt_data_end+0xf8005368>
 8005758:	880b883a 	mov	r5,r17
 800575c:	8009883a 	mov	r4,r16
 8005760:	01800284 	movi	r6,10
 8005764:	000f883a 	mov	r7,zero
 8005768:	8007d640 	call	8007d64 <__multadd>
 800576c:	1023883a 	mov	r17,r2
 8005770:	1027883a 	mov	r19,r2
 8005774:	a825883a 	mov	r18,r21
 8005778:	003f5506 	br	80054d0 <__alt_data_end+0xf80054d0>
 800577c:	8009883a 	mov	r4,r16
 8005780:	180b883a 	mov	r5,r3
 8005784:	8007d3c0 	call	8007d3c <_Bfree>
 8005788:	00800044 	movi	r2,1
 800578c:	003f6f06 	br	800554c <__alt_data_end+0xf800554c>
 8005790:	e009883a 	mov	r4,fp
 8005794:	a00b883a 	mov	r5,r20
 8005798:	80086040 	call	8008604 <__mcmp>
 800579c:	103ecc0e 	bge	r2,zero,80052d0 <__alt_data_end+0xf80052d0>
 80057a0:	e00b883a 	mov	r5,fp
 80057a4:	8009883a 	mov	r4,r16
 80057a8:	01800284 	movi	r6,10
 80057ac:	000f883a 	mov	r7,zero
 80057b0:	8007d640 	call	8007d64 <__multadd>
 80057b4:	1039883a 	mov	fp,r2
 80057b8:	d8800617 	ldw	r2,24(sp)
 80057bc:	d8c00c17 	ldw	r3,48(sp)
 80057c0:	10bfffc4 	addi	r2,r2,-1
 80057c4:	d8800615 	stw	r2,24(sp)
 80057c8:	1801681e 	bne	r3,zero,8005d6c <_dtoa_r+0x15d4>
 80057cc:	d9800d17 	ldw	r6,52(sp)
 80057d0:	d9800915 	stw	r6,36(sp)
 80057d4:	003ebe06 	br	80052d0 <__alt_data_end+0xf80052d0>
 80057d8:	a0800417 	ldw	r2,16(r20)
 80057dc:	10800104 	addi	r2,r2,4
 80057e0:	1085883a 	add	r2,r2,r2
 80057e4:	1085883a 	add	r2,r2,r2
 80057e8:	a085883a 	add	r2,r20,r2
 80057ec:	11000017 	ldw	r4,0(r2)
 80057f0:	8007fac0 	call	8007fac <__hi0bits>
 80057f4:	00c00804 	movi	r3,32
 80057f8:	1885c83a 	sub	r2,r3,r2
 80057fc:	003e9806 	br	8005260 <__alt_data_end+0xf8005260>
 8005800:	d8800717 	ldw	r2,28(sp)
 8005804:	003c1306 	br	8004854 <__alt_data_end+0xf8004854>
 8005808:	00800084 	movi	r2,2
 800580c:	18bdb11e 	bne	r3,r2,8004ed4 <__alt_data_end+0xf8004ed4>
 8005810:	d8000c15 	stw	zero,48(sp)
 8005814:	003f8006 	br	8005618 <__alt_data_end+0xf8005618>
 8005818:	d8c00417 	ldw	r3,16(sp)
 800581c:	00800084 	movi	r2,2
 8005820:	10fead0e 	bge	r2,r3,80052d8 <__alt_data_end+0xf80052d8>
 8005824:	383f921e 	bne	r7,zero,8005670 <__alt_data_end+0xf8005670>
 8005828:	a00b883a 	mov	r5,r20
 800582c:	8009883a 	mov	r4,r16
 8005830:	01800144 	movi	r6,5
 8005834:	8007d640 	call	8007d64 <__multadd>
 8005838:	e009883a 	mov	r4,fp
 800583c:	100b883a 	mov	r5,r2
 8005840:	1029883a 	mov	r20,r2
 8005844:	80086040 	call	8008604 <__mcmp>
 8005848:	00bf890e 	bge	zero,r2,8005670 <__alt_data_end+0xf8005670>
 800584c:	d9c00617 	ldw	r7,24(sp)
 8005850:	d9800717 	ldw	r6,28(sp)
 8005854:	00800c44 	movi	r2,49
 8005858:	39c00044 	addi	r7,r7,1
 800585c:	35800044 	addi	r22,r6,1
 8005860:	30800005 	stb	r2,0(r6)
 8005864:	d9c00615 	stw	r7,24(sp)
 8005868:	003f8506 	br	8005680 <__alt_data_end+0xf8005680>
 800586c:	d9800617 	ldw	r6,24(sp)
 8005870:	d9c00717 	ldw	r7,28(sp)
 8005874:	00800c44 	movi	r2,49
 8005878:	31800044 	addi	r6,r6,1
 800587c:	d9800615 	stw	r6,24(sp)
 8005880:	38800005 	stb	r2,0(r7)
 8005884:	003ec706 	br	80053a4 <__alt_data_end+0xf80053a4>
 8005888:	df000417 	ldw	fp,16(sp)
 800588c:	dc000317 	ldw	r16,12(sp)
 8005890:	003d6d06 	br	8004e48 <__alt_data_end+0xf8004e48>
 8005894:	8809883a 	mov	r4,r17
 8005898:	800e7980 	call	800e798 <__floatsidf>
 800589c:	9809883a 	mov	r4,r19
 80058a0:	a00b883a 	mov	r5,r20
 80058a4:	100d883a 	mov	r6,r2
 80058a8:	180f883a 	mov	r7,r3
 80058ac:	800d6900 	call	800d690 <__muldf3>
 80058b0:	1009883a 	mov	r4,r2
 80058b4:	180b883a 	mov	r5,r3
 80058b8:	000d883a 	mov	r6,zero
 80058bc:	01d00734 	movhi	r7,16412
 80058c0:	800c2300 	call	800c230 <__adddf3>
 80058c4:	05bf3034 	movhi	r22,64704
 80058c8:	1023883a 	mov	r17,r2
 80058cc:	1daf883a 	add	r23,r3,r22
 80058d0:	9809883a 	mov	r4,r19
 80058d4:	a00b883a 	mov	r5,r20
 80058d8:	000d883a 	mov	r6,zero
 80058dc:	01d00534 	movhi	r7,16404
 80058e0:	800de900 	call	800de90 <__subdf3>
 80058e4:	1009883a 	mov	r4,r2
 80058e8:	180b883a 	mov	r5,r3
 80058ec:	880d883a 	mov	r6,r17
 80058f0:	b80f883a 	mov	r7,r23
 80058f4:	1027883a 	mov	r19,r2
 80058f8:	1829883a 	mov	r20,r3
 80058fc:	800d4cc0 	call	800d4cc <__gedf2>
 8005900:	00806d16 	blt	zero,r2,8005ab8 <_dtoa_r+0x1320>
 8005904:	b9e0003c 	xorhi	r7,r23,32768
 8005908:	9809883a 	mov	r4,r19
 800590c:	a00b883a 	mov	r5,r20
 8005910:	880d883a 	mov	r6,r17
 8005914:	800d5a40 	call	800d5a4 <__ledf2>
 8005918:	103d7a0e 	bge	r2,zero,8004f04 <__alt_data_end+0xf8004f04>
 800591c:	0029883a 	mov	r20,zero
 8005920:	0023883a 	mov	r17,zero
 8005924:	003f5206 	br	8005670 <__alt_data_end+0xf8005670>
 8005928:	d9800a17 	ldw	r6,40(sp)
 800592c:	e00b883a 	mov	r5,fp
 8005930:	8009883a 	mov	r4,r16
 8005934:	800836c0 	call	800836c <__pow5mult>
 8005938:	1039883a 	mov	fp,r2
 800593c:	003e3606 	br	8005218 <__alt_data_end+0xf8005218>
 8005940:	d8000c15 	stw	zero,48(sp)
 8005944:	003c5c06 	br	8004ab8 <__alt_data_end+0xf8004ab8>
 8005948:	d9000a17 	ldw	r4,40(sp)
 800594c:	d9800b17 	ldw	r6,44(sp)
 8005950:	dd000a15 	stw	r20,40(sp)
 8005954:	a105c83a 	sub	r2,r20,r4
 8005958:	308d883a 	add	r6,r6,r2
 800595c:	d9800b15 	stw	r6,44(sp)
 8005960:	0029883a 	mov	r20,zero
 8005964:	003e0106 	br	800516c <__alt_data_end+0xf800516c>
 8005968:	dcc00317 	ldw	r19,12(sp)
 800596c:	9029883a 	mov	r20,r18
 8005970:	04400084 	movi	r17,2
 8005974:	003c8606 	br	8004b90 <__alt_data_end+0xf8004b90>
 8005978:	3023883a 	mov	r17,r6
 800597c:	80001115 	stw	zero,68(r16)
 8005980:	000b883a 	mov	r5,zero
 8005984:	003c6006 	br	8004b08 <__alt_data_end+0xf8004b08>
 8005988:	04400044 	movi	r17,1
 800598c:	dc400d15 	stw	r17,52(sp)
 8005990:	dc400915 	stw	r17,36(sp)
 8005994:	dc402115 	stw	r17,132(sp)
 8005998:	003ff806 	br	800597c <__alt_data_end+0xf800597c>
 800599c:	d8800617 	ldw	r2,24(sp)
 80059a0:	00adc83a 	sub	r22,zero,r2
 80059a4:	b000ac26 	beq	r22,zero,8005c58 <_dtoa_r+0x14c0>
 80059a8:	b08003cc 	andi	r2,r22,15
 80059ac:	100490fa 	slli	r2,r2,3
 80059b0:	00c20074 	movhi	r3,2049
 80059b4:	18c68404 	addi	r3,r3,6672
 80059b8:	d9000317 	ldw	r4,12(sp)
 80059bc:	1885883a 	add	r2,r3,r2
 80059c0:	11800017 	ldw	r6,0(r2)
 80059c4:	11c00117 	ldw	r7,4(r2)
 80059c8:	b02dd13a 	srai	r22,r22,4
 80059cc:	900b883a 	mov	r5,r18
 80059d0:	800d6900 	call	800d690 <__muldf3>
 80059d4:	1027883a 	mov	r19,r2
 80059d8:	1829883a 	mov	r20,r3
 80059dc:	b000ec26 	beq	r22,zero,8005d90 <_dtoa_r+0x15f8>
 80059e0:	05c20074 	movhi	r23,2049
 80059e4:	bdc67a04 	addi	r23,r23,6632
 80059e8:	04400084 	movi	r17,2
 80059ec:	b180004c 	andi	r6,r22,1
 80059f0:	1009883a 	mov	r4,r2
 80059f4:	b02dd07a 	srai	r22,r22,1
 80059f8:	180b883a 	mov	r5,r3
 80059fc:	30000426 	beq	r6,zero,8005a10 <_dtoa_r+0x1278>
 8005a00:	b9800017 	ldw	r6,0(r23)
 8005a04:	b9c00117 	ldw	r7,4(r23)
 8005a08:	8c400044 	addi	r17,r17,1
 8005a0c:	800d6900 	call	800d690 <__muldf3>
 8005a10:	bdc00204 	addi	r23,r23,8
 8005a14:	b03ff51e 	bne	r22,zero,80059ec <__alt_data_end+0xf80059ec>
 8005a18:	1027883a 	mov	r19,r2
 8005a1c:	1829883a 	mov	r20,r3
 8005a20:	003c7406 	br	8004bf4 <__alt_data_end+0xf8004bf4>
 8005a24:	d9800617 	ldw	r6,24(sp)
 8005a28:	d9c00717 	ldw	r7,28(sp)
 8005a2c:	00c00c04 	movi	r3,48
 8005a30:	31800044 	addi	r6,r6,1
 8005a34:	38c00005 	stb	r3,0(r7)
 8005a38:	02400c44 	movi	r9,49
 8005a3c:	d9800615 	stw	r6,24(sp)
 8005a40:	12400005 	stb	r9,0(r2)
 8005a44:	003d0006 	br	8004e48 <__alt_data_end+0xf8004e48>
 8005a48:	89400117 	ldw	r5,4(r17)
 8005a4c:	8009883a 	mov	r4,r16
 8005a50:	8007c940 	call	8007c94 <_Balloc>
 8005a54:	89800417 	ldw	r6,16(r17)
 8005a58:	11000304 	addi	r4,r2,12
 8005a5c:	89400304 	addi	r5,r17,12
 8005a60:	31800084 	addi	r6,r6,2
 8005a64:	318d883a 	add	r6,r6,r6
 8005a68:	318d883a 	add	r6,r6,r6
 8005a6c:	1025883a 	mov	r18,r2
 8005a70:	80079380 	call	8007938 <memcpy>
 8005a74:	8009883a 	mov	r4,r16
 8005a78:	900b883a 	mov	r5,r18
 8005a7c:	01800044 	movi	r6,1
 8005a80:	80084b40 	call	80084b4 <__lshift>
 8005a84:	1027883a 	mov	r19,r2
 8005a88:	003e8806 	br	80054ac <__alt_data_end+0xf80054ac>
 8005a8c:	00800e44 	movi	r2,57
 8005a90:	b8bf2b26 	beq	r23,r2,8005740 <__alt_data_end+0xf8005740>
 8005a94:	ba400044 	addi	r9,r23,1
 8005a98:	882b883a 	mov	r21,r17
 8005a9c:	95800044 	addi	r22,r18,1
 8005aa0:	92400005 	stb	r9,0(r18)
 8005aa4:	9823883a 	mov	r17,r19
 8005aa8:	003e3e06 	br	80053a4 <__alt_data_end+0xf80053a4>
 8005aac:	882b883a 	mov	r21,r17
 8005ab0:	9823883a 	mov	r17,r19
 8005ab4:	003e2206 	br	8005340 <__alt_data_end+0xf8005340>
 8005ab8:	0029883a 	mov	r20,zero
 8005abc:	0023883a 	mov	r17,zero
 8005ac0:	003f6206 	br	800584c <__alt_data_end+0xf800584c>
 8005ac4:	59bfffc4 	addi	r6,r11,-1
 8005ac8:	300490fa 	slli	r2,r6,3
 8005acc:	00c20074 	movhi	r3,2049
 8005ad0:	18c68404 	addi	r3,r3,6672
 8005ad4:	b80f883a 	mov	r7,r23
 8005ad8:	1885883a 	add	r2,r3,r2
 8005adc:	11000017 	ldw	r4,0(r2)
 8005ae0:	11400117 	ldw	r5,4(r2)
 8005ae4:	d8800717 	ldw	r2,28(sp)
 8005ae8:	d9801015 	stw	r6,64(sp)
 8005aec:	880d883a 	mov	r6,r17
 8005af0:	dac01615 	stw	r11,88(sp)
 8005af4:	15800044 	addi	r22,r2,1
 8005af8:	800d6900 	call	800d690 <__muldf3>
 8005afc:	a00b883a 	mov	r5,r20
 8005b00:	9809883a 	mov	r4,r19
 8005b04:	d8c01215 	stw	r3,72(sp)
 8005b08:	d8801115 	stw	r2,68(sp)
 8005b0c:	800e7180 	call	800e718 <__fixdfsi>
 8005b10:	1009883a 	mov	r4,r2
 8005b14:	1023883a 	mov	r17,r2
 8005b18:	800e7980 	call	800e798 <__floatsidf>
 8005b1c:	9809883a 	mov	r4,r19
 8005b20:	a00b883a 	mov	r5,r20
 8005b24:	100d883a 	mov	r6,r2
 8005b28:	180f883a 	mov	r7,r3
 8005b2c:	800de900 	call	800de90 <__subdf3>
 8005b30:	1815883a 	mov	r10,r3
 8005b34:	d8c00717 	ldw	r3,28(sp)
 8005b38:	8c400c04 	addi	r17,r17,48
 8005b3c:	102f883a 	mov	r23,r2
 8005b40:	1c400005 	stb	r17,0(r3)
 8005b44:	dac01617 	ldw	r11,88(sp)
 8005b48:	00800044 	movi	r2,1
 8005b4c:	58802426 	beq	r11,r2,8005be0 <_dtoa_r+0x1448>
 8005b50:	d9800717 	ldw	r6,28(sp)
 8005b54:	dc001415 	stw	r16,80(sp)
 8005b58:	b805883a 	mov	r2,r23
 8005b5c:	32d7883a 	add	r11,r6,r11
 8005b60:	b027883a 	mov	r19,r22
 8005b64:	5821883a 	mov	r16,r11
 8005b68:	5007883a 	mov	r3,r10
 8005b6c:	902f883a 	mov	r23,r18
 8005b70:	000d883a 	mov	r6,zero
 8005b74:	01d00934 	movhi	r7,16420
 8005b78:	1009883a 	mov	r4,r2
 8005b7c:	180b883a 	mov	r5,r3
 8005b80:	800d6900 	call	800d690 <__muldf3>
 8005b84:	180b883a 	mov	r5,r3
 8005b88:	1009883a 	mov	r4,r2
 8005b8c:	1829883a 	mov	r20,r3
 8005b90:	1025883a 	mov	r18,r2
 8005b94:	800e7180 	call	800e718 <__fixdfsi>
 8005b98:	1009883a 	mov	r4,r2
 8005b9c:	1023883a 	mov	r17,r2
 8005ba0:	800e7980 	call	800e798 <__floatsidf>
 8005ba4:	9009883a 	mov	r4,r18
 8005ba8:	a00b883a 	mov	r5,r20
 8005bac:	100d883a 	mov	r6,r2
 8005bb0:	180f883a 	mov	r7,r3
 8005bb4:	8c400c04 	addi	r17,r17,48
 8005bb8:	800de900 	call	800de90 <__subdf3>
 8005bbc:	9cc00044 	addi	r19,r19,1
 8005bc0:	9c7fffc5 	stb	r17,-1(r19)
 8005bc4:	9c3fea1e 	bne	r19,r16,8005b70 <__alt_data_end+0xf8005b70>
 8005bc8:	d9c01017 	ldw	r7,64(sp)
 8005bcc:	dc001417 	ldw	r16,80(sp)
 8005bd0:	b825883a 	mov	r18,r23
 8005bd4:	1815883a 	mov	r10,r3
 8005bd8:	102f883a 	mov	r23,r2
 8005bdc:	b1ed883a 	add	r22,r22,r7
 8005be0:	d9001117 	ldw	r4,68(sp)
 8005be4:	d9401217 	ldw	r5,72(sp)
 8005be8:	000d883a 	mov	r6,zero
 8005bec:	01cff834 	movhi	r7,16352
 8005bf0:	da801615 	stw	r10,88(sp)
 8005bf4:	800c2300 	call	800c230 <__adddf3>
 8005bf8:	da801617 	ldw	r10,88(sp)
 8005bfc:	1009883a 	mov	r4,r2
 8005c00:	180b883a 	mov	r5,r3
 8005c04:	500f883a 	mov	r7,r10
 8005c08:	b80d883a 	mov	r6,r23
 8005c0c:	800d5a40 	call	800d5a4 <__ledf2>
 8005c10:	da801617 	ldw	r10,88(sp)
 8005c14:	1000330e 	bge	r2,zero,8005ce4 <_dtoa_r+0x154c>
 8005c18:	d9001317 	ldw	r4,76(sp)
 8005c1c:	b53fffc3 	ldbu	r20,-1(r22)
 8005c20:	d9000615 	stw	r4,24(sp)
 8005c24:	003d3706 	br	8005104 <__alt_data_end+0xf8005104>
 8005c28:	d8800817 	ldw	r2,32(sp)
 8005c2c:	11e7c83a 	sub	r19,r2,r7
 8005c30:	0005883a 	mov	r2,zero
 8005c34:	003d5106 	br	800517c <__alt_data_end+0xf800517c>
 8005c38:	00800044 	movi	r2,1
 8005c3c:	003dbd06 	br	8005334 <__alt_data_end+0xf8005334>
 8005c40:	d8800217 	ldw	r2,8(sp)
 8005c44:	00c00d84 	movi	r3,54
 8005c48:	dd000a17 	ldw	r20,40(sp)
 8005c4c:	1885c83a 	sub	r2,r3,r2
 8005c50:	dcc00817 	ldw	r19,32(sp)
 8005c54:	003d4906 	br	800517c <__alt_data_end+0xf800517c>
 8005c58:	dcc00317 	ldw	r19,12(sp)
 8005c5c:	9029883a 	mov	r20,r18
 8005c60:	04400084 	movi	r17,2
 8005c64:	003be306 	br	8004bf4 <__alt_data_end+0xf8004bf4>
 8005c68:	d9000917 	ldw	r4,36(sp)
 8005c6c:	203f0926 	beq	r4,zero,8005894 <__alt_data_end+0xf8005894>
 8005c70:	d9800d17 	ldw	r6,52(sp)
 8005c74:	01bca30e 	bge	zero,r6,8004f04 <__alt_data_end+0xf8004f04>
 8005c78:	a00b883a 	mov	r5,r20
 8005c7c:	9809883a 	mov	r4,r19
 8005c80:	000d883a 	mov	r6,zero
 8005c84:	01d00934 	movhi	r7,16420
 8005c88:	800d6900 	call	800d690 <__muldf3>
 8005c8c:	89000044 	addi	r4,r17,1
 8005c90:	1027883a 	mov	r19,r2
 8005c94:	1829883a 	mov	r20,r3
 8005c98:	800e7980 	call	800e798 <__floatsidf>
 8005c9c:	9809883a 	mov	r4,r19
 8005ca0:	a00b883a 	mov	r5,r20
 8005ca4:	100d883a 	mov	r6,r2
 8005ca8:	180f883a 	mov	r7,r3
 8005cac:	800d6900 	call	800d690 <__muldf3>
 8005cb0:	01d00734 	movhi	r7,16412
 8005cb4:	1009883a 	mov	r4,r2
 8005cb8:	180b883a 	mov	r5,r3
 8005cbc:	000d883a 	mov	r6,zero
 8005cc0:	800c2300 	call	800c230 <__adddf3>
 8005cc4:	d9c00617 	ldw	r7,24(sp)
 8005cc8:	05bf3034 	movhi	r22,64704
 8005ccc:	1023883a 	mov	r17,r2
 8005cd0:	39ffffc4 	addi	r7,r7,-1
 8005cd4:	d9c01315 	stw	r7,76(sp)
 8005cd8:	1daf883a 	add	r23,r3,r22
 8005cdc:	dac00d17 	ldw	r11,52(sp)
 8005ce0:	003be006 	br	8004c64 <__alt_data_end+0xf8004c64>
 8005ce4:	d9801117 	ldw	r6,68(sp)
 8005ce8:	d9c01217 	ldw	r7,72(sp)
 8005cec:	0009883a 	mov	r4,zero
 8005cf0:	014ff834 	movhi	r5,16352
 8005cf4:	da801615 	stw	r10,88(sp)
 8005cf8:	800de900 	call	800de90 <__subdf3>
 8005cfc:	da801617 	ldw	r10,88(sp)
 8005d00:	1009883a 	mov	r4,r2
 8005d04:	180b883a 	mov	r5,r3
 8005d08:	b80d883a 	mov	r6,r23
 8005d0c:	500f883a 	mov	r7,r10
 8005d10:	800d4cc0 	call	800d4cc <__gedf2>
 8005d14:	00bc7b0e 	bge	zero,r2,8004f04 <__alt_data_end+0xf8004f04>
 8005d18:	01000c04 	movi	r4,48
 8005d1c:	00000106 	br	8005d24 <_dtoa_r+0x158c>
 8005d20:	102d883a 	mov	r22,r2
 8005d24:	b0bfffc4 	addi	r2,r22,-1
 8005d28:	10c00007 	ldb	r3,0(r2)
 8005d2c:	193ffc26 	beq	r3,r4,8005d20 <__alt_data_end+0xf8005d20>
 8005d30:	d9001317 	ldw	r4,76(sp)
 8005d34:	d9000615 	stw	r4,24(sp)
 8005d38:	003c4306 	br	8004e48 <__alt_data_end+0xf8004e48>
 8005d3c:	d8c01317 	ldw	r3,76(sp)
 8005d40:	dc001117 	ldw	r16,68(sp)
 8005d44:	d8c00615 	stw	r3,24(sp)
 8005d48:	003cee06 	br	8005104 <__alt_data_end+0xf8005104>
 8005d4c:	dd401217 	ldw	r21,72(sp)
 8005d50:	dc001117 	ldw	r16,68(sp)
 8005d54:	dc801417 	ldw	r18,80(sp)
 8005d58:	003c6a06 	br	8004f04 <__alt_data_end+0xf8004f04>
 8005d5c:	103e6f1e 	bne	r2,zero,800571c <__alt_data_end+0xf800571c>
 8005d60:	b880004c 	andi	r2,r23,1
 8005d64:	103e6d26 	beq	r2,zero,800571c <__alt_data_end+0xf800571c>
 8005d68:	003e6906 	br	8005710 <__alt_data_end+0xf8005710>
 8005d6c:	8009883a 	mov	r4,r16
 8005d70:	880b883a 	mov	r5,r17
 8005d74:	01800284 	movi	r6,10
 8005d78:	000f883a 	mov	r7,zero
 8005d7c:	8007d640 	call	8007d64 <__multadd>
 8005d80:	d9000d17 	ldw	r4,52(sp)
 8005d84:	1023883a 	mov	r17,r2
 8005d88:	d9000915 	stw	r4,36(sp)
 8005d8c:	003d5006 	br	80052d0 <__alt_data_end+0xf80052d0>
 8005d90:	04400084 	movi	r17,2
 8005d94:	003b9706 	br	8004bf4 <__alt_data_end+0xf8004bf4>
 8005d98:	d8801317 	ldw	r2,76(sp)
 8005d9c:	d8800615 	stw	r2,24(sp)
 8005da0:	003cd806 	br	8005104 <__alt_data_end+0xf8005104>
 8005da4:	d8801317 	ldw	r2,76(sp)
 8005da8:	d8800615 	stw	r2,24(sp)
 8005dac:	003c2606 	br	8004e48 <__alt_data_end+0xf8004e48>
 8005db0:	04c00044 	movi	r19,1
 8005db4:	003b3506 	br	8004a8c <__alt_data_end+0xf8004a8c>
 8005db8:	3023883a 	mov	r17,r6
 8005dbc:	000b883a 	mov	r5,zero
 8005dc0:	003b5106 	br	8004b08 <__alt_data_end+0xf8004b08>
 8005dc4:	20fd3426 	beq	r4,r3,8005298 <__alt_data_end+0xf8005298>
 8005dc8:	00c00f04 	movi	r3,60
 8005dcc:	1885c83a 	sub	r2,r3,r2
 8005dd0:	003da106 	br	8005458 <__alt_data_end+0xf8005458>

08005dd4 <_fflush_r>:
 8005dd4:	defffb04 	addi	sp,sp,-20
 8005dd8:	dcc00315 	stw	r19,12(sp)
 8005ddc:	dc400115 	stw	r17,4(sp)
 8005de0:	dfc00415 	stw	ra,16(sp)
 8005de4:	dc800215 	stw	r18,8(sp)
 8005de8:	dc000015 	stw	r16,0(sp)
 8005dec:	2027883a 	mov	r19,r4
 8005df0:	2823883a 	mov	r17,r5
 8005df4:	20000226 	beq	r4,zero,8005e00 <_fflush_r+0x2c>
 8005df8:	20800e17 	ldw	r2,56(r4)
 8005dfc:	10005826 	beq	r2,zero,8005f60 <_fflush_r+0x18c>
 8005e00:	8880030b 	ldhu	r2,12(r17)
 8005e04:	10ffffcc 	andi	r3,r2,65535
 8005e08:	18e0001c 	xori	r3,r3,32768
 8005e0c:	18e00004 	addi	r3,r3,-32768
 8005e10:	18002b26 	beq	r3,zero,8005ec0 <_fflush_r+0xec>
 8005e14:	10c0020c 	andi	r3,r2,8
 8005e18:	1800311e 	bne	r3,zero,8005ee0 <_fflush_r+0x10c>
 8005e1c:	88c00117 	ldw	r3,4(r17)
 8005e20:	10820014 	ori	r2,r2,2048
 8005e24:	8880030d 	sth	r2,12(r17)
 8005e28:	00c05c0e 	bge	zero,r3,8005f9c <_fflush_r+0x1c8>
 8005e2c:	88c00a17 	ldw	r3,40(r17)
 8005e30:	18002326 	beq	r3,zero,8005ec0 <_fflush_r+0xec>
 8005e34:	9c000017 	ldw	r16,0(r19)
 8005e38:	1104000c 	andi	r4,r2,4096
 8005e3c:	98000015 	stw	zero,0(r19)
 8005e40:	20004b26 	beq	r4,zero,8005f70 <_fflush_r+0x19c>
 8005e44:	89801417 	ldw	r6,80(r17)
 8005e48:	1080010c 	andi	r2,r2,4
 8005e4c:	10000626 	beq	r2,zero,8005e68 <_fflush_r+0x94>
 8005e50:	89000117 	ldw	r4,4(r17)
 8005e54:	88800c17 	ldw	r2,48(r17)
 8005e58:	310dc83a 	sub	r6,r6,r4
 8005e5c:	10000226 	beq	r2,zero,8005e68 <_fflush_r+0x94>
 8005e60:	88800f17 	ldw	r2,60(r17)
 8005e64:	308dc83a 	sub	r6,r6,r2
 8005e68:	89400717 	ldw	r5,28(r17)
 8005e6c:	9809883a 	mov	r4,r19
 8005e70:	000f883a 	mov	r7,zero
 8005e74:	183ee83a 	callr	r3
 8005e78:	00ffffc4 	movi	r3,-1
 8005e7c:	10c04a26 	beq	r2,r3,8005fa8 <_fflush_r+0x1d4>
 8005e80:	88c0030b 	ldhu	r3,12(r17)
 8005e84:	89000417 	ldw	r4,16(r17)
 8005e88:	88000115 	stw	zero,4(r17)
 8005e8c:	197dffcc 	andi	r5,r3,63487
 8005e90:	8940030d 	sth	r5,12(r17)
 8005e94:	89000015 	stw	r4,0(r17)
 8005e98:	18c4000c 	andi	r3,r3,4096
 8005e9c:	1800581e 	bne	r3,zero,8006000 <_fflush_r+0x22c>
 8005ea0:	89400c17 	ldw	r5,48(r17)
 8005ea4:	9c000015 	stw	r16,0(r19)
 8005ea8:	28000526 	beq	r5,zero,8005ec0 <_fflush_r+0xec>
 8005eac:	88801004 	addi	r2,r17,64
 8005eb0:	28800226 	beq	r5,r2,8005ebc <_fflush_r+0xe8>
 8005eb4:	9809883a 	mov	r4,r19
 8005eb8:	80065280 	call	8006528 <_free_r>
 8005ebc:	88000c15 	stw	zero,48(r17)
 8005ec0:	0005883a 	mov	r2,zero
 8005ec4:	dfc00417 	ldw	ra,16(sp)
 8005ec8:	dcc00317 	ldw	r19,12(sp)
 8005ecc:	dc800217 	ldw	r18,8(sp)
 8005ed0:	dc400117 	ldw	r17,4(sp)
 8005ed4:	dc000017 	ldw	r16,0(sp)
 8005ed8:	dec00504 	addi	sp,sp,20
 8005edc:	f800283a 	ret
 8005ee0:	8c800417 	ldw	r18,16(r17)
 8005ee4:	903ff626 	beq	r18,zero,8005ec0 <__alt_data_end+0xf8005ec0>
 8005ee8:	8c000017 	ldw	r16,0(r17)
 8005eec:	108000cc 	andi	r2,r2,3
 8005ef0:	8c800015 	stw	r18,0(r17)
 8005ef4:	84a1c83a 	sub	r16,r16,r18
 8005ef8:	10001b26 	beq	r2,zero,8005f68 <_fflush_r+0x194>
 8005efc:	0005883a 	mov	r2,zero
 8005f00:	88800215 	stw	r2,8(r17)
 8005f04:	04000316 	blt	zero,r16,8005f14 <_fflush_r+0x140>
 8005f08:	003fed06 	br	8005ec0 <__alt_data_end+0xf8005ec0>
 8005f0c:	90a5883a 	add	r18,r18,r2
 8005f10:	043feb0e 	bge	zero,r16,8005ec0 <__alt_data_end+0xf8005ec0>
 8005f14:	88800917 	ldw	r2,36(r17)
 8005f18:	89400717 	ldw	r5,28(r17)
 8005f1c:	800f883a 	mov	r7,r16
 8005f20:	900d883a 	mov	r6,r18
 8005f24:	9809883a 	mov	r4,r19
 8005f28:	103ee83a 	callr	r2
 8005f2c:	80a1c83a 	sub	r16,r16,r2
 8005f30:	00bff616 	blt	zero,r2,8005f0c <__alt_data_end+0xf8005f0c>
 8005f34:	88c0030b 	ldhu	r3,12(r17)
 8005f38:	00bfffc4 	movi	r2,-1
 8005f3c:	18c01014 	ori	r3,r3,64
 8005f40:	88c0030d 	sth	r3,12(r17)
 8005f44:	dfc00417 	ldw	ra,16(sp)
 8005f48:	dcc00317 	ldw	r19,12(sp)
 8005f4c:	dc800217 	ldw	r18,8(sp)
 8005f50:	dc400117 	ldw	r17,4(sp)
 8005f54:	dc000017 	ldw	r16,0(sp)
 8005f58:	dec00504 	addi	sp,sp,20
 8005f5c:	f800283a 	ret
 8005f60:	80060f40 	call	80060f4 <__sinit>
 8005f64:	003fa606 	br	8005e00 <__alt_data_end+0xf8005e00>
 8005f68:	88800517 	ldw	r2,20(r17)
 8005f6c:	003fe406 	br	8005f00 <__alt_data_end+0xf8005f00>
 8005f70:	89400717 	ldw	r5,28(r17)
 8005f74:	000d883a 	mov	r6,zero
 8005f78:	9809883a 	mov	r4,r19
 8005f7c:	01c00044 	movi	r7,1
 8005f80:	183ee83a 	callr	r3
 8005f84:	100d883a 	mov	r6,r2
 8005f88:	00bfffc4 	movi	r2,-1
 8005f8c:	30801326 	beq	r6,r2,8005fdc <_fflush_r+0x208>
 8005f90:	8880030b 	ldhu	r2,12(r17)
 8005f94:	88c00a17 	ldw	r3,40(r17)
 8005f98:	003fab06 	br	8005e48 <__alt_data_end+0xf8005e48>
 8005f9c:	88c00f17 	ldw	r3,60(r17)
 8005fa0:	00ffa216 	blt	zero,r3,8005e2c <__alt_data_end+0xf8005e2c>
 8005fa4:	003fc606 	br	8005ec0 <__alt_data_end+0xf8005ec0>
 8005fa8:	98c00017 	ldw	r3,0(r19)
 8005fac:	183fb426 	beq	r3,zero,8005e80 <__alt_data_end+0xf8005e80>
 8005fb0:	01000744 	movi	r4,29
 8005fb4:	19000226 	beq	r3,r4,8005fc0 <_fflush_r+0x1ec>
 8005fb8:	01000584 	movi	r4,22
 8005fbc:	1900121e 	bne	r3,r4,8006008 <_fflush_r+0x234>
 8005fc0:	88c0030b 	ldhu	r3,12(r17)
 8005fc4:	88800417 	ldw	r2,16(r17)
 8005fc8:	88000115 	stw	zero,4(r17)
 8005fcc:	18fdffcc 	andi	r3,r3,63487
 8005fd0:	88c0030d 	sth	r3,12(r17)
 8005fd4:	88800015 	stw	r2,0(r17)
 8005fd8:	003fb106 	br	8005ea0 <__alt_data_end+0xf8005ea0>
 8005fdc:	98800017 	ldw	r2,0(r19)
 8005fe0:	103feb26 	beq	r2,zero,8005f90 <__alt_data_end+0xf8005f90>
 8005fe4:	00c00744 	movi	r3,29
 8005fe8:	10c00226 	beq	r2,r3,8005ff4 <_fflush_r+0x220>
 8005fec:	00c00584 	movi	r3,22
 8005ff0:	10ffd01e 	bne	r2,r3,8005f34 <__alt_data_end+0xf8005f34>
 8005ff4:	9c000015 	stw	r16,0(r19)
 8005ff8:	0005883a 	mov	r2,zero
 8005ffc:	003fb106 	br	8005ec4 <__alt_data_end+0xf8005ec4>
 8006000:	88801415 	stw	r2,80(r17)
 8006004:	003fa606 	br	8005ea0 <__alt_data_end+0xf8005ea0>
 8006008:	88c0030b 	ldhu	r3,12(r17)
 800600c:	18c01014 	ori	r3,r3,64
 8006010:	88c0030d 	sth	r3,12(r17)
 8006014:	003fab06 	br	8005ec4 <__alt_data_end+0xf8005ec4>

08006018 <fflush>:
 8006018:	200b883a 	mov	r5,r4
 800601c:	20000426 	beq	r4,zero,8006030 <fflush+0x18>
 8006020:	00820074 	movhi	r2,2049
 8006024:	108db504 	addi	r2,r2,14036
 8006028:	11000017 	ldw	r4,0(r2)
 800602c:	8005dd41 	jmpi	8005dd4 <_fflush_r>
 8006030:	00820074 	movhi	r2,2049
 8006034:	108db404 	addi	r2,r2,14032
 8006038:	11000017 	ldw	r4,0(r2)
 800603c:	01420034 	movhi	r5,2048
 8006040:	29577504 	addi	r5,r5,24020
 8006044:	8006d4c1 	jmpi	8006d4c <_fwalk_reent>

08006048 <__fp_lock>:
 8006048:	0005883a 	mov	r2,zero
 800604c:	f800283a 	ret

08006050 <__fp_unlock>:
 8006050:	0005883a 	mov	r2,zero
 8006054:	f800283a 	ret

08006058 <_cleanup_r>:
 8006058:	01420074 	movhi	r5,2049
 800605c:	296b4704 	addi	r5,r5,-21220
 8006060:	8006ca41 	jmpi	8006ca4 <_fwalk>

08006064 <__sfmoreglue>:
 8006064:	defffc04 	addi	sp,sp,-16
 8006068:	dc800215 	stw	r18,8(sp)
 800606c:	2825883a 	mov	r18,r5
 8006070:	dc000015 	stw	r16,0(sp)
 8006074:	01401a04 	movi	r5,104
 8006078:	2021883a 	mov	r16,r4
 800607c:	9009883a 	mov	r4,r18
 8006080:	dfc00315 	stw	ra,12(sp)
 8006084:	dc400115 	stw	r17,4(sp)
 8006088:	800c2080 	call	800c208 <__mulsi3>
 800608c:	8009883a 	mov	r4,r16
 8006090:	11400304 	addi	r5,r2,12
 8006094:	1023883a 	mov	r17,r2
 8006098:	800708c0 	call	800708c <_malloc_r>
 800609c:	1021883a 	mov	r16,r2
 80060a0:	10000726 	beq	r2,zero,80060c0 <__sfmoreglue+0x5c>
 80060a4:	11000304 	addi	r4,r2,12
 80060a8:	10000015 	stw	zero,0(r2)
 80060ac:	14800115 	stw	r18,4(r2)
 80060b0:	11000215 	stw	r4,8(r2)
 80060b4:	000b883a 	mov	r5,zero
 80060b8:	880d883a 	mov	r6,r17
 80060bc:	8007b800 	call	8007b80 <memset>
 80060c0:	8005883a 	mov	r2,r16
 80060c4:	dfc00317 	ldw	ra,12(sp)
 80060c8:	dc800217 	ldw	r18,8(sp)
 80060cc:	dc400117 	ldw	r17,4(sp)
 80060d0:	dc000017 	ldw	r16,0(sp)
 80060d4:	dec00404 	addi	sp,sp,16
 80060d8:	f800283a 	ret

080060dc <_cleanup>:
 80060dc:	00820074 	movhi	r2,2049
 80060e0:	108db404 	addi	r2,r2,14032
 80060e4:	11000017 	ldw	r4,0(r2)
 80060e8:	01420074 	movhi	r5,2049
 80060ec:	296b4704 	addi	r5,r5,-21220
 80060f0:	8006ca41 	jmpi	8006ca4 <_fwalk>

080060f4 <__sinit>:
 80060f4:	20800e17 	ldw	r2,56(r4)
 80060f8:	defff704 	addi	sp,sp,-36
 80060fc:	dc800215 	stw	r18,8(sp)
 8006100:	dfc00815 	stw	ra,32(sp)
 8006104:	ddc00715 	stw	r23,28(sp)
 8006108:	dd800615 	stw	r22,24(sp)
 800610c:	dd400515 	stw	r21,20(sp)
 8006110:	dd000415 	stw	r20,16(sp)
 8006114:	dcc00315 	stw	r19,12(sp)
 8006118:	dc400115 	stw	r17,4(sp)
 800611c:	dc000015 	stw	r16,0(sp)
 8006120:	2025883a 	mov	r18,r4
 8006124:	10004f1e 	bne	r2,zero,8006264 <__sinit+0x170>
 8006128:	24000117 	ldw	r16,4(r4)
 800612c:	00c20034 	movhi	r3,2048
 8006130:	18d81604 	addi	r3,r3,24664
 8006134:	20c00f15 	stw	r3,60(r4)
 8006138:	2080bb04 	addi	r2,r4,748
 800613c:	00c000c4 	movi	r3,3
 8006140:	05c00044 	movi	r23,1
 8006144:	20c0b915 	stw	r3,740(r4)
 8006148:	2080ba15 	stw	r2,744(r4)
 800614c:	25c00e15 	stw	r23,56(r4)
 8006150:	2000b815 	stw	zero,736(r4)
 8006154:	00800104 	movi	r2,4
 8006158:	81001704 	addi	r4,r16,92
 800615c:	000b883a 	mov	r5,zero
 8006160:	01800204 	movi	r6,8
 8006164:	80000015 	stw	zero,0(r16)
 8006168:	80000115 	stw	zero,4(r16)
 800616c:	80000215 	stw	zero,8(r16)
 8006170:	8080030d 	sth	r2,12(r16)
 8006174:	80001915 	stw	zero,100(r16)
 8006178:	8000038d 	sth	zero,14(r16)
 800617c:	80000415 	stw	zero,16(r16)
 8006180:	80000515 	stw	zero,20(r16)
 8006184:	80000615 	stw	zero,24(r16)
 8006188:	8007b800 	call	8007b80 <memset>
 800618c:	94400217 	ldw	r17,8(r18)
 8006190:	05820074 	movhi	r22,2049
 8006194:	b5a4bb04 	addi	r22,r22,-27924
 8006198:	05420074 	movhi	r21,2049
 800619c:	ad64d204 	addi	r21,r21,-27832
 80061a0:	05020074 	movhi	r20,2049
 80061a4:	a524f104 	addi	r20,r20,-27708
 80061a8:	04c20074 	movhi	r19,2049
 80061ac:	9ce50804 	addi	r19,r19,-27616
 80061b0:	84000715 	stw	r16,28(r16)
 80061b4:	85800815 	stw	r22,32(r16)
 80061b8:	85400915 	stw	r21,36(r16)
 80061bc:	85000a15 	stw	r20,40(r16)
 80061c0:	84c00b15 	stw	r19,44(r16)
 80061c4:	00800284 	movi	r2,10
 80061c8:	89001704 	addi	r4,r17,92
 80061cc:	000b883a 	mov	r5,zero
 80061d0:	01800204 	movi	r6,8
 80061d4:	88000015 	stw	zero,0(r17)
 80061d8:	88000115 	stw	zero,4(r17)
 80061dc:	88000215 	stw	zero,8(r17)
 80061e0:	8880030d 	sth	r2,12(r17)
 80061e4:	88001915 	stw	zero,100(r17)
 80061e8:	8dc0038d 	sth	r23,14(r17)
 80061ec:	88000415 	stw	zero,16(r17)
 80061f0:	88000515 	stw	zero,20(r17)
 80061f4:	88000615 	stw	zero,24(r17)
 80061f8:	8007b800 	call	8007b80 <memset>
 80061fc:	94000317 	ldw	r16,12(r18)
 8006200:	00800484 	movi	r2,18
 8006204:	8c400715 	stw	r17,28(r17)
 8006208:	8d800815 	stw	r22,32(r17)
 800620c:	8d400915 	stw	r21,36(r17)
 8006210:	8d000a15 	stw	r20,40(r17)
 8006214:	8cc00b15 	stw	r19,44(r17)
 8006218:	8080030d 	sth	r2,12(r16)
 800621c:	00800084 	movi	r2,2
 8006220:	80000015 	stw	zero,0(r16)
 8006224:	80000115 	stw	zero,4(r16)
 8006228:	80000215 	stw	zero,8(r16)
 800622c:	80001915 	stw	zero,100(r16)
 8006230:	8080038d 	sth	r2,14(r16)
 8006234:	80000415 	stw	zero,16(r16)
 8006238:	80000515 	stw	zero,20(r16)
 800623c:	80000615 	stw	zero,24(r16)
 8006240:	81001704 	addi	r4,r16,92
 8006244:	000b883a 	mov	r5,zero
 8006248:	01800204 	movi	r6,8
 800624c:	8007b800 	call	8007b80 <memset>
 8006250:	84000715 	stw	r16,28(r16)
 8006254:	85800815 	stw	r22,32(r16)
 8006258:	85400915 	stw	r21,36(r16)
 800625c:	85000a15 	stw	r20,40(r16)
 8006260:	84c00b15 	stw	r19,44(r16)
 8006264:	dfc00817 	ldw	ra,32(sp)
 8006268:	ddc00717 	ldw	r23,28(sp)
 800626c:	dd800617 	ldw	r22,24(sp)
 8006270:	dd400517 	ldw	r21,20(sp)
 8006274:	dd000417 	ldw	r20,16(sp)
 8006278:	dcc00317 	ldw	r19,12(sp)
 800627c:	dc800217 	ldw	r18,8(sp)
 8006280:	dc400117 	ldw	r17,4(sp)
 8006284:	dc000017 	ldw	r16,0(sp)
 8006288:	dec00904 	addi	sp,sp,36
 800628c:	f800283a 	ret

08006290 <__sfp>:
 8006290:	defffb04 	addi	sp,sp,-20
 8006294:	00820074 	movhi	r2,2049
 8006298:	108db404 	addi	r2,r2,14032
 800629c:	dc800215 	stw	r18,8(sp)
 80062a0:	14800017 	ldw	r18,0(r2)
 80062a4:	dcc00315 	stw	r19,12(sp)
 80062a8:	dfc00415 	stw	ra,16(sp)
 80062ac:	90800e17 	ldw	r2,56(r18)
 80062b0:	dc400115 	stw	r17,4(sp)
 80062b4:	dc000015 	stw	r16,0(sp)
 80062b8:	2027883a 	mov	r19,r4
 80062bc:	10002f26 	beq	r2,zero,800637c <__sfp+0xec>
 80062c0:	9480b804 	addi	r18,r18,736
 80062c4:	047fffc4 	movi	r17,-1
 80062c8:	91400117 	ldw	r5,4(r18)
 80062cc:	94000217 	ldw	r16,8(r18)
 80062d0:	297fffc4 	addi	r5,r5,-1
 80062d4:	28000a16 	blt	r5,zero,8006300 <__sfp+0x70>
 80062d8:	8080030f 	ldh	r2,12(r16)
 80062dc:	10000c26 	beq	r2,zero,8006310 <__sfp+0x80>
 80062e0:	80c01d04 	addi	r3,r16,116
 80062e4:	00000206 	br	80062f0 <__sfp+0x60>
 80062e8:	18bfe60f 	ldh	r2,-104(r3)
 80062ec:	10000826 	beq	r2,zero,8006310 <__sfp+0x80>
 80062f0:	297fffc4 	addi	r5,r5,-1
 80062f4:	1c3ffd04 	addi	r16,r3,-12
 80062f8:	18c01a04 	addi	r3,r3,104
 80062fc:	2c7ffa1e 	bne	r5,r17,80062e8 <__alt_data_end+0xf80062e8>
 8006300:	90800017 	ldw	r2,0(r18)
 8006304:	10002026 	beq	r2,zero,8006388 <__sfp+0xf8>
 8006308:	1025883a 	mov	r18,r2
 800630c:	003fee06 	br	80062c8 <__alt_data_end+0xf80062c8>
 8006310:	00bfffc4 	movi	r2,-1
 8006314:	8080038d 	sth	r2,14(r16)
 8006318:	00800044 	movi	r2,1
 800631c:	8080030d 	sth	r2,12(r16)
 8006320:	80001915 	stw	zero,100(r16)
 8006324:	80000015 	stw	zero,0(r16)
 8006328:	80000215 	stw	zero,8(r16)
 800632c:	80000115 	stw	zero,4(r16)
 8006330:	80000415 	stw	zero,16(r16)
 8006334:	80000515 	stw	zero,20(r16)
 8006338:	80000615 	stw	zero,24(r16)
 800633c:	81001704 	addi	r4,r16,92
 8006340:	000b883a 	mov	r5,zero
 8006344:	01800204 	movi	r6,8
 8006348:	8007b800 	call	8007b80 <memset>
 800634c:	8005883a 	mov	r2,r16
 8006350:	80000c15 	stw	zero,48(r16)
 8006354:	80000d15 	stw	zero,52(r16)
 8006358:	80001115 	stw	zero,68(r16)
 800635c:	80001215 	stw	zero,72(r16)
 8006360:	dfc00417 	ldw	ra,16(sp)
 8006364:	dcc00317 	ldw	r19,12(sp)
 8006368:	dc800217 	ldw	r18,8(sp)
 800636c:	dc400117 	ldw	r17,4(sp)
 8006370:	dc000017 	ldw	r16,0(sp)
 8006374:	dec00504 	addi	sp,sp,20
 8006378:	f800283a 	ret
 800637c:	9009883a 	mov	r4,r18
 8006380:	80060f40 	call	80060f4 <__sinit>
 8006384:	003fce06 	br	80062c0 <__alt_data_end+0xf80062c0>
 8006388:	9809883a 	mov	r4,r19
 800638c:	01400104 	movi	r5,4
 8006390:	80060640 	call	8006064 <__sfmoreglue>
 8006394:	90800015 	stw	r2,0(r18)
 8006398:	103fdb1e 	bne	r2,zero,8006308 <__alt_data_end+0xf8006308>
 800639c:	00800304 	movi	r2,12
 80063a0:	98800015 	stw	r2,0(r19)
 80063a4:	0005883a 	mov	r2,zero
 80063a8:	003fed06 	br	8006360 <__alt_data_end+0xf8006360>

080063ac <__sfp_lock_acquire>:
 80063ac:	f800283a 	ret

080063b0 <__sfp_lock_release>:
 80063b0:	f800283a 	ret

080063b4 <__sinit_lock_acquire>:
 80063b4:	f800283a 	ret

080063b8 <__sinit_lock_release>:
 80063b8:	f800283a 	ret

080063bc <__fp_lock_all>:
 80063bc:	00820074 	movhi	r2,2049
 80063c0:	108db504 	addi	r2,r2,14036
 80063c4:	11000017 	ldw	r4,0(r2)
 80063c8:	01420034 	movhi	r5,2048
 80063cc:	29581204 	addi	r5,r5,24648
 80063d0:	8006ca41 	jmpi	8006ca4 <_fwalk>

080063d4 <__fp_unlock_all>:
 80063d4:	00820074 	movhi	r2,2049
 80063d8:	108db504 	addi	r2,r2,14036
 80063dc:	11000017 	ldw	r4,0(r2)
 80063e0:	01420034 	movhi	r5,2048
 80063e4:	29581404 	addi	r5,r5,24656
 80063e8:	8006ca41 	jmpi	8006ca4 <_fwalk>

080063ec <_malloc_trim_r>:
 80063ec:	defffb04 	addi	sp,sp,-20
 80063f0:	dcc00315 	stw	r19,12(sp)
 80063f4:	dc800215 	stw	r18,8(sp)
 80063f8:	dc400115 	stw	r17,4(sp)
 80063fc:	dc000015 	stw	r16,0(sp)
 8006400:	2827883a 	mov	r19,r5
 8006404:	dfc00415 	stw	ra,16(sp)
 8006408:	04420074 	movhi	r17,2049
 800640c:	8c483004 	addi	r17,r17,8384
 8006410:	2021883a 	mov	r16,r4
 8006414:	800ef800 	call	800ef80 <__malloc_lock>
 8006418:	88800217 	ldw	r2,8(r17)
 800641c:	14800117 	ldw	r18,4(r2)
 8006420:	00bfff04 	movi	r2,-4
 8006424:	90a4703a 	and	r18,r18,r2
 8006428:	94e7c83a 	sub	r19,r18,r19
 800642c:	9cc3fbc4 	addi	r19,r19,4079
 8006430:	9826d33a 	srli	r19,r19,12
 8006434:	0083ffc4 	movi	r2,4095
 8006438:	9cffffc4 	addi	r19,r19,-1
 800643c:	9826933a 	slli	r19,r19,12
 8006440:	14c0060e 	bge	r2,r19,800645c <_malloc_trim_r+0x70>
 8006444:	8009883a 	mov	r4,r16
 8006448:	000b883a 	mov	r5,zero
 800644c:	80092880 	call	8009288 <_sbrk_r>
 8006450:	88c00217 	ldw	r3,8(r17)
 8006454:	1c87883a 	add	r3,r3,r18
 8006458:	10c00a26 	beq	r2,r3,8006484 <_malloc_trim_r+0x98>
 800645c:	8009883a 	mov	r4,r16
 8006460:	800efa00 	call	800efa0 <__malloc_unlock>
 8006464:	0005883a 	mov	r2,zero
 8006468:	dfc00417 	ldw	ra,16(sp)
 800646c:	dcc00317 	ldw	r19,12(sp)
 8006470:	dc800217 	ldw	r18,8(sp)
 8006474:	dc400117 	ldw	r17,4(sp)
 8006478:	dc000017 	ldw	r16,0(sp)
 800647c:	dec00504 	addi	sp,sp,20
 8006480:	f800283a 	ret
 8006484:	8009883a 	mov	r4,r16
 8006488:	04cbc83a 	sub	r5,zero,r19
 800648c:	80092880 	call	8009288 <_sbrk_r>
 8006490:	00ffffc4 	movi	r3,-1
 8006494:	10c01326 	beq	r2,r3,80064e4 <_malloc_trim_r+0xf8>
 8006498:	00820074 	movhi	r2,2049
 800649c:	10948d04 	addi	r2,r2,21044
 80064a0:	11000017 	ldw	r4,0(r2)
 80064a4:	88c00217 	ldw	r3,8(r17)
 80064a8:	94e5c83a 	sub	r18,r18,r19
 80064ac:	94800054 	ori	r18,r18,1
 80064b0:	24e7c83a 	sub	r19,r4,r19
 80064b4:	1c800115 	stw	r18,4(r3)
 80064b8:	8009883a 	mov	r4,r16
 80064bc:	14c00015 	stw	r19,0(r2)
 80064c0:	800efa00 	call	800efa0 <__malloc_unlock>
 80064c4:	00800044 	movi	r2,1
 80064c8:	dfc00417 	ldw	ra,16(sp)
 80064cc:	dcc00317 	ldw	r19,12(sp)
 80064d0:	dc800217 	ldw	r18,8(sp)
 80064d4:	dc400117 	ldw	r17,4(sp)
 80064d8:	dc000017 	ldw	r16,0(sp)
 80064dc:	dec00504 	addi	sp,sp,20
 80064e0:	f800283a 	ret
 80064e4:	8009883a 	mov	r4,r16
 80064e8:	000b883a 	mov	r5,zero
 80064ec:	80092880 	call	8009288 <_sbrk_r>
 80064f0:	88c00217 	ldw	r3,8(r17)
 80064f4:	014003c4 	movi	r5,15
 80064f8:	10c9c83a 	sub	r4,r2,r3
 80064fc:	293fd70e 	bge	r5,r4,800645c <__alt_data_end+0xf800645c>
 8006500:	01420074 	movhi	r5,2049
 8006504:	294db704 	addi	r5,r5,14044
 8006508:	29400017 	ldw	r5,0(r5)
 800650c:	21000054 	ori	r4,r4,1
 8006510:	19000115 	stw	r4,4(r3)
 8006514:	1145c83a 	sub	r2,r2,r5
 8006518:	01420074 	movhi	r5,2049
 800651c:	29548d04 	addi	r5,r5,21044
 8006520:	28800015 	stw	r2,0(r5)
 8006524:	003fcd06 	br	800645c <__alt_data_end+0xf800645c>

08006528 <_free_r>:
 8006528:	defffd04 	addi	sp,sp,-12
 800652c:	dc000015 	stw	r16,0(sp)
 8006530:	dfc00215 	stw	ra,8(sp)
 8006534:	dc400115 	stw	r17,4(sp)
 8006538:	2821883a 	mov	r16,r5
 800653c:	28004c26 	beq	r5,zero,8006670 <_free_r+0x148>
 8006540:	2023883a 	mov	r17,r4
 8006544:	800ef800 	call	800ef80 <__malloc_lock>
 8006548:	823fff17 	ldw	r8,-4(r16)
 800654c:	00bfff84 	movi	r2,-2
 8006550:	81bffe04 	addi	r6,r16,-8
 8006554:	4084703a 	and	r2,r8,r2
 8006558:	3087883a 	add	r3,r6,r2
 800655c:	01420074 	movhi	r5,2049
 8006560:	29483004 	addi	r5,r5,8384
 8006564:	1a400117 	ldw	r9,4(r3)
 8006568:	29000217 	ldw	r4,8(r5)
 800656c:	01ffff04 	movi	r7,-4
 8006570:	49ce703a 	and	r7,r9,r7
 8006574:	20c06526 	beq	r4,r3,800670c <_free_r+0x1e4>
 8006578:	19c00115 	stw	r7,4(r3)
 800657c:	4200004c 	andi	r8,r8,1
 8006580:	40003026 	beq	r8,zero,8006644 <_free_r+0x11c>
 8006584:	0009883a 	mov	r4,zero
 8006588:	19d1883a 	add	r8,r3,r7
 800658c:	42000117 	ldw	r8,4(r8)
 8006590:	4200004c 	andi	r8,r8,1
 8006594:	4000061e 	bne	r8,zero,80065b0 <_free_r+0x88>
 8006598:	11c5883a 	add	r2,r2,r7
 800659c:	19c00217 	ldw	r7,8(r3)
 80065a0:	20004e26 	beq	r4,zero,80066dc <_free_r+0x1b4>
 80065a4:	18c00317 	ldw	r3,12(r3)
 80065a8:	38c00315 	stw	r3,12(r7)
 80065ac:	19c00215 	stw	r7,8(r3)
 80065b0:	10c00054 	ori	r3,r2,1
 80065b4:	30c00115 	stw	r3,4(r6)
 80065b8:	3087883a 	add	r3,r6,r2
 80065bc:	18800015 	stw	r2,0(r3)
 80065c0:	20001a1e 	bne	r4,zero,800662c <_free_r+0x104>
 80065c4:	00c07fc4 	movi	r3,511
 80065c8:	18802e2e 	bgeu	r3,r2,8006684 <_free_r+0x15c>
 80065cc:	1006d27a 	srli	r3,r2,9
 80065d0:	01000104 	movi	r4,4
 80065d4:	20c06636 	bltu	r4,r3,8006770 <_free_r+0x248>
 80065d8:	1008d1ba 	srli	r4,r2,6
 80065dc:	21000e04 	addi	r4,r4,56
 80065e0:	210f883a 	add	r7,r4,r4
 80065e4:	39cf883a 	add	r7,r7,r7
 80065e8:	39cf883a 	add	r7,r7,r7
 80065ec:	29cf883a 	add	r7,r5,r7
 80065f0:	38c00217 	ldw	r3,8(r7)
 80065f4:	01420074 	movhi	r5,2049
 80065f8:	29483004 	addi	r5,r5,8384
 80065fc:	19c06126 	beq	r3,r7,8006784 <_free_r+0x25c>
 8006600:	013fff04 	movi	r4,-4
 8006604:	19400117 	ldw	r5,4(r3)
 8006608:	290a703a 	and	r5,r5,r4
 800660c:	1140022e 	bgeu	r2,r5,8006618 <_free_r+0xf0>
 8006610:	18c00217 	ldw	r3,8(r3)
 8006614:	38fffb1e 	bne	r7,r3,8006604 <__alt_data_end+0xf8006604>
 8006618:	18800317 	ldw	r2,12(r3)
 800661c:	30800315 	stw	r2,12(r6)
 8006620:	30c00215 	stw	r3,8(r6)
 8006624:	11800215 	stw	r6,8(r2)
 8006628:	19800315 	stw	r6,12(r3)
 800662c:	8809883a 	mov	r4,r17
 8006630:	dfc00217 	ldw	ra,8(sp)
 8006634:	dc400117 	ldw	r17,4(sp)
 8006638:	dc000017 	ldw	r16,0(sp)
 800663c:	dec00304 	addi	sp,sp,12
 8006640:	800efa01 	jmpi	800efa0 <__malloc_unlock>
 8006644:	813ffe17 	ldw	r4,-8(r16)
 8006648:	2a400204 	addi	r9,r5,8
 800664c:	310dc83a 	sub	r6,r6,r4
 8006650:	32000217 	ldw	r8,8(r6)
 8006654:	1105883a 	add	r2,r2,r4
 8006658:	42404326 	beq	r8,r9,8006768 <_free_r+0x240>
 800665c:	32400317 	ldw	r9,12(r6)
 8006660:	0009883a 	mov	r4,zero
 8006664:	42400315 	stw	r9,12(r8)
 8006668:	4a000215 	stw	r8,8(r9)
 800666c:	003fc606 	br	8006588 <__alt_data_end+0xf8006588>
 8006670:	dfc00217 	ldw	ra,8(sp)
 8006674:	dc400117 	ldw	r17,4(sp)
 8006678:	dc000017 	ldw	r16,0(sp)
 800667c:	dec00304 	addi	sp,sp,12
 8006680:	f800283a 	ret
 8006684:	1004d0fa 	srli	r2,r2,3
 8006688:	02000044 	movi	r8,1
 800668c:	29c00117 	ldw	r7,4(r5)
 8006690:	1087883a 	add	r3,r2,r2
 8006694:	18c7883a 	add	r3,r3,r3
 8006698:	18c7883a 	add	r3,r3,r3
 800669c:	28c7883a 	add	r3,r5,r3
 80066a0:	1005d0ba 	srai	r2,r2,2
 80066a4:	19000217 	ldw	r4,8(r3)
 80066a8:	30c00315 	stw	r3,12(r6)
 80066ac:	4084983a 	sll	r2,r8,r2
 80066b0:	31000215 	stw	r4,8(r6)
 80066b4:	19800215 	stw	r6,8(r3)
 80066b8:	11c4b03a 	or	r2,r2,r7
 80066bc:	21800315 	stw	r6,12(r4)
 80066c0:	8809883a 	mov	r4,r17
 80066c4:	28800115 	stw	r2,4(r5)
 80066c8:	dfc00217 	ldw	ra,8(sp)
 80066cc:	dc400117 	ldw	r17,4(sp)
 80066d0:	dc000017 	ldw	r16,0(sp)
 80066d4:	dec00304 	addi	sp,sp,12
 80066d8:	800efa01 	jmpi	800efa0 <__malloc_unlock>
 80066dc:	02020074 	movhi	r8,2049
 80066e0:	42083204 	addi	r8,r8,8392
 80066e4:	3a3faf1e 	bne	r7,r8,80065a4 <__alt_data_end+0xf80065a4>
 80066e8:	29800515 	stw	r6,20(r5)
 80066ec:	29800415 	stw	r6,16(r5)
 80066f0:	10c00054 	ori	r3,r2,1
 80066f4:	31c00315 	stw	r7,12(r6)
 80066f8:	31c00215 	stw	r7,8(r6)
 80066fc:	30c00115 	stw	r3,4(r6)
 8006700:	308d883a 	add	r6,r6,r2
 8006704:	30800015 	stw	r2,0(r6)
 8006708:	003fc806 	br	800662c <__alt_data_end+0xf800662c>
 800670c:	4200004c 	andi	r8,r8,1
 8006710:	3885883a 	add	r2,r7,r2
 8006714:	4000071e 	bne	r8,zero,8006734 <_free_r+0x20c>
 8006718:	81fffe17 	ldw	r7,-8(r16)
 800671c:	31cdc83a 	sub	r6,r6,r7
 8006720:	30c00317 	ldw	r3,12(r6)
 8006724:	31000217 	ldw	r4,8(r6)
 8006728:	11c5883a 	add	r2,r2,r7
 800672c:	20c00315 	stw	r3,12(r4)
 8006730:	19000215 	stw	r4,8(r3)
 8006734:	00c20074 	movhi	r3,2049
 8006738:	18cdb804 	addi	r3,r3,14048
 800673c:	11000054 	ori	r4,r2,1
 8006740:	18c00017 	ldw	r3,0(r3)
 8006744:	31000115 	stw	r4,4(r6)
 8006748:	29800215 	stw	r6,8(r5)
 800674c:	10ffb736 	bltu	r2,r3,800662c <__alt_data_end+0xf800662c>
 8006750:	00820074 	movhi	r2,2049
 8006754:	10948504 	addi	r2,r2,21012
 8006758:	11400017 	ldw	r5,0(r2)
 800675c:	8809883a 	mov	r4,r17
 8006760:	80063ec0 	call	80063ec <_malloc_trim_r>
 8006764:	003fb106 	br	800662c <__alt_data_end+0xf800662c>
 8006768:	01000044 	movi	r4,1
 800676c:	003f8606 	br	8006588 <__alt_data_end+0xf8006588>
 8006770:	01000504 	movi	r4,20
 8006774:	20c00b36 	bltu	r4,r3,80067a4 <_free_r+0x27c>
 8006778:	190016c4 	addi	r4,r3,91
 800677c:	210f883a 	add	r7,r4,r4
 8006780:	003f9806 	br	80065e4 <__alt_data_end+0xf80065e4>
 8006784:	2009d0ba 	srai	r4,r4,2
 8006788:	00800044 	movi	r2,1
 800678c:	29c00117 	ldw	r7,4(r5)
 8006790:	1108983a 	sll	r4,r2,r4
 8006794:	1805883a 	mov	r2,r3
 8006798:	21c8b03a 	or	r4,r4,r7
 800679c:	29000115 	stw	r4,4(r5)
 80067a0:	003f9e06 	br	800661c <__alt_data_end+0xf800661c>
 80067a4:	01001504 	movi	r4,84
 80067a8:	20c00436 	bltu	r4,r3,80067bc <_free_r+0x294>
 80067ac:	1008d33a 	srli	r4,r2,12
 80067b0:	21001b84 	addi	r4,r4,110
 80067b4:	210f883a 	add	r7,r4,r4
 80067b8:	003f8a06 	br	80065e4 <__alt_data_end+0xf80065e4>
 80067bc:	01005504 	movi	r4,340
 80067c0:	20c00436 	bltu	r4,r3,80067d4 <_free_r+0x2ac>
 80067c4:	1008d3fa 	srli	r4,r2,15
 80067c8:	21001dc4 	addi	r4,r4,119
 80067cc:	210f883a 	add	r7,r4,r4
 80067d0:	003f8406 	br	80065e4 <__alt_data_end+0xf80065e4>
 80067d4:	01015504 	movi	r4,1364
 80067d8:	20c00436 	bltu	r4,r3,80067ec <_free_r+0x2c4>
 80067dc:	1008d4ba 	srli	r4,r2,18
 80067e0:	21001f04 	addi	r4,r4,124
 80067e4:	210f883a 	add	r7,r4,r4
 80067e8:	003f7e06 	br	80065e4 <__alt_data_end+0xf80065e4>
 80067ec:	01c03f04 	movi	r7,252
 80067f0:	01001f84 	movi	r4,126
 80067f4:	003f7b06 	br	80065e4 <__alt_data_end+0xf80065e4>

080067f8 <__sfvwrite_r>:
 80067f8:	30800217 	ldw	r2,8(r6)
 80067fc:	defff404 	addi	sp,sp,-48
 8006800:	dcc00515 	stw	r19,20(sp)
 8006804:	dfc00b15 	stw	ra,44(sp)
 8006808:	df000a15 	stw	fp,40(sp)
 800680c:	ddc00915 	stw	r23,36(sp)
 8006810:	dd800815 	stw	r22,32(sp)
 8006814:	dd400715 	stw	r21,28(sp)
 8006818:	dd000615 	stw	r20,24(sp)
 800681c:	dc800415 	stw	r18,16(sp)
 8006820:	dc400315 	stw	r17,12(sp)
 8006824:	dc000215 	stw	r16,8(sp)
 8006828:	3027883a 	mov	r19,r6
 800682c:	10001d26 	beq	r2,zero,80068a4 <__sfvwrite_r+0xac>
 8006830:	2880030b 	ldhu	r2,12(r5)
 8006834:	202b883a 	mov	r21,r4
 8006838:	2821883a 	mov	r16,r5
 800683c:	10c0020c 	andi	r3,r2,8
 8006840:	18002526 	beq	r3,zero,80068d8 <__sfvwrite_r+0xe0>
 8006844:	28c00417 	ldw	r3,16(r5)
 8006848:	18002326 	beq	r3,zero,80068d8 <__sfvwrite_r+0xe0>
 800684c:	10c0008c 	andi	r3,r2,2
 8006850:	9c400017 	ldw	r17,0(r19)
 8006854:	18002826 	beq	r3,zero,80068f8 <__sfvwrite_r+0x100>
 8006858:	0029883a 	mov	r20,zero
 800685c:	0025883a 	mov	r18,zero
 8006860:	05810004 	movi	r22,1024
 8006864:	a00d883a 	mov	r6,r20
 8006868:	a809883a 	mov	r4,r21
 800686c:	90004726 	beq	r18,zero,800698c <__sfvwrite_r+0x194>
 8006870:	900f883a 	mov	r7,r18
 8006874:	81400717 	ldw	r5,28(r16)
 8006878:	b480012e 	bgeu	r22,r18,8006880 <__sfvwrite_r+0x88>
 800687c:	01c10004 	movi	r7,1024
 8006880:	80800917 	ldw	r2,36(r16)
 8006884:	103ee83a 	callr	r2
 8006888:	00804c0e 	bge	zero,r2,80069bc <__sfvwrite_r+0x1c4>
 800688c:	98c00217 	ldw	r3,8(r19)
 8006890:	a0a9883a 	add	r20,r20,r2
 8006894:	90a5c83a 	sub	r18,r18,r2
 8006898:	1885c83a 	sub	r2,r3,r2
 800689c:	98800215 	stw	r2,8(r19)
 80068a0:	103ff01e 	bne	r2,zero,8006864 <__alt_data_end+0xf8006864>
 80068a4:	0005883a 	mov	r2,zero
 80068a8:	dfc00b17 	ldw	ra,44(sp)
 80068ac:	df000a17 	ldw	fp,40(sp)
 80068b0:	ddc00917 	ldw	r23,36(sp)
 80068b4:	dd800817 	ldw	r22,32(sp)
 80068b8:	dd400717 	ldw	r21,28(sp)
 80068bc:	dd000617 	ldw	r20,24(sp)
 80068c0:	dcc00517 	ldw	r19,20(sp)
 80068c4:	dc800417 	ldw	r18,16(sp)
 80068c8:	dc400317 	ldw	r17,12(sp)
 80068cc:	dc000217 	ldw	r16,8(sp)
 80068d0:	dec00c04 	addi	sp,sp,48
 80068d4:	f800283a 	ret
 80068d8:	a809883a 	mov	r4,r21
 80068dc:	800b883a 	mov	r5,r16
 80068e0:	80044380 	call	8004438 <__swsetup_r>
 80068e4:	1000e81e 	bne	r2,zero,8006c88 <__sfvwrite_r+0x490>
 80068e8:	8080030b 	ldhu	r2,12(r16)
 80068ec:	9c400017 	ldw	r17,0(r19)
 80068f0:	10c0008c 	andi	r3,r2,2
 80068f4:	183fd81e 	bne	r3,zero,8006858 <__alt_data_end+0xf8006858>
 80068f8:	10c0004c 	andi	r3,r2,1
 80068fc:	002d883a 	mov	r22,zero
 8006900:	1800331e 	bne	r3,zero,80069d0 <__sfvwrite_r+0x1d8>
 8006904:	0025883a 	mov	r18,zero
 8006908:	90001c26 	beq	r18,zero,800697c <__sfvwrite_r+0x184>
 800690c:	10c0800c 	andi	r3,r2,512
 8006910:	85000217 	ldw	r20,8(r16)
 8006914:	18006f26 	beq	r3,zero,8006ad4 <__sfvwrite_r+0x2dc>
 8006918:	95008936 	bltu	r18,r20,8006b40 <__sfvwrite_r+0x348>
 800691c:	10c1200c 	andi	r3,r2,1152
 8006920:	1800a11e 	bne	r3,zero,8006ba8 <__sfvwrite_r+0x3b0>
 8006924:	81000017 	ldw	r4,0(r16)
 8006928:	a02f883a 	mov	r23,r20
 800692c:	a039883a 	mov	fp,r20
 8006930:	9029883a 	mov	r20,r18
 8006934:	b00b883a 	mov	r5,r22
 8006938:	b80d883a 	mov	r6,r23
 800693c:	8007a440 	call	8007a44 <memmove>
 8006940:	81400217 	ldw	r5,8(r16)
 8006944:	81000017 	ldw	r4,0(r16)
 8006948:	9005883a 	mov	r2,r18
 800694c:	2f39c83a 	sub	fp,r5,fp
 8006950:	25c7883a 	add	r3,r4,r23
 8006954:	87000215 	stw	fp,8(r16)
 8006958:	80c00015 	stw	r3,0(r16)
 800695c:	98c00217 	ldw	r3,8(r19)
 8006960:	b0ad883a 	add	r22,r22,r2
 8006964:	90a5c83a 	sub	r18,r18,r2
 8006968:	1d29c83a 	sub	r20,r3,r20
 800696c:	9d000215 	stw	r20,8(r19)
 8006970:	a03fcc26 	beq	r20,zero,80068a4 <__alt_data_end+0xf80068a4>
 8006974:	8080030b 	ldhu	r2,12(r16)
 8006978:	903fe41e 	bne	r18,zero,800690c <__alt_data_end+0xf800690c>
 800697c:	8d800017 	ldw	r22,0(r17)
 8006980:	8c800117 	ldw	r18,4(r17)
 8006984:	8c400204 	addi	r17,r17,8
 8006988:	003fdf06 	br	8006908 <__alt_data_end+0xf8006908>
 800698c:	8d000017 	ldw	r20,0(r17)
 8006990:	8c800117 	ldw	r18,4(r17)
 8006994:	8c400204 	addi	r17,r17,8
 8006998:	003fb206 	br	8006864 <__alt_data_end+0xf8006864>
 800699c:	8008cbc0 	call	8008cbc <_realloc_r>
 80069a0:	1039883a 	mov	fp,r2
 80069a4:	10009d1e 	bne	r2,zero,8006c1c <__sfvwrite_r+0x424>
 80069a8:	81400417 	ldw	r5,16(r16)
 80069ac:	a809883a 	mov	r4,r21
 80069b0:	80065280 	call	8006528 <_free_r>
 80069b4:	00800304 	movi	r2,12
 80069b8:	a8800015 	stw	r2,0(r21)
 80069bc:	80c0030b 	ldhu	r3,12(r16)
 80069c0:	00bfffc4 	movi	r2,-1
 80069c4:	18c01014 	ori	r3,r3,64
 80069c8:	80c0030d 	sth	r3,12(r16)
 80069cc:	003fb606 	br	80068a8 <__alt_data_end+0xf80068a8>
 80069d0:	0007883a 	mov	r3,zero
 80069d4:	0039883a 	mov	fp,zero
 80069d8:	0025883a 	mov	r18,zero
 80069dc:	90001f26 	beq	r18,zero,8006a5c <__sfvwrite_r+0x264>
 80069e0:	18006826 	beq	r3,zero,8006b84 <__sfvwrite_r+0x38c>
 80069e4:	b02f883a 	mov	r23,r22
 80069e8:	9580012e 	bgeu	r18,r22,80069f0 <__sfvwrite_r+0x1f8>
 80069ec:	902f883a 	mov	r23,r18
 80069f0:	81000017 	ldw	r4,0(r16)
 80069f4:	80800417 	ldw	r2,16(r16)
 80069f8:	b829883a 	mov	r20,r23
 80069fc:	81800217 	ldw	r6,8(r16)
 8006a00:	81c00517 	ldw	r7,20(r16)
 8006a04:	1100022e 	bgeu	r2,r4,8006a10 <__sfvwrite_r+0x218>
 8006a08:	31d1883a 	add	r8,r6,r7
 8006a0c:	45c01816 	blt	r8,r23,8006a70 <__sfvwrite_r+0x278>
 8006a10:	b9c03f16 	blt	r23,r7,8006b10 <__sfvwrite_r+0x318>
 8006a14:	80800917 	ldw	r2,36(r16)
 8006a18:	81400717 	ldw	r5,28(r16)
 8006a1c:	a809883a 	mov	r4,r21
 8006a20:	d8c00115 	stw	r3,4(sp)
 8006a24:	e00d883a 	mov	r6,fp
 8006a28:	103ee83a 	callr	r2
 8006a2c:	1029883a 	mov	r20,r2
 8006a30:	d8c00117 	ldw	r3,4(sp)
 8006a34:	00bfe10e 	bge	zero,r2,80069bc <__alt_data_end+0xf80069bc>
 8006a38:	b52dc83a 	sub	r22,r22,r20
 8006a3c:	b0001f26 	beq	r22,zero,8006abc <__sfvwrite_r+0x2c4>
 8006a40:	98800217 	ldw	r2,8(r19)
 8006a44:	e539883a 	add	fp,fp,r20
 8006a48:	9525c83a 	sub	r18,r18,r20
 8006a4c:	1529c83a 	sub	r20,r2,r20
 8006a50:	9d000215 	stw	r20,8(r19)
 8006a54:	a03f9326 	beq	r20,zero,80068a4 <__alt_data_end+0xf80068a4>
 8006a58:	903fe11e 	bne	r18,zero,80069e0 <__alt_data_end+0xf80069e0>
 8006a5c:	8f000017 	ldw	fp,0(r17)
 8006a60:	8c800117 	ldw	r18,4(r17)
 8006a64:	0007883a 	mov	r3,zero
 8006a68:	8c400204 	addi	r17,r17,8
 8006a6c:	003fdb06 	br	80069dc <__alt_data_end+0xf80069dc>
 8006a70:	400d883a 	mov	r6,r8
 8006a74:	e00b883a 	mov	r5,fp
 8006a78:	d8c00115 	stw	r3,4(sp)
 8006a7c:	da000015 	stw	r8,0(sp)
 8006a80:	8007a440 	call	8007a44 <memmove>
 8006a84:	da000017 	ldw	r8,0(sp)
 8006a88:	80800017 	ldw	r2,0(r16)
 8006a8c:	a809883a 	mov	r4,r21
 8006a90:	800b883a 	mov	r5,r16
 8006a94:	1205883a 	add	r2,r2,r8
 8006a98:	80800015 	stw	r2,0(r16)
 8006a9c:	da000015 	stw	r8,0(sp)
 8006aa0:	8005dd40 	call	8005dd4 <_fflush_r>
 8006aa4:	d8c00117 	ldw	r3,4(sp)
 8006aa8:	da000017 	ldw	r8,0(sp)
 8006aac:	103fc31e 	bne	r2,zero,80069bc <__alt_data_end+0xf80069bc>
 8006ab0:	4029883a 	mov	r20,r8
 8006ab4:	b52dc83a 	sub	r22,r22,r20
 8006ab8:	b03fe11e 	bne	r22,zero,8006a40 <__alt_data_end+0xf8006a40>
 8006abc:	a809883a 	mov	r4,r21
 8006ac0:	800b883a 	mov	r5,r16
 8006ac4:	8005dd40 	call	8005dd4 <_fflush_r>
 8006ac8:	103fbc1e 	bne	r2,zero,80069bc <__alt_data_end+0xf80069bc>
 8006acc:	0007883a 	mov	r3,zero
 8006ad0:	003fdb06 	br	8006a40 <__alt_data_end+0xf8006a40>
 8006ad4:	81000017 	ldw	r4,0(r16)
 8006ad8:	80800417 	ldw	r2,16(r16)
 8006adc:	1100012e 	bgeu	r2,r4,8006ae4 <__sfvwrite_r+0x2ec>
 8006ae0:	a4805836 	bltu	r20,r18,8006c44 <__sfvwrite_r+0x44c>
 8006ae4:	81c00517 	ldw	r7,20(r16)
 8006ae8:	91c01a36 	bltu	r18,r7,8006b54 <__sfvwrite_r+0x35c>
 8006aec:	80800917 	ldw	r2,36(r16)
 8006af0:	81400717 	ldw	r5,28(r16)
 8006af4:	a809883a 	mov	r4,r21
 8006af8:	b00d883a 	mov	r6,r22
 8006afc:	103ee83a 	callr	r2
 8006b00:	1029883a 	mov	r20,r2
 8006b04:	00bfad0e 	bge	zero,r2,80069bc <__alt_data_end+0xf80069bc>
 8006b08:	a005883a 	mov	r2,r20
 8006b0c:	003f9306 	br	800695c <__alt_data_end+0xf800695c>
 8006b10:	b80d883a 	mov	r6,r23
 8006b14:	e00b883a 	mov	r5,fp
 8006b18:	d8c00115 	stw	r3,4(sp)
 8006b1c:	8007a440 	call	8007a44 <memmove>
 8006b20:	80800217 	ldw	r2,8(r16)
 8006b24:	81000017 	ldw	r4,0(r16)
 8006b28:	d8c00117 	ldw	r3,4(sp)
 8006b2c:	15c5c83a 	sub	r2,r2,r23
 8006b30:	25ef883a 	add	r23,r4,r23
 8006b34:	80800215 	stw	r2,8(r16)
 8006b38:	85c00015 	stw	r23,0(r16)
 8006b3c:	003fbe06 	br	8006a38 <__alt_data_end+0xf8006a38>
 8006b40:	81000017 	ldw	r4,0(r16)
 8006b44:	9039883a 	mov	fp,r18
 8006b48:	9029883a 	mov	r20,r18
 8006b4c:	902f883a 	mov	r23,r18
 8006b50:	003f7806 	br	8006934 <__alt_data_end+0xf8006934>
 8006b54:	b00b883a 	mov	r5,r22
 8006b58:	900d883a 	mov	r6,r18
 8006b5c:	8007a440 	call	8007a44 <memmove>
 8006b60:	80c00217 	ldw	r3,8(r16)
 8006b64:	80800017 	ldw	r2,0(r16)
 8006b68:	9029883a 	mov	r20,r18
 8006b6c:	1c87c83a 	sub	r3,r3,r18
 8006b70:	1485883a 	add	r2,r2,r18
 8006b74:	80800015 	stw	r2,0(r16)
 8006b78:	80c00215 	stw	r3,8(r16)
 8006b7c:	9005883a 	mov	r2,r18
 8006b80:	003f7606 	br	800695c <__alt_data_end+0xf800695c>
 8006b84:	e009883a 	mov	r4,fp
 8006b88:	01400284 	movi	r5,10
 8006b8c:	900d883a 	mov	r6,r18
 8006b90:	80078500 	call	8007850 <memchr>
 8006b94:	10003926 	beq	r2,zero,8006c7c <__sfvwrite_r+0x484>
 8006b98:	15800044 	addi	r22,r2,1
 8006b9c:	b72dc83a 	sub	r22,r22,fp
 8006ba0:	00c00044 	movi	r3,1
 8006ba4:	003f8f06 	br	80069e4 <__alt_data_end+0xf80069e4>
 8006ba8:	81000517 	ldw	r4,20(r16)
 8006bac:	81400417 	ldw	r5,16(r16)
 8006bb0:	80c00017 	ldw	r3,0(r16)
 8006bb4:	210d883a 	add	r6,r4,r4
 8006bb8:	3109883a 	add	r4,r6,r4
 8006bbc:	2028d7fa 	srli	r20,r4,31
 8006bc0:	196fc83a 	sub	r23,r3,r5
 8006bc4:	b9800044 	addi	r6,r23,1
 8006bc8:	a109883a 	add	r4,r20,r4
 8006bcc:	2029d07a 	srai	r20,r4,1
 8006bd0:	348d883a 	add	r6,r6,r18
 8006bd4:	a180272e 	bgeu	r20,r6,8006c74 <__sfvwrite_r+0x47c>
 8006bd8:	3029883a 	mov	r20,r6
 8006bdc:	1081000c 	andi	r2,r2,1024
 8006be0:	a809883a 	mov	r4,r21
 8006be4:	103f6d26 	beq	r2,zero,800699c <__alt_data_end+0xf800699c>
 8006be8:	300b883a 	mov	r5,r6
 8006bec:	800708c0 	call	800708c <_malloc_r>
 8006bf0:	1039883a 	mov	fp,r2
 8006bf4:	103f6f26 	beq	r2,zero,80069b4 <__alt_data_end+0xf80069b4>
 8006bf8:	81400417 	ldw	r5,16(r16)
 8006bfc:	1009883a 	mov	r4,r2
 8006c00:	b80d883a 	mov	r6,r23
 8006c04:	80079380 	call	8007938 <memcpy>
 8006c08:	8080030b 	ldhu	r2,12(r16)
 8006c0c:	00fedfc4 	movi	r3,-1153
 8006c10:	10c4703a 	and	r2,r2,r3
 8006c14:	10802014 	ori	r2,r2,128
 8006c18:	8080030d 	sth	r2,12(r16)
 8006c1c:	e5c9883a 	add	r4,fp,r23
 8006c20:	a5c7c83a 	sub	r3,r20,r23
 8006c24:	87000415 	stw	fp,16(r16)
 8006c28:	85000515 	stw	r20,20(r16)
 8006c2c:	81000015 	stw	r4,0(r16)
 8006c30:	9039883a 	mov	fp,r18
 8006c34:	80c00215 	stw	r3,8(r16)
 8006c38:	9029883a 	mov	r20,r18
 8006c3c:	902f883a 	mov	r23,r18
 8006c40:	003f3c06 	br	8006934 <__alt_data_end+0xf8006934>
 8006c44:	b00b883a 	mov	r5,r22
 8006c48:	a00d883a 	mov	r6,r20
 8006c4c:	8007a440 	call	8007a44 <memmove>
 8006c50:	80800017 	ldw	r2,0(r16)
 8006c54:	a809883a 	mov	r4,r21
 8006c58:	800b883a 	mov	r5,r16
 8006c5c:	1505883a 	add	r2,r2,r20
 8006c60:	80800015 	stw	r2,0(r16)
 8006c64:	8005dd40 	call	8005dd4 <_fflush_r>
 8006c68:	103f541e 	bne	r2,zero,80069bc <__alt_data_end+0xf80069bc>
 8006c6c:	a005883a 	mov	r2,r20
 8006c70:	003f3a06 	br	800695c <__alt_data_end+0xf800695c>
 8006c74:	a00d883a 	mov	r6,r20
 8006c78:	003fd806 	br	8006bdc <__alt_data_end+0xf8006bdc>
 8006c7c:	95800044 	addi	r22,r18,1
 8006c80:	00c00044 	movi	r3,1
 8006c84:	003f5706 	br	80069e4 <__alt_data_end+0xf80069e4>
 8006c88:	80c0030b 	ldhu	r3,12(r16)
 8006c8c:	00bfffc4 	movi	r2,-1
 8006c90:	18c01014 	ori	r3,r3,64
 8006c94:	80c0030d 	sth	r3,12(r16)
 8006c98:	00c00244 	movi	r3,9
 8006c9c:	a8c00015 	stw	r3,0(r21)
 8006ca0:	003f0106 	br	80068a8 <__alt_data_end+0xf80068a8>

08006ca4 <_fwalk>:
 8006ca4:	defff904 	addi	sp,sp,-28
 8006ca8:	dcc00315 	stw	r19,12(sp)
 8006cac:	24c0b804 	addi	r19,r4,736
 8006cb0:	dd400515 	stw	r21,20(sp)
 8006cb4:	dd000415 	stw	r20,16(sp)
 8006cb8:	dfc00615 	stw	ra,24(sp)
 8006cbc:	dc800215 	stw	r18,8(sp)
 8006cc0:	dc400115 	stw	r17,4(sp)
 8006cc4:	dc000015 	stw	r16,0(sp)
 8006cc8:	282b883a 	mov	r21,r5
 8006ccc:	0029883a 	mov	r20,zero
 8006cd0:	80063ac0 	call	80063ac <__sfp_lock_acquire>
 8006cd4:	98001226 	beq	r19,zero,8006d20 <_fwalk+0x7c>
 8006cd8:	04bfffc4 	movi	r18,-1
 8006cdc:	9c400117 	ldw	r17,4(r19)
 8006ce0:	9c000217 	ldw	r16,8(r19)
 8006ce4:	8c7fffc4 	addi	r17,r17,-1
 8006ce8:	88000b16 	blt	r17,zero,8006d18 <_fwalk+0x74>
 8006cec:	84000304 	addi	r16,r16,12
 8006cf0:	80c0000f 	ldh	r3,0(r16)
 8006cf4:	8c7fffc4 	addi	r17,r17,-1
 8006cf8:	813ffd04 	addi	r4,r16,-12
 8006cfc:	18000426 	beq	r3,zero,8006d10 <_fwalk+0x6c>
 8006d00:	80c0008f 	ldh	r3,2(r16)
 8006d04:	1c800226 	beq	r3,r18,8006d10 <_fwalk+0x6c>
 8006d08:	a83ee83a 	callr	r21
 8006d0c:	a0a8b03a 	or	r20,r20,r2
 8006d10:	84001a04 	addi	r16,r16,104
 8006d14:	8cbff61e 	bne	r17,r18,8006cf0 <__alt_data_end+0xf8006cf0>
 8006d18:	9cc00017 	ldw	r19,0(r19)
 8006d1c:	983fef1e 	bne	r19,zero,8006cdc <__alt_data_end+0xf8006cdc>
 8006d20:	80063b00 	call	80063b0 <__sfp_lock_release>
 8006d24:	a005883a 	mov	r2,r20
 8006d28:	dfc00617 	ldw	ra,24(sp)
 8006d2c:	dd400517 	ldw	r21,20(sp)
 8006d30:	dd000417 	ldw	r20,16(sp)
 8006d34:	dcc00317 	ldw	r19,12(sp)
 8006d38:	dc800217 	ldw	r18,8(sp)
 8006d3c:	dc400117 	ldw	r17,4(sp)
 8006d40:	dc000017 	ldw	r16,0(sp)
 8006d44:	dec00704 	addi	sp,sp,28
 8006d48:	f800283a 	ret

08006d4c <_fwalk_reent>:
 8006d4c:	defff804 	addi	sp,sp,-32
 8006d50:	dcc00315 	stw	r19,12(sp)
 8006d54:	24c0b804 	addi	r19,r4,736
 8006d58:	dd800615 	stw	r22,24(sp)
 8006d5c:	dd400515 	stw	r21,20(sp)
 8006d60:	dd000415 	stw	r20,16(sp)
 8006d64:	dfc00715 	stw	ra,28(sp)
 8006d68:	dc800215 	stw	r18,8(sp)
 8006d6c:	dc400115 	stw	r17,4(sp)
 8006d70:	dc000015 	stw	r16,0(sp)
 8006d74:	2029883a 	mov	r20,r4
 8006d78:	282b883a 	mov	r21,r5
 8006d7c:	002d883a 	mov	r22,zero
 8006d80:	80063ac0 	call	80063ac <__sfp_lock_acquire>
 8006d84:	98001326 	beq	r19,zero,8006dd4 <_fwalk_reent+0x88>
 8006d88:	04bfffc4 	movi	r18,-1
 8006d8c:	9c400117 	ldw	r17,4(r19)
 8006d90:	9c000217 	ldw	r16,8(r19)
 8006d94:	8c7fffc4 	addi	r17,r17,-1
 8006d98:	88000c16 	blt	r17,zero,8006dcc <_fwalk_reent+0x80>
 8006d9c:	84000304 	addi	r16,r16,12
 8006da0:	80c0000f 	ldh	r3,0(r16)
 8006da4:	8c7fffc4 	addi	r17,r17,-1
 8006da8:	817ffd04 	addi	r5,r16,-12
 8006dac:	18000526 	beq	r3,zero,8006dc4 <_fwalk_reent+0x78>
 8006db0:	80c0008f 	ldh	r3,2(r16)
 8006db4:	a009883a 	mov	r4,r20
 8006db8:	1c800226 	beq	r3,r18,8006dc4 <_fwalk_reent+0x78>
 8006dbc:	a83ee83a 	callr	r21
 8006dc0:	b0acb03a 	or	r22,r22,r2
 8006dc4:	84001a04 	addi	r16,r16,104
 8006dc8:	8cbff51e 	bne	r17,r18,8006da0 <__alt_data_end+0xf8006da0>
 8006dcc:	9cc00017 	ldw	r19,0(r19)
 8006dd0:	983fee1e 	bne	r19,zero,8006d8c <__alt_data_end+0xf8006d8c>
 8006dd4:	80063b00 	call	80063b0 <__sfp_lock_release>
 8006dd8:	b005883a 	mov	r2,r22
 8006ddc:	dfc00717 	ldw	ra,28(sp)
 8006de0:	dd800617 	ldw	r22,24(sp)
 8006de4:	dd400517 	ldw	r21,20(sp)
 8006de8:	dd000417 	ldw	r20,16(sp)
 8006dec:	dcc00317 	ldw	r19,12(sp)
 8006df0:	dc800217 	ldw	r18,8(sp)
 8006df4:	dc400117 	ldw	r17,4(sp)
 8006df8:	dc000017 	ldw	r16,0(sp)
 8006dfc:	dec00804 	addi	sp,sp,32
 8006e00:	f800283a 	ret

08006e04 <_setlocale_r>:
 8006e04:	defffe04 	addi	sp,sp,-8
 8006e08:	dc000015 	stw	r16,0(sp)
 8006e0c:	dfc00115 	stw	ra,4(sp)
 8006e10:	3021883a 	mov	r16,r6
 8006e14:	30000526 	beq	r6,zero,8006e2c <_setlocale_r+0x28>
 8006e18:	3009883a 	mov	r4,r6
 8006e1c:	01420074 	movhi	r5,2049
 8006e20:	29466a04 	addi	r5,r5,6568
 8006e24:	80094280 	call	8009428 <strcmp>
 8006e28:	1000061e 	bne	r2,zero,8006e44 <_setlocale_r+0x40>
 8006e2c:	00820074 	movhi	r2,2049
 8006e30:	10866904 	addi	r2,r2,6564
 8006e34:	dfc00117 	ldw	ra,4(sp)
 8006e38:	dc000017 	ldw	r16,0(sp)
 8006e3c:	dec00204 	addi	sp,sp,8
 8006e40:	f800283a 	ret
 8006e44:	8009883a 	mov	r4,r16
 8006e48:	01420074 	movhi	r5,2049
 8006e4c:	29466904 	addi	r5,r5,6564
 8006e50:	80094280 	call	8009428 <strcmp>
 8006e54:	103ff526 	beq	r2,zero,8006e2c <__alt_data_end+0xf8006e2c>
 8006e58:	8009883a 	mov	r4,r16
 8006e5c:	01420074 	movhi	r5,2049
 8006e60:	29465404 	addi	r5,r5,6480
 8006e64:	80094280 	call	8009428 <strcmp>
 8006e68:	103ff026 	beq	r2,zero,8006e2c <__alt_data_end+0xf8006e2c>
 8006e6c:	0005883a 	mov	r2,zero
 8006e70:	003ff006 	br	8006e34 <__alt_data_end+0xf8006e34>

08006e74 <__locale_charset>:
 8006e74:	00820074 	movhi	r2,2049
 8006e78:	10881a04 	addi	r2,r2,8296
 8006e7c:	f800283a 	ret

08006e80 <__locale_mb_cur_max>:
 8006e80:	00820074 	movhi	r2,2049
 8006e84:	108db604 	addi	r2,r2,14040
 8006e88:	10800017 	ldw	r2,0(r2)
 8006e8c:	f800283a 	ret

08006e90 <__locale_msgcharset>:
 8006e90:	00820074 	movhi	r2,2049
 8006e94:	10881204 	addi	r2,r2,8264
 8006e98:	f800283a 	ret

08006e9c <__locale_cjk_lang>:
 8006e9c:	0005883a 	mov	r2,zero
 8006ea0:	f800283a 	ret

08006ea4 <_localeconv_r>:
 8006ea4:	00820074 	movhi	r2,2049
 8006ea8:	10882204 	addi	r2,r2,8328
 8006eac:	f800283a 	ret

08006eb0 <setlocale>:
 8006eb0:	00c20074 	movhi	r3,2049
 8006eb4:	18cdb504 	addi	r3,r3,14036
 8006eb8:	2005883a 	mov	r2,r4
 8006ebc:	19000017 	ldw	r4,0(r3)
 8006ec0:	280d883a 	mov	r6,r5
 8006ec4:	100b883a 	mov	r5,r2
 8006ec8:	8006e041 	jmpi	8006e04 <_setlocale_r>

08006ecc <localeconv>:
 8006ecc:	00820074 	movhi	r2,2049
 8006ed0:	10882204 	addi	r2,r2,8328
 8006ed4:	f800283a 	ret

08006ed8 <__smakebuf_r>:
 8006ed8:	2880030b 	ldhu	r2,12(r5)
 8006edc:	deffec04 	addi	sp,sp,-80
 8006ee0:	dc000f15 	stw	r16,60(sp)
 8006ee4:	dfc01315 	stw	ra,76(sp)
 8006ee8:	dcc01215 	stw	r19,72(sp)
 8006eec:	dc801115 	stw	r18,68(sp)
 8006ef0:	dc401015 	stw	r17,64(sp)
 8006ef4:	10c0008c 	andi	r3,r2,2
 8006ef8:	2821883a 	mov	r16,r5
 8006efc:	18003a1e 	bne	r3,zero,8006fe8 <__smakebuf_r+0x110>
 8006f00:	2940038f 	ldh	r5,14(r5)
 8006f04:	2023883a 	mov	r17,r4
 8006f08:	28001b16 	blt	r5,zero,8006f78 <__smakebuf_r+0xa0>
 8006f0c:	d80d883a 	mov	r6,sp
 8006f10:	800af2c0 	call	800af2c <_fstat_r>
 8006f14:	10001716 	blt	r2,zero,8006f74 <__smakebuf_r+0x9c>
 8006f18:	d8800117 	ldw	r2,4(sp)
 8006f1c:	00e00014 	movui	r3,32768
 8006f20:	10bc000c 	andi	r2,r2,61440
 8006f24:	10c03e26 	beq	r2,r3,8007020 <__smakebuf_r+0x148>
 8006f28:	80c0030b 	ldhu	r3,12(r16)
 8006f2c:	18c20014 	ori	r3,r3,2048
 8006f30:	80c0030d 	sth	r3,12(r16)
 8006f34:	00c80004 	movi	r3,8192
 8006f38:	10c0431e 	bne	r2,r3,8007048 <__smakebuf_r+0x170>
 8006f3c:	8140038f 	ldh	r5,14(r16)
 8006f40:	8809883a 	mov	r4,r17
 8006f44:	800af940 	call	800af94 <_isatty_r>
 8006f48:	10004d26 	beq	r2,zero,8007080 <__smakebuf_r+0x1a8>
 8006f4c:	80c0030b 	ldhu	r3,12(r16)
 8006f50:	04c00044 	movi	r19,1
 8006f54:	808010c4 	addi	r2,r16,67
 8006f58:	1cc6b03a 	or	r3,r3,r19
 8006f5c:	80c0030d 	sth	r3,12(r16)
 8006f60:	80800015 	stw	r2,0(r16)
 8006f64:	80800415 	stw	r2,16(r16)
 8006f68:	84c00515 	stw	r19,20(r16)
 8006f6c:	04810004 	movi	r18,1024
 8006f70:	00000706 	br	8006f90 <__smakebuf_r+0xb8>
 8006f74:	8080030b 	ldhu	r2,12(r16)
 8006f78:	10c0200c 	andi	r3,r2,128
 8006f7c:	1800261e 	bne	r3,zero,8007018 <__smakebuf_r+0x140>
 8006f80:	04810004 	movi	r18,1024
 8006f84:	10820014 	ori	r2,r2,2048
 8006f88:	8080030d 	sth	r2,12(r16)
 8006f8c:	0027883a 	mov	r19,zero
 8006f90:	8809883a 	mov	r4,r17
 8006f94:	900b883a 	mov	r5,r18
 8006f98:	800708c0 	call	800708c <_malloc_r>
 8006f9c:	10002d26 	beq	r2,zero,8007054 <__smakebuf_r+0x17c>
 8006fa0:	80c0030b 	ldhu	r3,12(r16)
 8006fa4:	01020034 	movhi	r4,2048
 8006fa8:	21181604 	addi	r4,r4,24664
 8006fac:	89000f15 	stw	r4,60(r17)
 8006fb0:	18c02014 	ori	r3,r3,128
 8006fb4:	80c0030d 	sth	r3,12(r16)
 8006fb8:	80800015 	stw	r2,0(r16)
 8006fbc:	80800415 	stw	r2,16(r16)
 8006fc0:	84800515 	stw	r18,20(r16)
 8006fc4:	98000d26 	beq	r19,zero,8006ffc <__smakebuf_r+0x124>
 8006fc8:	8140038f 	ldh	r5,14(r16)
 8006fcc:	8809883a 	mov	r4,r17
 8006fd0:	800af940 	call	800af94 <_isatty_r>
 8006fd4:	10000926 	beq	r2,zero,8006ffc <__smakebuf_r+0x124>
 8006fd8:	8080030b 	ldhu	r2,12(r16)
 8006fdc:	10800054 	ori	r2,r2,1
 8006fe0:	8080030d 	sth	r2,12(r16)
 8006fe4:	00000506 	br	8006ffc <__smakebuf_r+0x124>
 8006fe8:	288010c4 	addi	r2,r5,67
 8006fec:	28800015 	stw	r2,0(r5)
 8006ff0:	28800415 	stw	r2,16(r5)
 8006ff4:	00800044 	movi	r2,1
 8006ff8:	28800515 	stw	r2,20(r5)
 8006ffc:	dfc01317 	ldw	ra,76(sp)
 8007000:	dcc01217 	ldw	r19,72(sp)
 8007004:	dc801117 	ldw	r18,68(sp)
 8007008:	dc401017 	ldw	r17,64(sp)
 800700c:	dc000f17 	ldw	r16,60(sp)
 8007010:	dec01404 	addi	sp,sp,80
 8007014:	f800283a 	ret
 8007018:	04801004 	movi	r18,64
 800701c:	003fd906 	br	8006f84 <__alt_data_end+0xf8006f84>
 8007020:	81000a17 	ldw	r4,40(r16)
 8007024:	00c20074 	movhi	r3,2049
 8007028:	18e4f104 	addi	r3,r3,-27708
 800702c:	20ffbe1e 	bne	r4,r3,8006f28 <__alt_data_end+0xf8006f28>
 8007030:	80c0030b 	ldhu	r3,12(r16)
 8007034:	01010004 	movi	r4,1024
 8007038:	81001315 	stw	r4,76(r16)
 800703c:	1906b03a 	or	r3,r3,r4
 8007040:	80c0030d 	sth	r3,12(r16)
 8007044:	003fbb06 	br	8006f34 <__alt_data_end+0xf8006f34>
 8007048:	0027883a 	mov	r19,zero
 800704c:	04810004 	movi	r18,1024
 8007050:	003fcf06 	br	8006f90 <__alt_data_end+0xf8006f90>
 8007054:	8080030b 	ldhu	r2,12(r16)
 8007058:	10c0800c 	andi	r3,r2,512
 800705c:	183fe71e 	bne	r3,zero,8006ffc <__alt_data_end+0xf8006ffc>
 8007060:	10800094 	ori	r2,r2,2
 8007064:	80c010c4 	addi	r3,r16,67
 8007068:	8080030d 	sth	r2,12(r16)
 800706c:	00800044 	movi	r2,1
 8007070:	80c00015 	stw	r3,0(r16)
 8007074:	80c00415 	stw	r3,16(r16)
 8007078:	80800515 	stw	r2,20(r16)
 800707c:	003fdf06 	br	8006ffc <__alt_data_end+0xf8006ffc>
 8007080:	04c00044 	movi	r19,1
 8007084:	04810004 	movi	r18,1024
 8007088:	003fc106 	br	8006f90 <__alt_data_end+0xf8006f90>

0800708c <_malloc_r>:
 800708c:	defff504 	addi	sp,sp,-44
 8007090:	dc800315 	stw	r18,12(sp)
 8007094:	dfc00a15 	stw	ra,40(sp)
 8007098:	df000915 	stw	fp,36(sp)
 800709c:	ddc00815 	stw	r23,32(sp)
 80070a0:	dd800715 	stw	r22,28(sp)
 80070a4:	dd400615 	stw	r21,24(sp)
 80070a8:	dd000515 	stw	r20,20(sp)
 80070ac:	dcc00415 	stw	r19,16(sp)
 80070b0:	dc400215 	stw	r17,8(sp)
 80070b4:	dc000115 	stw	r16,4(sp)
 80070b8:	288002c4 	addi	r2,r5,11
 80070bc:	00c00584 	movi	r3,22
 80070c0:	2025883a 	mov	r18,r4
 80070c4:	18802b2e 	bgeu	r3,r2,8007174 <_malloc_r+0xe8>
 80070c8:	047ffe04 	movi	r17,-8
 80070cc:	1462703a 	and	r17,r2,r17
 80070d0:	88002a16 	blt	r17,zero,800717c <_malloc_r+0xf0>
 80070d4:	89402936 	bltu	r17,r5,800717c <_malloc_r+0xf0>
 80070d8:	9009883a 	mov	r4,r18
 80070dc:	800ef800 	call	800ef80 <__malloc_lock>
 80070e0:	00807dc4 	movi	r2,503
 80070e4:	14402936 	bltu	r2,r17,800718c <_malloc_r+0x100>
 80070e8:	8808d0fa 	srli	r4,r17,3
 80070ec:	04c20074 	movhi	r19,2049
 80070f0:	9cc83004 	addi	r19,r19,8384
 80070f4:	2105883a 	add	r2,r4,r4
 80070f8:	1085883a 	add	r2,r2,r2
 80070fc:	1085883a 	add	r2,r2,r2
 8007100:	9885883a 	add	r2,r19,r2
 8007104:	14000317 	ldw	r16,12(r2)
 8007108:	80815226 	beq	r16,r2,8007654 <_malloc_r+0x5c8>
 800710c:	81000117 	ldw	r4,4(r16)
 8007110:	00bfff04 	movi	r2,-4
 8007114:	80c00317 	ldw	r3,12(r16)
 8007118:	2084703a 	and	r2,r4,r2
 800711c:	8085883a 	add	r2,r16,r2
 8007120:	81000217 	ldw	r4,8(r16)
 8007124:	11400117 	ldw	r5,4(r2)
 8007128:	20c00315 	stw	r3,12(r4)
 800712c:	19000215 	stw	r4,8(r3)
 8007130:	28c00054 	ori	r3,r5,1
 8007134:	10c00115 	stw	r3,4(r2)
 8007138:	9009883a 	mov	r4,r18
 800713c:	800efa00 	call	800efa0 <__malloc_unlock>
 8007140:	80800204 	addi	r2,r16,8
 8007144:	dfc00a17 	ldw	ra,40(sp)
 8007148:	df000917 	ldw	fp,36(sp)
 800714c:	ddc00817 	ldw	r23,32(sp)
 8007150:	dd800717 	ldw	r22,28(sp)
 8007154:	dd400617 	ldw	r21,24(sp)
 8007158:	dd000517 	ldw	r20,20(sp)
 800715c:	dcc00417 	ldw	r19,16(sp)
 8007160:	dc800317 	ldw	r18,12(sp)
 8007164:	dc400217 	ldw	r17,8(sp)
 8007168:	dc000117 	ldw	r16,4(sp)
 800716c:	dec00b04 	addi	sp,sp,44
 8007170:	f800283a 	ret
 8007174:	04400404 	movi	r17,16
 8007178:	897fd72e 	bgeu	r17,r5,80070d8 <__alt_data_end+0xf80070d8>
 800717c:	00800304 	movi	r2,12
 8007180:	90800015 	stw	r2,0(r18)
 8007184:	0005883a 	mov	r2,zero
 8007188:	003fee06 	br	8007144 <__alt_data_end+0xf8007144>
 800718c:	8808d27a 	srli	r4,r17,9
 8007190:	20007126 	beq	r4,zero,8007358 <_malloc_r+0x2cc>
 8007194:	00800104 	movi	r2,4
 8007198:	1100f536 	bltu	r2,r4,8007570 <_malloc_r+0x4e4>
 800719c:	8808d1ba 	srli	r4,r17,6
 80071a0:	21000e04 	addi	r4,r4,56
 80071a4:	210b883a 	add	r5,r4,r4
 80071a8:	294b883a 	add	r5,r5,r5
 80071ac:	294b883a 	add	r5,r5,r5
 80071b0:	04c20074 	movhi	r19,2049
 80071b4:	9cc83004 	addi	r19,r19,8384
 80071b8:	994b883a 	add	r5,r19,r5
 80071bc:	2c000317 	ldw	r16,12(r5)
 80071c0:	2c000e26 	beq	r5,r16,80071fc <_malloc_r+0x170>
 80071c4:	80c00117 	ldw	r3,4(r16)
 80071c8:	01ffff04 	movi	r7,-4
 80071cc:	018003c4 	movi	r6,15
 80071d0:	19c6703a 	and	r3,r3,r7
 80071d4:	1c45c83a 	sub	r2,r3,r17
 80071d8:	30800716 	blt	r6,r2,80071f8 <_malloc_r+0x16c>
 80071dc:	1000610e 	bge	r2,zero,8007364 <_malloc_r+0x2d8>
 80071e0:	84000317 	ldw	r16,12(r16)
 80071e4:	2c000526 	beq	r5,r16,80071fc <_malloc_r+0x170>
 80071e8:	80c00117 	ldw	r3,4(r16)
 80071ec:	19c6703a 	and	r3,r3,r7
 80071f0:	1c45c83a 	sub	r2,r3,r17
 80071f4:	30bff90e 	bge	r6,r2,80071dc <__alt_data_end+0xf80071dc>
 80071f8:	213fffc4 	addi	r4,r4,-1
 80071fc:	21000044 	addi	r4,r4,1
 8007200:	9c000417 	ldw	r16,16(r19)
 8007204:	00c20074 	movhi	r3,2049
 8007208:	18c83004 	addi	r3,r3,8384
 800720c:	1a400204 	addi	r9,r3,8
 8007210:	82410926 	beq	r16,r9,8007638 <_malloc_r+0x5ac>
 8007214:	81400117 	ldw	r5,4(r16)
 8007218:	00bfff04 	movi	r2,-4
 800721c:	018003c4 	movi	r6,15
 8007220:	2884703a 	and	r2,r5,r2
 8007224:	144bc83a 	sub	r5,r2,r17
 8007228:	3140f416 	blt	r6,r5,80075fc <_malloc_r+0x570>
 800722c:	1a400515 	stw	r9,20(r3)
 8007230:	1a400415 	stw	r9,16(r3)
 8007234:	2800570e 	bge	r5,zero,8007394 <_malloc_r+0x308>
 8007238:	01407fc4 	movi	r5,511
 800723c:	2880d436 	bltu	r5,r2,8007590 <_malloc_r+0x504>
 8007240:	1004d0fa 	srli	r2,r2,3
 8007244:	02000044 	movi	r8,1
 8007248:	19c00117 	ldw	r7,4(r3)
 800724c:	108b883a 	add	r5,r2,r2
 8007250:	294b883a 	add	r5,r5,r5
 8007254:	1005d0ba 	srai	r2,r2,2
 8007258:	294b883a 	add	r5,r5,r5
 800725c:	28cb883a 	add	r5,r5,r3
 8007260:	29800217 	ldw	r6,8(r5)
 8007264:	4084983a 	sll	r2,r8,r2
 8007268:	81400315 	stw	r5,12(r16)
 800726c:	81800215 	stw	r6,8(r16)
 8007270:	11c4b03a 	or	r2,r2,r7
 8007274:	2c000215 	stw	r16,8(r5)
 8007278:	18800115 	stw	r2,4(r3)
 800727c:	34000315 	stw	r16,12(r6)
 8007280:	2007d0ba 	srai	r3,r4,2
 8007284:	01400044 	movi	r5,1
 8007288:	28ca983a 	sll	r5,r5,r3
 800728c:	11404936 	bltu	r2,r5,80073b4 <_malloc_r+0x328>
 8007290:	1146703a 	and	r3,r2,r5
 8007294:	18000a1e 	bne	r3,zero,80072c0 <_malloc_r+0x234>
 8007298:	00ffff04 	movi	r3,-4
 800729c:	294b883a 	add	r5,r5,r5
 80072a0:	20c8703a 	and	r4,r4,r3
 80072a4:	1146703a 	and	r3,r2,r5
 80072a8:	21000104 	addi	r4,r4,4
 80072ac:	1800041e 	bne	r3,zero,80072c0 <_malloc_r+0x234>
 80072b0:	294b883a 	add	r5,r5,r5
 80072b4:	1146703a 	and	r3,r2,r5
 80072b8:	21000104 	addi	r4,r4,4
 80072bc:	183ffc26 	beq	r3,zero,80072b0 <__alt_data_end+0xf80072b0>
 80072c0:	023fff04 	movi	r8,-4
 80072c4:	01c003c4 	movi	r7,15
 80072c8:	2105883a 	add	r2,r4,r4
 80072cc:	1085883a 	add	r2,r2,r2
 80072d0:	1085883a 	add	r2,r2,r2
 80072d4:	9897883a 	add	r11,r19,r2
 80072d8:	5a800304 	addi	r10,r11,12
 80072dc:	2019883a 	mov	r12,r4
 80072e0:	54000017 	ldw	r16,0(r10)
 80072e4:	51bffd04 	addi	r6,r10,-12
 80072e8:	8180041e 	bne	r16,r6,80072fc <_malloc_r+0x270>
 80072ec:	0000d406 	br	8007640 <_malloc_r+0x5b4>
 80072f0:	1000dd0e 	bge	r2,zero,8007668 <_malloc_r+0x5dc>
 80072f4:	84000317 	ldw	r16,12(r16)
 80072f8:	8180d126 	beq	r16,r6,8007640 <_malloc_r+0x5b4>
 80072fc:	80c00117 	ldw	r3,4(r16)
 8007300:	1a06703a 	and	r3,r3,r8
 8007304:	1c45c83a 	sub	r2,r3,r17
 8007308:	38bff90e 	bge	r7,r2,80072f0 <__alt_data_end+0xf80072f0>
 800730c:	80c00317 	ldw	r3,12(r16)
 8007310:	81000217 	ldw	r4,8(r16)
 8007314:	89400054 	ori	r5,r17,1
 8007318:	81400115 	stw	r5,4(r16)
 800731c:	20c00315 	stw	r3,12(r4)
 8007320:	19000215 	stw	r4,8(r3)
 8007324:	8463883a 	add	r17,r16,r17
 8007328:	9c400515 	stw	r17,20(r19)
 800732c:	9c400415 	stw	r17,16(r19)
 8007330:	10c00054 	ori	r3,r2,1
 8007334:	8a400315 	stw	r9,12(r17)
 8007338:	8a400215 	stw	r9,8(r17)
 800733c:	88c00115 	stw	r3,4(r17)
 8007340:	88a3883a 	add	r17,r17,r2
 8007344:	88800015 	stw	r2,0(r17)
 8007348:	9009883a 	mov	r4,r18
 800734c:	800efa00 	call	800efa0 <__malloc_unlock>
 8007350:	80800204 	addi	r2,r16,8
 8007354:	003f7b06 	br	8007144 <__alt_data_end+0xf8007144>
 8007358:	01401f84 	movi	r5,126
 800735c:	01000fc4 	movi	r4,63
 8007360:	003f9106 	br	80071a8 <__alt_data_end+0xf80071a8>
 8007364:	80800317 	ldw	r2,12(r16)
 8007368:	81000217 	ldw	r4,8(r16)
 800736c:	80c7883a 	add	r3,r16,r3
 8007370:	19400117 	ldw	r5,4(r3)
 8007374:	20800315 	stw	r2,12(r4)
 8007378:	11000215 	stw	r4,8(r2)
 800737c:	28800054 	ori	r2,r5,1
 8007380:	18800115 	stw	r2,4(r3)
 8007384:	9009883a 	mov	r4,r18
 8007388:	800efa00 	call	800efa0 <__malloc_unlock>
 800738c:	80800204 	addi	r2,r16,8
 8007390:	003f6c06 	br	8007144 <__alt_data_end+0xf8007144>
 8007394:	8085883a 	add	r2,r16,r2
 8007398:	10c00117 	ldw	r3,4(r2)
 800739c:	9009883a 	mov	r4,r18
 80073a0:	18c00054 	ori	r3,r3,1
 80073a4:	10c00115 	stw	r3,4(r2)
 80073a8:	800efa00 	call	800efa0 <__malloc_unlock>
 80073ac:	80800204 	addi	r2,r16,8
 80073b0:	003f6406 	br	8007144 <__alt_data_end+0xf8007144>
 80073b4:	9c000217 	ldw	r16,8(r19)
 80073b8:	00bfff04 	movi	r2,-4
 80073bc:	85400117 	ldw	r21,4(r16)
 80073c0:	a8aa703a 	and	r21,r21,r2
 80073c4:	ac400336 	bltu	r21,r17,80073d4 <_malloc_r+0x348>
 80073c8:	ac45c83a 	sub	r2,r21,r17
 80073cc:	00c003c4 	movi	r3,15
 80073d0:	18805d16 	blt	r3,r2,8007548 <_malloc_r+0x4bc>
 80073d4:	00820074 	movhi	r2,2049
 80073d8:	10948504 	addi	r2,r2,21012
 80073dc:	00c20074 	movhi	r3,2049
 80073e0:	18cdb704 	addi	r3,r3,14044
 80073e4:	15c00017 	ldw	r23,0(r2)
 80073e8:	19000017 	ldw	r4,0(r3)
 80073ec:	00bfffc4 	movi	r2,-1
 80073f0:	8579883a 	add	fp,r16,r21
 80073f4:	8def883a 	add	r23,r17,r23
 80073f8:	2080e426 	beq	r4,r2,800778c <_malloc_r+0x700>
 80073fc:	bdc403c4 	addi	r23,r23,4111
 8007400:	00bc0004 	movi	r2,-4096
 8007404:	b8ae703a 	and	r23,r23,r2
 8007408:	9009883a 	mov	r4,r18
 800740c:	b80b883a 	mov	r5,r23
 8007410:	d8c00015 	stw	r3,0(sp)
 8007414:	80092880 	call	8009288 <_sbrk_r>
 8007418:	1029883a 	mov	r20,r2
 800741c:	00bfffc4 	movi	r2,-1
 8007420:	d8c00017 	ldw	r3,0(sp)
 8007424:	a080a426 	beq	r20,r2,80076b8 <_malloc_r+0x62c>
 8007428:	a700a236 	bltu	r20,fp,80076b4 <_malloc_r+0x628>
 800742c:	05820074 	movhi	r22,2049
 8007430:	b5948d04 	addi	r22,r22,21044
 8007434:	b0800017 	ldw	r2,0(r22)
 8007438:	b885883a 	add	r2,r23,r2
 800743c:	b0800015 	stw	r2,0(r22)
 8007440:	e500da26 	beq	fp,r20,80077ac <_malloc_r+0x720>
 8007444:	19000017 	ldw	r4,0(r3)
 8007448:	00ffffc4 	movi	r3,-1
 800744c:	20c0e426 	beq	r4,r3,80077e0 <_malloc_r+0x754>
 8007450:	a739c83a 	sub	fp,r20,fp
 8007454:	1705883a 	add	r2,r2,fp
 8007458:	b0800015 	stw	r2,0(r22)
 800745c:	a08001cc 	andi	r2,r20,7
 8007460:	1000b526 	beq	r2,zero,8007738 <_malloc_r+0x6ac>
 8007464:	a0a9c83a 	sub	r20,r20,r2
 8007468:	00c40204 	movi	r3,4104
 800746c:	a5000204 	addi	r20,r20,8
 8007470:	1885c83a 	sub	r2,r3,r2
 8007474:	a5c7883a 	add	r3,r20,r23
 8007478:	18c3ffcc 	andi	r3,r3,4095
 800747c:	10efc83a 	sub	r23,r2,r3
 8007480:	9009883a 	mov	r4,r18
 8007484:	b80b883a 	mov	r5,r23
 8007488:	80092880 	call	8009288 <_sbrk_r>
 800748c:	00ffffc4 	movi	r3,-1
 8007490:	10c0d026 	beq	r2,r3,80077d4 <_malloc_r+0x748>
 8007494:	1505c83a 	sub	r2,r2,r20
 8007498:	b887883a 	add	r3,r23,r2
 800749c:	18c00054 	ori	r3,r3,1
 80074a0:	b0800017 	ldw	r2,0(r22)
 80074a4:	9d000215 	stw	r20,8(r19)
 80074a8:	a0c00115 	stw	r3,4(r20)
 80074ac:	b885883a 	add	r2,r23,r2
 80074b0:	b0800015 	stw	r2,0(r22)
 80074b4:	84c00e26 	beq	r16,r19,80074f0 <_malloc_r+0x464>
 80074b8:	00c003c4 	movi	r3,15
 80074bc:	1d40a02e 	bgeu	r3,r21,8007740 <_malloc_r+0x6b4>
 80074c0:	81400117 	ldw	r5,4(r16)
 80074c4:	ad7ffd04 	addi	r21,r21,-12
 80074c8:	013ffe04 	movi	r4,-8
 80074cc:	a908703a 	and	r4,r21,r4
 80074d0:	2940004c 	andi	r5,r5,1
 80074d4:	214ab03a 	or	r5,r4,r5
 80074d8:	81400115 	stw	r5,4(r16)
 80074dc:	01800144 	movi	r6,5
 80074e0:	810b883a 	add	r5,r16,r4
 80074e4:	29800115 	stw	r6,4(r5)
 80074e8:	29800215 	stw	r6,8(r5)
 80074ec:	1900c036 	bltu	r3,r4,80077f0 <_malloc_r+0x764>
 80074f0:	00c20074 	movhi	r3,2049
 80074f4:	18d48404 	addi	r3,r3,21008
 80074f8:	19000017 	ldw	r4,0(r3)
 80074fc:	2080012e 	bgeu	r4,r2,8007504 <_malloc_r+0x478>
 8007500:	18800015 	stw	r2,0(r3)
 8007504:	00c20074 	movhi	r3,2049
 8007508:	18d48304 	addi	r3,r3,21004
 800750c:	19000017 	ldw	r4,0(r3)
 8007510:	9c000217 	ldw	r16,8(r19)
 8007514:	2080012e 	bgeu	r4,r2,800751c <_malloc_r+0x490>
 8007518:	18800015 	stw	r2,0(r3)
 800751c:	80c00117 	ldw	r3,4(r16)
 8007520:	00bfff04 	movi	r2,-4
 8007524:	1886703a 	and	r3,r3,r2
 8007528:	1c45c83a 	sub	r2,r3,r17
 800752c:	1c400236 	bltu	r3,r17,8007538 <_malloc_r+0x4ac>
 8007530:	00c003c4 	movi	r3,15
 8007534:	18800416 	blt	r3,r2,8007548 <_malloc_r+0x4bc>
 8007538:	9009883a 	mov	r4,r18
 800753c:	800efa00 	call	800efa0 <__malloc_unlock>
 8007540:	0005883a 	mov	r2,zero
 8007544:	003eff06 	br	8007144 <__alt_data_end+0xf8007144>
 8007548:	88c00054 	ori	r3,r17,1
 800754c:	80c00115 	stw	r3,4(r16)
 8007550:	8463883a 	add	r17,r16,r17
 8007554:	10800054 	ori	r2,r2,1
 8007558:	9c400215 	stw	r17,8(r19)
 800755c:	88800115 	stw	r2,4(r17)
 8007560:	9009883a 	mov	r4,r18
 8007564:	800efa00 	call	800efa0 <__malloc_unlock>
 8007568:	80800204 	addi	r2,r16,8
 800756c:	003ef506 	br	8007144 <__alt_data_end+0xf8007144>
 8007570:	00800504 	movi	r2,20
 8007574:	1100482e 	bgeu	r2,r4,8007698 <_malloc_r+0x60c>
 8007578:	00801504 	movi	r2,84
 800757c:	11006836 	bltu	r2,r4,8007720 <_malloc_r+0x694>
 8007580:	8808d33a 	srli	r4,r17,12
 8007584:	21001b84 	addi	r4,r4,110
 8007588:	210b883a 	add	r5,r4,r4
 800758c:	003f0606 	br	80071a8 <__alt_data_end+0xf80071a8>
 8007590:	1006d27a 	srli	r3,r2,9
 8007594:	01400104 	movi	r5,4
 8007598:	28c0422e 	bgeu	r5,r3,80076a4 <_malloc_r+0x618>
 800759c:	01400504 	movi	r5,20
 80075a0:	28c07c36 	bltu	r5,r3,8007794 <_malloc_r+0x708>
 80075a4:	194016c4 	addi	r5,r3,91
 80075a8:	294d883a 	add	r6,r5,r5
 80075ac:	318d883a 	add	r6,r6,r6
 80075b0:	318d883a 	add	r6,r6,r6
 80075b4:	998d883a 	add	r6,r19,r6
 80075b8:	30c00217 	ldw	r3,8(r6)
 80075bc:	01c20074 	movhi	r7,2049
 80075c0:	39c83004 	addi	r7,r7,8384
 80075c4:	19806326 	beq	r3,r6,8007754 <_malloc_r+0x6c8>
 80075c8:	01ffff04 	movi	r7,-4
 80075cc:	19400117 	ldw	r5,4(r3)
 80075d0:	29ca703a 	and	r5,r5,r7
 80075d4:	1140022e 	bgeu	r2,r5,80075e0 <_malloc_r+0x554>
 80075d8:	18c00217 	ldw	r3,8(r3)
 80075dc:	30fffb1e 	bne	r6,r3,80075cc <__alt_data_end+0xf80075cc>
 80075e0:	19400317 	ldw	r5,12(r3)
 80075e4:	98800117 	ldw	r2,4(r19)
 80075e8:	81400315 	stw	r5,12(r16)
 80075ec:	80c00215 	stw	r3,8(r16)
 80075f0:	2c000215 	stw	r16,8(r5)
 80075f4:	1c000315 	stw	r16,12(r3)
 80075f8:	003f2106 	br	8007280 <__alt_data_end+0xf8007280>
 80075fc:	88800054 	ori	r2,r17,1
 8007600:	80800115 	stw	r2,4(r16)
 8007604:	8463883a 	add	r17,r16,r17
 8007608:	1c400515 	stw	r17,20(r3)
 800760c:	1c400415 	stw	r17,16(r3)
 8007610:	28800054 	ori	r2,r5,1
 8007614:	88800115 	stw	r2,4(r17)
 8007618:	8a400315 	stw	r9,12(r17)
 800761c:	8a400215 	stw	r9,8(r17)
 8007620:	8963883a 	add	r17,r17,r5
 8007624:	89400015 	stw	r5,0(r17)
 8007628:	9009883a 	mov	r4,r18
 800762c:	800efa00 	call	800efa0 <__malloc_unlock>
 8007630:	80800204 	addi	r2,r16,8
 8007634:	003ec306 	br	8007144 <__alt_data_end+0xf8007144>
 8007638:	18800117 	ldw	r2,4(r3)
 800763c:	003f1006 	br	8007280 <__alt_data_end+0xf8007280>
 8007640:	63000044 	addi	r12,r12,1
 8007644:	608000cc 	andi	r2,r12,3
 8007648:	52800204 	addi	r10,r10,8
 800764c:	103f241e 	bne	r2,zero,80072e0 <__alt_data_end+0xf80072e0>
 8007650:	00002106 	br	80076d8 <_malloc_r+0x64c>
 8007654:	80800204 	addi	r2,r16,8
 8007658:	84000517 	ldw	r16,20(r16)
 800765c:	143eab1e 	bne	r2,r16,800710c <__alt_data_end+0xf800710c>
 8007660:	21000084 	addi	r4,r4,2
 8007664:	003ee606 	br	8007200 <__alt_data_end+0xf8007200>
 8007668:	80c7883a 	add	r3,r16,r3
 800766c:	19400117 	ldw	r5,4(r3)
 8007670:	80800317 	ldw	r2,12(r16)
 8007674:	81000217 	ldw	r4,8(r16)
 8007678:	29400054 	ori	r5,r5,1
 800767c:	19400115 	stw	r5,4(r3)
 8007680:	20800315 	stw	r2,12(r4)
 8007684:	11000215 	stw	r4,8(r2)
 8007688:	9009883a 	mov	r4,r18
 800768c:	800efa00 	call	800efa0 <__malloc_unlock>
 8007690:	80800204 	addi	r2,r16,8
 8007694:	003eab06 	br	8007144 <__alt_data_end+0xf8007144>
 8007698:	210016c4 	addi	r4,r4,91
 800769c:	210b883a 	add	r5,r4,r4
 80076a0:	003ec106 	br	80071a8 <__alt_data_end+0xf80071a8>
 80076a4:	100ad1ba 	srli	r5,r2,6
 80076a8:	29400e04 	addi	r5,r5,56
 80076ac:	294d883a 	add	r6,r5,r5
 80076b0:	003fbe06 	br	80075ac <__alt_data_end+0xf80075ac>
 80076b4:	84ff5d26 	beq	r16,r19,800742c <__alt_data_end+0xf800742c>
 80076b8:	9c000217 	ldw	r16,8(r19)
 80076bc:	00bfff04 	movi	r2,-4
 80076c0:	80c00117 	ldw	r3,4(r16)
 80076c4:	1886703a 	and	r3,r3,r2
 80076c8:	003f9706 	br	8007528 <__alt_data_end+0xf8007528>
 80076cc:	5ac00017 	ldw	r11,0(r11)
 80076d0:	213fffc4 	addi	r4,r4,-1
 80076d4:	58805c1e 	bne	r11,r2,8007848 <_malloc_r+0x7bc>
 80076d8:	20c000cc 	andi	r3,r4,3
 80076dc:	58bffe04 	addi	r2,r11,-8
 80076e0:	183ffa1e 	bne	r3,zero,80076cc <__alt_data_end+0xf80076cc>
 80076e4:	98800117 	ldw	r2,4(r19)
 80076e8:	0146303a 	nor	r3,zero,r5
 80076ec:	1884703a 	and	r2,r3,r2
 80076f0:	98800115 	stw	r2,4(r19)
 80076f4:	294b883a 	add	r5,r5,r5
 80076f8:	117f2e36 	bltu	r2,r5,80073b4 <__alt_data_end+0xf80073b4>
 80076fc:	283f2d26 	beq	r5,zero,80073b4 <__alt_data_end+0xf80073b4>
 8007700:	1146703a 	and	r3,r2,r5
 8007704:	6009883a 	mov	r4,r12
 8007708:	183eef1e 	bne	r3,zero,80072c8 <__alt_data_end+0xf80072c8>
 800770c:	294b883a 	add	r5,r5,r5
 8007710:	1146703a 	and	r3,r2,r5
 8007714:	21000104 	addi	r4,r4,4
 8007718:	183ffc26 	beq	r3,zero,800770c <__alt_data_end+0xf800770c>
 800771c:	003eea06 	br	80072c8 <__alt_data_end+0xf80072c8>
 8007720:	00805504 	movi	r2,340
 8007724:	11001336 	bltu	r2,r4,8007774 <_malloc_r+0x6e8>
 8007728:	8808d3fa 	srli	r4,r17,15
 800772c:	21001dc4 	addi	r4,r4,119
 8007730:	210b883a 	add	r5,r4,r4
 8007734:	003e9c06 	br	80071a8 <__alt_data_end+0xf80071a8>
 8007738:	00840004 	movi	r2,4096
 800773c:	003f4d06 	br	8007474 <__alt_data_end+0xf8007474>
 8007740:	00800044 	movi	r2,1
 8007744:	a0800115 	stw	r2,4(r20)
 8007748:	a021883a 	mov	r16,r20
 800774c:	0007883a 	mov	r3,zero
 8007750:	003f7506 	br	8007528 <__alt_data_end+0xf8007528>
 8007754:	280bd0ba 	srai	r5,r5,2
 8007758:	01800044 	movi	r6,1
 800775c:	38800117 	ldw	r2,4(r7)
 8007760:	314c983a 	sll	r6,r6,r5
 8007764:	180b883a 	mov	r5,r3
 8007768:	3084b03a 	or	r2,r6,r2
 800776c:	38800115 	stw	r2,4(r7)
 8007770:	003f9d06 	br	80075e8 <__alt_data_end+0xf80075e8>
 8007774:	00815504 	movi	r2,1364
 8007778:	11001336 	bltu	r2,r4,80077c8 <_malloc_r+0x73c>
 800777c:	8808d4ba 	srli	r4,r17,18
 8007780:	21001f04 	addi	r4,r4,124
 8007784:	210b883a 	add	r5,r4,r4
 8007788:	003e8706 	br	80071a8 <__alt_data_end+0xf80071a8>
 800778c:	bdc00404 	addi	r23,r23,16
 8007790:	003f1d06 	br	8007408 <__alt_data_end+0xf8007408>
 8007794:	01401504 	movi	r5,84
 8007798:	28c01c36 	bltu	r5,r3,800780c <_malloc_r+0x780>
 800779c:	100ad33a 	srli	r5,r2,12
 80077a0:	29401b84 	addi	r5,r5,110
 80077a4:	294d883a 	add	r6,r5,r5
 80077a8:	003f8006 	br	80075ac <__alt_data_end+0xf80075ac>
 80077ac:	e103ffcc 	andi	r4,fp,4095
 80077b0:	203f241e 	bne	r4,zero,8007444 <__alt_data_end+0xf8007444>
 80077b4:	98c00217 	ldw	r3,8(r19)
 80077b8:	bd49883a 	add	r4,r23,r21
 80077bc:	21000054 	ori	r4,r4,1
 80077c0:	19000115 	stw	r4,4(r3)
 80077c4:	003f4a06 	br	80074f0 <__alt_data_end+0xf80074f0>
 80077c8:	01403f04 	movi	r5,252
 80077cc:	01001f84 	movi	r4,126
 80077d0:	003e7506 	br	80071a8 <__alt_data_end+0xf80071a8>
 80077d4:	00c00044 	movi	r3,1
 80077d8:	002f883a 	mov	r23,zero
 80077dc:	003f3006 	br	80074a0 <__alt_data_end+0xf80074a0>
 80077e0:	00820074 	movhi	r2,2049
 80077e4:	108db704 	addi	r2,r2,14044
 80077e8:	15000015 	stw	r20,0(r2)
 80077ec:	003f1b06 	br	800745c <__alt_data_end+0xf800745c>
 80077f0:	9009883a 	mov	r4,r18
 80077f4:	81400204 	addi	r5,r16,8
 80077f8:	80065280 	call	8006528 <_free_r>
 80077fc:	00820074 	movhi	r2,2049
 8007800:	10948d04 	addi	r2,r2,21044
 8007804:	10800017 	ldw	r2,0(r2)
 8007808:	003f3906 	br	80074f0 <__alt_data_end+0xf80074f0>
 800780c:	01405504 	movi	r5,340
 8007810:	28c00436 	bltu	r5,r3,8007824 <_malloc_r+0x798>
 8007814:	100ad3fa 	srli	r5,r2,15
 8007818:	29401dc4 	addi	r5,r5,119
 800781c:	294d883a 	add	r6,r5,r5
 8007820:	003f6206 	br	80075ac <__alt_data_end+0xf80075ac>
 8007824:	01415504 	movi	r5,1364
 8007828:	28c00436 	bltu	r5,r3,800783c <_malloc_r+0x7b0>
 800782c:	100ad4ba 	srli	r5,r2,18
 8007830:	29401f04 	addi	r5,r5,124
 8007834:	294d883a 	add	r6,r5,r5
 8007838:	003f5c06 	br	80075ac <__alt_data_end+0xf80075ac>
 800783c:	01803f04 	movi	r6,252
 8007840:	01401f84 	movi	r5,126
 8007844:	003f5906 	br	80075ac <__alt_data_end+0xf80075ac>
 8007848:	98800117 	ldw	r2,4(r19)
 800784c:	003fa906 	br	80076f4 <__alt_data_end+0xf80076f4>

08007850 <memchr>:
 8007850:	208000cc 	andi	r2,r4,3
 8007854:	2811883a 	mov	r8,r5
 8007858:	10003526 	beq	r2,zero,8007930 <memchr+0xe0>
 800785c:	30bfffc4 	addi	r2,r6,-1
 8007860:	30001b26 	beq	r6,zero,80078d0 <memchr+0x80>
 8007864:	21800003 	ldbu	r6,0(r4)
 8007868:	28c03fcc 	andi	r3,r5,255
 800786c:	30c01a26 	beq	r6,r3,80078d8 <memchr+0x88>
 8007870:	180d883a 	mov	r6,r3
 8007874:	00000406 	br	8007888 <memchr+0x38>
 8007878:	10001526 	beq	r2,zero,80078d0 <memchr+0x80>
 800787c:	20c00003 	ldbu	r3,0(r4)
 8007880:	10bfffc4 	addi	r2,r2,-1
 8007884:	19801426 	beq	r3,r6,80078d8 <memchr+0x88>
 8007888:	21000044 	addi	r4,r4,1
 800788c:	20c000cc 	andi	r3,r4,3
 8007890:	183ff91e 	bne	r3,zero,8007878 <__alt_data_end+0xf8007878>
 8007894:	02c000c4 	movi	r11,3
 8007898:	58801136 	bltu	r11,r2,80078e0 <memchr+0x90>
 800789c:	10000c26 	beq	r2,zero,80078d0 <memchr+0x80>
 80078a0:	20c00003 	ldbu	r3,0(r4)
 80078a4:	29403fcc 	andi	r5,r5,255
 80078a8:	19400b26 	beq	r3,r5,80078d8 <memchr+0x88>
 80078ac:	20c00044 	addi	r3,r4,1
 80078b0:	2085883a 	add	r2,r4,r2
 80078b4:	41803fcc 	andi	r6,r8,255
 80078b8:	00000306 	br	80078c8 <memchr+0x78>
 80078bc:	18c00044 	addi	r3,r3,1
 80078c0:	197fffc3 	ldbu	r5,-1(r3)
 80078c4:	29800426 	beq	r5,r6,80078d8 <memchr+0x88>
 80078c8:	1809883a 	mov	r4,r3
 80078cc:	18bffb1e 	bne	r3,r2,80078bc <__alt_data_end+0xf80078bc>
 80078d0:	0005883a 	mov	r2,zero
 80078d4:	f800283a 	ret
 80078d8:	2005883a 	mov	r2,r4
 80078dc:	f800283a 	ret
 80078e0:	28c03fcc 	andi	r3,r5,255
 80078e4:	180c923a 	slli	r6,r3,8
 80078e8:	02bfbff4 	movhi	r10,65279
 80078ec:	52bfbfc4 	addi	r10,r10,-257
 80078f0:	02602074 	movhi	r9,32897
 80078f4:	4a602004 	addi	r9,r9,-32640
 80078f8:	30c6b03a 	or	r3,r6,r3
 80078fc:	180c943a 	slli	r6,r3,16
 8007900:	30ccb03a 	or	r6,r6,r3
 8007904:	20c00017 	ldw	r3,0(r4)
 8007908:	30c6f03a 	xor	r3,r6,r3
 800790c:	1a8f883a 	add	r7,r3,r10
 8007910:	00c6303a 	nor	r3,zero,r3
 8007914:	38c6703a 	and	r3,r7,r3
 8007918:	1a46703a 	and	r3,r3,r9
 800791c:	183fdf1e 	bne	r3,zero,800789c <__alt_data_end+0xf800789c>
 8007920:	10bfff04 	addi	r2,r2,-4
 8007924:	21000104 	addi	r4,r4,4
 8007928:	58bff636 	bltu	r11,r2,8007904 <__alt_data_end+0xf8007904>
 800792c:	003fdb06 	br	800789c <__alt_data_end+0xf800789c>
 8007930:	3005883a 	mov	r2,r6
 8007934:	003fd706 	br	8007894 <__alt_data_end+0xf8007894>

08007938 <memcpy>:
 8007938:	00c003c4 	movi	r3,15
 800793c:	2005883a 	mov	r2,r4
 8007940:	1980372e 	bgeu	r3,r6,8007a20 <memcpy+0xe8>
 8007944:	2146b03a 	or	r3,r4,r5
 8007948:	18c000cc 	andi	r3,r3,3
 800794c:	1800371e 	bne	r3,zero,8007a2c <memcpy+0xf4>
 8007950:	327ffc04 	addi	r9,r6,-16
 8007954:	4812d13a 	srli	r9,r9,4
 8007958:	2007883a 	mov	r3,r4
 800795c:	280f883a 	mov	r7,r5
 8007960:	4808913a 	slli	r4,r9,4
 8007964:	1109883a 	add	r4,r2,r4
 8007968:	21000404 	addi	r4,r4,16
 800796c:	3a000017 	ldw	r8,0(r7)
 8007970:	18c00404 	addi	r3,r3,16
 8007974:	39c00404 	addi	r7,r7,16
 8007978:	1a3ffc15 	stw	r8,-16(r3)
 800797c:	3a3ffd17 	ldw	r8,-12(r7)
 8007980:	1a3ffd15 	stw	r8,-12(r3)
 8007984:	3a3ffe17 	ldw	r8,-8(r7)
 8007988:	1a3ffe15 	stw	r8,-8(r3)
 800798c:	3a3fff17 	ldw	r8,-4(r7)
 8007990:	1a3fff15 	stw	r8,-4(r3)
 8007994:	193ff51e 	bne	r3,r4,800796c <__alt_data_end+0xf800796c>
 8007998:	49000044 	addi	r4,r9,1
 800799c:	2008913a 	slli	r4,r4,4
 80079a0:	328003cc 	andi	r10,r6,15
 80079a4:	1107883a 	add	r3,r2,r4
 80079a8:	290b883a 	add	r5,r5,r4
 80079ac:	010000c4 	movi	r4,3
 80079b0:	2280212e 	bgeu	r4,r10,8007a38 <memcpy+0x100>
 80079b4:	52bfff04 	addi	r10,r10,-4
 80079b8:	5014d0ba 	srli	r10,r10,2
 80079bc:	180f883a 	mov	r7,r3
 80079c0:	2811883a 	mov	r8,r5
 80079c4:	5289883a 	add	r4,r10,r10
 80079c8:	2109883a 	add	r4,r4,r4
 80079cc:	21000104 	addi	r4,r4,4
 80079d0:	1909883a 	add	r4,r3,r4
 80079d4:	42400017 	ldw	r9,0(r8)
 80079d8:	39c00104 	addi	r7,r7,4
 80079dc:	42000104 	addi	r8,r8,4
 80079e0:	3a7fff15 	stw	r9,-4(r7)
 80079e4:	393ffb1e 	bne	r7,r4,80079d4 <__alt_data_end+0xf80079d4>
 80079e8:	51000044 	addi	r4,r10,1
 80079ec:	2109883a 	add	r4,r4,r4
 80079f0:	2109883a 	add	r4,r4,r4
 80079f4:	318000cc 	andi	r6,r6,3
 80079f8:	1907883a 	add	r3,r3,r4
 80079fc:	290b883a 	add	r5,r5,r4
 8007a00:	30000c26 	beq	r6,zero,8007a34 <memcpy+0xfc>
 8007a04:	298d883a 	add	r6,r5,r6
 8007a08:	29c00003 	ldbu	r7,0(r5)
 8007a0c:	18c00044 	addi	r3,r3,1
 8007a10:	29400044 	addi	r5,r5,1
 8007a14:	19ffffc5 	stb	r7,-1(r3)
 8007a18:	29bffb1e 	bne	r5,r6,8007a08 <__alt_data_end+0xf8007a08>
 8007a1c:	f800283a 	ret
 8007a20:	2007883a 	mov	r3,r4
 8007a24:	303ff71e 	bne	r6,zero,8007a04 <__alt_data_end+0xf8007a04>
 8007a28:	00000206 	br	8007a34 <memcpy+0xfc>
 8007a2c:	2007883a 	mov	r3,r4
 8007a30:	003ff406 	br	8007a04 <__alt_data_end+0xf8007a04>
 8007a34:	f800283a 	ret
 8007a38:	500d883a 	mov	r6,r10
 8007a3c:	303ff11e 	bne	r6,zero,8007a04 <__alt_data_end+0xf8007a04>
 8007a40:	003ffc06 	br	8007a34 <__alt_data_end+0xf8007a34>

08007a44 <memmove>:
 8007a44:	2005883a 	mov	r2,r4
 8007a48:	29000b2e 	bgeu	r5,r4,8007a78 <memmove+0x34>
 8007a4c:	298f883a 	add	r7,r5,r6
 8007a50:	21c0092e 	bgeu	r4,r7,8007a78 <memmove+0x34>
 8007a54:	2187883a 	add	r3,r4,r6
 8007a58:	198bc83a 	sub	r5,r3,r6
 8007a5c:	30003e26 	beq	r6,zero,8007b58 <memmove+0x114>
 8007a60:	39ffffc4 	addi	r7,r7,-1
 8007a64:	39000003 	ldbu	r4,0(r7)
 8007a68:	18ffffc4 	addi	r3,r3,-1
 8007a6c:	19000005 	stb	r4,0(r3)
 8007a70:	197ffb1e 	bne	r3,r5,8007a60 <__alt_data_end+0xf8007a60>
 8007a74:	f800283a 	ret
 8007a78:	00c003c4 	movi	r3,15
 8007a7c:	1980372e 	bgeu	r3,r6,8007b5c <memmove+0x118>
 8007a80:	1146b03a 	or	r3,r2,r5
 8007a84:	18c000cc 	andi	r3,r3,3
 8007a88:	1800371e 	bne	r3,zero,8007b68 <memmove+0x124>
 8007a8c:	327ffc04 	addi	r9,r6,-16
 8007a90:	4812d13a 	srli	r9,r9,4
 8007a94:	280f883a 	mov	r7,r5
 8007a98:	1007883a 	mov	r3,r2
 8007a9c:	4810913a 	slli	r8,r9,4
 8007aa0:	1211883a 	add	r8,r2,r8
 8007aa4:	42000404 	addi	r8,r8,16
 8007aa8:	39000017 	ldw	r4,0(r7)
 8007aac:	18c00404 	addi	r3,r3,16
 8007ab0:	39c00404 	addi	r7,r7,16
 8007ab4:	193ffc15 	stw	r4,-16(r3)
 8007ab8:	393ffd17 	ldw	r4,-12(r7)
 8007abc:	193ffd15 	stw	r4,-12(r3)
 8007ac0:	393ffe17 	ldw	r4,-8(r7)
 8007ac4:	193ffe15 	stw	r4,-8(r3)
 8007ac8:	393fff17 	ldw	r4,-4(r7)
 8007acc:	193fff15 	stw	r4,-4(r3)
 8007ad0:	1a3ff51e 	bne	r3,r8,8007aa8 <__alt_data_end+0xf8007aa8>
 8007ad4:	49000044 	addi	r4,r9,1
 8007ad8:	2008913a 	slli	r4,r4,4
 8007adc:	328003cc 	andi	r10,r6,15
 8007ae0:	1107883a 	add	r3,r2,r4
 8007ae4:	290b883a 	add	r5,r5,r4
 8007ae8:	010000c4 	movi	r4,3
 8007aec:	2280212e 	bgeu	r4,r10,8007b74 <memmove+0x130>
 8007af0:	52bfff04 	addi	r10,r10,-4
 8007af4:	5014d0ba 	srli	r10,r10,2
 8007af8:	180f883a 	mov	r7,r3
 8007afc:	2809883a 	mov	r4,r5
 8007b00:	5291883a 	add	r8,r10,r10
 8007b04:	4211883a 	add	r8,r8,r8
 8007b08:	42400104 	addi	r9,r8,4
 8007b0c:	1a53883a 	add	r9,r3,r9
 8007b10:	22000017 	ldw	r8,0(r4)
 8007b14:	39c00104 	addi	r7,r7,4
 8007b18:	21000104 	addi	r4,r4,4
 8007b1c:	3a3fff15 	stw	r8,-4(r7)
 8007b20:	3a7ffb1e 	bne	r7,r9,8007b10 <__alt_data_end+0xf8007b10>
 8007b24:	51000044 	addi	r4,r10,1
 8007b28:	2109883a 	add	r4,r4,r4
 8007b2c:	2109883a 	add	r4,r4,r4
 8007b30:	318000cc 	andi	r6,r6,3
 8007b34:	1907883a 	add	r3,r3,r4
 8007b38:	290b883a 	add	r5,r5,r4
 8007b3c:	30000c26 	beq	r6,zero,8007b70 <memmove+0x12c>
 8007b40:	198d883a 	add	r6,r3,r6
 8007b44:	29c00003 	ldbu	r7,0(r5)
 8007b48:	18c00044 	addi	r3,r3,1
 8007b4c:	29400044 	addi	r5,r5,1
 8007b50:	19ffffc5 	stb	r7,-1(r3)
 8007b54:	19bffb1e 	bne	r3,r6,8007b44 <__alt_data_end+0xf8007b44>
 8007b58:	f800283a 	ret
 8007b5c:	1007883a 	mov	r3,r2
 8007b60:	303ff71e 	bne	r6,zero,8007b40 <__alt_data_end+0xf8007b40>
 8007b64:	00000206 	br	8007b70 <memmove+0x12c>
 8007b68:	1007883a 	mov	r3,r2
 8007b6c:	003ff406 	br	8007b40 <__alt_data_end+0xf8007b40>
 8007b70:	f800283a 	ret
 8007b74:	500d883a 	mov	r6,r10
 8007b78:	303ff11e 	bne	r6,zero,8007b40 <__alt_data_end+0xf8007b40>
 8007b7c:	003ffc06 	br	8007b70 <__alt_data_end+0xf8007b70>

08007b80 <memset>:
 8007b80:	20c000cc 	andi	r3,r4,3
 8007b84:	2005883a 	mov	r2,r4
 8007b88:	18003f26 	beq	r3,zero,8007c88 <memset+0x108>
 8007b8c:	31ffffc4 	addi	r7,r6,-1
 8007b90:	30003b26 	beq	r6,zero,8007c80 <memset+0x100>
 8007b94:	2813883a 	mov	r9,r5
 8007b98:	200d883a 	mov	r6,r4
 8007b9c:	2007883a 	mov	r3,r4
 8007ba0:	00000406 	br	8007bb4 <memset+0x34>
 8007ba4:	3a3fffc4 	addi	r8,r7,-1
 8007ba8:	31800044 	addi	r6,r6,1
 8007bac:	38003426 	beq	r7,zero,8007c80 <memset+0x100>
 8007bb0:	400f883a 	mov	r7,r8
 8007bb4:	18c00044 	addi	r3,r3,1
 8007bb8:	32400005 	stb	r9,0(r6)
 8007bbc:	1a0000cc 	andi	r8,r3,3
 8007bc0:	403ff81e 	bne	r8,zero,8007ba4 <__alt_data_end+0xf8007ba4>
 8007bc4:	010000c4 	movi	r4,3
 8007bc8:	21c0282e 	bgeu	r4,r7,8007c6c <memset+0xec>
 8007bcc:	29003fcc 	andi	r4,r5,255
 8007bd0:	2010923a 	slli	r8,r4,8
 8007bd4:	4108b03a 	or	r4,r8,r4
 8007bd8:	2010943a 	slli	r8,r4,16
 8007bdc:	4110b03a 	or	r8,r8,r4
 8007be0:	010003c4 	movi	r4,15
 8007be4:	21c0122e 	bgeu	r4,r7,8007c30 <memset+0xb0>
 8007be8:	3a7ffc04 	addi	r9,r7,-16
 8007bec:	4812d13a 	srli	r9,r9,4
 8007bf0:	19000404 	addi	r4,r3,16
 8007bf4:	180d883a 	mov	r6,r3
 8007bf8:	4814913a 	slli	r10,r9,4
 8007bfc:	2289883a 	add	r4,r4,r10
 8007c00:	32000015 	stw	r8,0(r6)
 8007c04:	32000115 	stw	r8,4(r6)
 8007c08:	32000215 	stw	r8,8(r6)
 8007c0c:	32000315 	stw	r8,12(r6)
 8007c10:	31800404 	addi	r6,r6,16
 8007c14:	313ffa1e 	bne	r6,r4,8007c00 <__alt_data_end+0xf8007c00>
 8007c18:	4a400044 	addi	r9,r9,1
 8007c1c:	4812913a 	slli	r9,r9,4
 8007c20:	39c003cc 	andi	r7,r7,15
 8007c24:	010000c4 	movi	r4,3
 8007c28:	1a47883a 	add	r3,r3,r9
 8007c2c:	21c00f2e 	bgeu	r4,r7,8007c6c <memset+0xec>
 8007c30:	3a7fff04 	addi	r9,r7,-4
 8007c34:	4812d0ba 	srli	r9,r9,2
 8007c38:	19000104 	addi	r4,r3,4
 8007c3c:	180d883a 	mov	r6,r3
 8007c40:	4a55883a 	add	r10,r9,r9
 8007c44:	5295883a 	add	r10,r10,r10
 8007c48:	2289883a 	add	r4,r4,r10
 8007c4c:	32000015 	stw	r8,0(r6)
 8007c50:	31800104 	addi	r6,r6,4
 8007c54:	313ffd1e 	bne	r6,r4,8007c4c <__alt_data_end+0xf8007c4c>
 8007c58:	4a400044 	addi	r9,r9,1
 8007c5c:	4a53883a 	add	r9,r9,r9
 8007c60:	4a53883a 	add	r9,r9,r9
 8007c64:	1a47883a 	add	r3,r3,r9
 8007c68:	39c000cc 	andi	r7,r7,3
 8007c6c:	38000526 	beq	r7,zero,8007c84 <memset+0x104>
 8007c70:	19cf883a 	add	r7,r3,r7
 8007c74:	19400005 	stb	r5,0(r3)
 8007c78:	18c00044 	addi	r3,r3,1
 8007c7c:	19fffd1e 	bne	r3,r7,8007c74 <__alt_data_end+0xf8007c74>
 8007c80:	f800283a 	ret
 8007c84:	f800283a 	ret
 8007c88:	2007883a 	mov	r3,r4
 8007c8c:	300f883a 	mov	r7,r6
 8007c90:	003fcc06 	br	8007bc4 <__alt_data_end+0xf8007bc4>

08007c94 <_Balloc>:
 8007c94:	20801317 	ldw	r2,76(r4)
 8007c98:	defffc04 	addi	sp,sp,-16
 8007c9c:	dc400115 	stw	r17,4(sp)
 8007ca0:	dc000015 	stw	r16,0(sp)
 8007ca4:	dfc00315 	stw	ra,12(sp)
 8007ca8:	dc800215 	stw	r18,8(sp)
 8007cac:	2023883a 	mov	r17,r4
 8007cb0:	2821883a 	mov	r16,r5
 8007cb4:	10000f26 	beq	r2,zero,8007cf4 <_Balloc+0x60>
 8007cb8:	8407883a 	add	r3,r16,r16
 8007cbc:	18c7883a 	add	r3,r3,r3
 8007cc0:	10c7883a 	add	r3,r2,r3
 8007cc4:	18800017 	ldw	r2,0(r3)
 8007cc8:	10001126 	beq	r2,zero,8007d10 <_Balloc+0x7c>
 8007ccc:	11000017 	ldw	r4,0(r2)
 8007cd0:	19000015 	stw	r4,0(r3)
 8007cd4:	10000415 	stw	zero,16(r2)
 8007cd8:	10000315 	stw	zero,12(r2)
 8007cdc:	dfc00317 	ldw	ra,12(sp)
 8007ce0:	dc800217 	ldw	r18,8(sp)
 8007ce4:	dc400117 	ldw	r17,4(sp)
 8007ce8:	dc000017 	ldw	r16,0(sp)
 8007cec:	dec00404 	addi	sp,sp,16
 8007cf0:	f800283a 	ret
 8007cf4:	01400104 	movi	r5,4
 8007cf8:	01800844 	movi	r6,33
 8007cfc:	800ab1c0 	call	800ab1c <_calloc_r>
 8007d00:	88801315 	stw	r2,76(r17)
 8007d04:	103fec1e 	bne	r2,zero,8007cb8 <__alt_data_end+0xf8007cb8>
 8007d08:	0005883a 	mov	r2,zero
 8007d0c:	003ff306 	br	8007cdc <__alt_data_end+0xf8007cdc>
 8007d10:	01400044 	movi	r5,1
 8007d14:	2c24983a 	sll	r18,r5,r16
 8007d18:	8809883a 	mov	r4,r17
 8007d1c:	91800144 	addi	r6,r18,5
 8007d20:	318d883a 	add	r6,r6,r6
 8007d24:	318d883a 	add	r6,r6,r6
 8007d28:	800ab1c0 	call	800ab1c <_calloc_r>
 8007d2c:	103ff626 	beq	r2,zero,8007d08 <__alt_data_end+0xf8007d08>
 8007d30:	14000115 	stw	r16,4(r2)
 8007d34:	14800215 	stw	r18,8(r2)
 8007d38:	003fe606 	br	8007cd4 <__alt_data_end+0xf8007cd4>

08007d3c <_Bfree>:
 8007d3c:	28000826 	beq	r5,zero,8007d60 <_Bfree+0x24>
 8007d40:	28c00117 	ldw	r3,4(r5)
 8007d44:	20801317 	ldw	r2,76(r4)
 8007d48:	18c7883a 	add	r3,r3,r3
 8007d4c:	18c7883a 	add	r3,r3,r3
 8007d50:	10c5883a 	add	r2,r2,r3
 8007d54:	10c00017 	ldw	r3,0(r2)
 8007d58:	28c00015 	stw	r3,0(r5)
 8007d5c:	11400015 	stw	r5,0(r2)
 8007d60:	f800283a 	ret

08007d64 <__multadd>:
 8007d64:	defff604 	addi	sp,sp,-40
 8007d68:	dd400515 	stw	r21,20(sp)
 8007d6c:	2d400417 	ldw	r21,16(r5)
 8007d70:	df000815 	stw	fp,32(sp)
 8007d74:	ddc00715 	stw	r23,28(sp)
 8007d78:	dd800615 	stw	r22,24(sp)
 8007d7c:	dd000415 	stw	r20,16(sp)
 8007d80:	dc400115 	stw	r17,4(sp)
 8007d84:	dc000015 	stw	r16,0(sp)
 8007d88:	dfc00915 	stw	ra,36(sp)
 8007d8c:	dcc00315 	stw	r19,12(sp)
 8007d90:	dc800215 	stw	r18,8(sp)
 8007d94:	282d883a 	mov	r22,r5
 8007d98:	202f883a 	mov	r23,r4
 8007d9c:	3029883a 	mov	r20,r6
 8007da0:	3839883a 	mov	fp,r7
 8007da4:	2c000504 	addi	r16,r5,20
 8007da8:	0023883a 	mov	r17,zero
 8007dac:	84c00017 	ldw	r19,0(r16)
 8007db0:	a00b883a 	mov	r5,r20
 8007db4:	8c400044 	addi	r17,r17,1
 8007db8:	993fffcc 	andi	r4,r19,65535
 8007dbc:	800c2080 	call	800c208 <__mulsi3>
 8007dc0:	1725883a 	add	r18,r2,fp
 8007dc4:	9808d43a 	srli	r4,r19,16
 8007dc8:	9026d43a 	srli	r19,r18,16
 8007dcc:	a00b883a 	mov	r5,r20
 8007dd0:	800c2080 	call	800c208 <__mulsi3>
 8007dd4:	988f883a 	add	r7,r19,r2
 8007dd8:	3804943a 	slli	r2,r7,16
 8007ddc:	94bfffcc 	andi	r18,r18,65535
 8007de0:	3838d43a 	srli	fp,r7,16
 8007de4:	14a5883a 	add	r18,r2,r18
 8007de8:	84800015 	stw	r18,0(r16)
 8007dec:	84000104 	addi	r16,r16,4
 8007df0:	8d7fee16 	blt	r17,r21,8007dac <__alt_data_end+0xf8007dac>
 8007df4:	e0000926 	beq	fp,zero,8007e1c <__multadd+0xb8>
 8007df8:	b0800217 	ldw	r2,8(r22)
 8007dfc:	a880140e 	bge	r21,r2,8007e50 <__multadd+0xec>
 8007e00:	a8800144 	addi	r2,r21,5
 8007e04:	1085883a 	add	r2,r2,r2
 8007e08:	1085883a 	add	r2,r2,r2
 8007e0c:	b085883a 	add	r2,r22,r2
 8007e10:	17000015 	stw	fp,0(r2)
 8007e14:	ad400044 	addi	r21,r21,1
 8007e18:	b5400415 	stw	r21,16(r22)
 8007e1c:	b005883a 	mov	r2,r22
 8007e20:	dfc00917 	ldw	ra,36(sp)
 8007e24:	df000817 	ldw	fp,32(sp)
 8007e28:	ddc00717 	ldw	r23,28(sp)
 8007e2c:	dd800617 	ldw	r22,24(sp)
 8007e30:	dd400517 	ldw	r21,20(sp)
 8007e34:	dd000417 	ldw	r20,16(sp)
 8007e38:	dcc00317 	ldw	r19,12(sp)
 8007e3c:	dc800217 	ldw	r18,8(sp)
 8007e40:	dc400117 	ldw	r17,4(sp)
 8007e44:	dc000017 	ldw	r16,0(sp)
 8007e48:	dec00a04 	addi	sp,sp,40
 8007e4c:	f800283a 	ret
 8007e50:	b1400117 	ldw	r5,4(r22)
 8007e54:	b809883a 	mov	r4,r23
 8007e58:	29400044 	addi	r5,r5,1
 8007e5c:	8007c940 	call	8007c94 <_Balloc>
 8007e60:	b1800417 	ldw	r6,16(r22)
 8007e64:	b1400304 	addi	r5,r22,12
 8007e68:	11000304 	addi	r4,r2,12
 8007e6c:	31800084 	addi	r6,r6,2
 8007e70:	318d883a 	add	r6,r6,r6
 8007e74:	318d883a 	add	r6,r6,r6
 8007e78:	1021883a 	mov	r16,r2
 8007e7c:	80079380 	call	8007938 <memcpy>
 8007e80:	b0c00117 	ldw	r3,4(r22)
 8007e84:	b8801317 	ldw	r2,76(r23)
 8007e88:	18c7883a 	add	r3,r3,r3
 8007e8c:	18c7883a 	add	r3,r3,r3
 8007e90:	10c5883a 	add	r2,r2,r3
 8007e94:	10c00017 	ldw	r3,0(r2)
 8007e98:	b0c00015 	stw	r3,0(r22)
 8007e9c:	15800015 	stw	r22,0(r2)
 8007ea0:	802d883a 	mov	r22,r16
 8007ea4:	003fd606 	br	8007e00 <__alt_data_end+0xf8007e00>

08007ea8 <__s2b>:
 8007ea8:	defff904 	addi	sp,sp,-28
 8007eac:	dd000415 	stw	r20,16(sp)
 8007eb0:	dc400115 	stw	r17,4(sp)
 8007eb4:	2829883a 	mov	r20,r5
 8007eb8:	2023883a 	mov	r17,r4
 8007ebc:	01400244 	movi	r5,9
 8007ec0:	39000204 	addi	r4,r7,8
 8007ec4:	dcc00315 	stw	r19,12(sp)
 8007ec8:	dc800215 	stw	r18,8(sp)
 8007ecc:	dfc00615 	stw	ra,24(sp)
 8007ed0:	dd400515 	stw	r21,20(sp)
 8007ed4:	dc000015 	stw	r16,0(sp)
 8007ed8:	3827883a 	mov	r19,r7
 8007edc:	3025883a 	mov	r18,r6
 8007ee0:	800c1640 	call	800c164 <__divsi3>
 8007ee4:	00c00044 	movi	r3,1
 8007ee8:	000b883a 	mov	r5,zero
 8007eec:	1880030e 	bge	r3,r2,8007efc <__s2b+0x54>
 8007ef0:	18c7883a 	add	r3,r3,r3
 8007ef4:	29400044 	addi	r5,r5,1
 8007ef8:	18bffd16 	blt	r3,r2,8007ef0 <__alt_data_end+0xf8007ef0>
 8007efc:	8809883a 	mov	r4,r17
 8007f00:	8007c940 	call	8007c94 <_Balloc>
 8007f04:	d8c00717 	ldw	r3,28(sp)
 8007f08:	10c00515 	stw	r3,20(r2)
 8007f0c:	00c00044 	movi	r3,1
 8007f10:	10c00415 	stw	r3,16(r2)
 8007f14:	00c00244 	movi	r3,9
 8007f18:	1c80210e 	bge	r3,r18,8007fa0 <__s2b+0xf8>
 8007f1c:	a0eb883a 	add	r21,r20,r3
 8007f20:	a821883a 	mov	r16,r21
 8007f24:	a4a9883a 	add	r20,r20,r18
 8007f28:	81c00007 	ldb	r7,0(r16)
 8007f2c:	8809883a 	mov	r4,r17
 8007f30:	84000044 	addi	r16,r16,1
 8007f34:	100b883a 	mov	r5,r2
 8007f38:	01800284 	movi	r6,10
 8007f3c:	39fff404 	addi	r7,r7,-48
 8007f40:	8007d640 	call	8007d64 <__multadd>
 8007f44:	853ff81e 	bne	r16,r20,8007f28 <__alt_data_end+0xf8007f28>
 8007f48:	aca1883a 	add	r16,r21,r18
 8007f4c:	843ffe04 	addi	r16,r16,-8
 8007f50:	94c00a0e 	bge	r18,r19,8007f7c <__s2b+0xd4>
 8007f54:	84e7883a 	add	r19,r16,r19
 8007f58:	9ca5c83a 	sub	r18,r19,r18
 8007f5c:	81c00007 	ldb	r7,0(r16)
 8007f60:	8809883a 	mov	r4,r17
 8007f64:	84000044 	addi	r16,r16,1
 8007f68:	100b883a 	mov	r5,r2
 8007f6c:	01800284 	movi	r6,10
 8007f70:	39fff404 	addi	r7,r7,-48
 8007f74:	8007d640 	call	8007d64 <__multadd>
 8007f78:	84bff81e 	bne	r16,r18,8007f5c <__alt_data_end+0xf8007f5c>
 8007f7c:	dfc00617 	ldw	ra,24(sp)
 8007f80:	dd400517 	ldw	r21,20(sp)
 8007f84:	dd000417 	ldw	r20,16(sp)
 8007f88:	dcc00317 	ldw	r19,12(sp)
 8007f8c:	dc800217 	ldw	r18,8(sp)
 8007f90:	dc400117 	ldw	r17,4(sp)
 8007f94:	dc000017 	ldw	r16,0(sp)
 8007f98:	dec00704 	addi	sp,sp,28
 8007f9c:	f800283a 	ret
 8007fa0:	a4000284 	addi	r16,r20,10
 8007fa4:	1825883a 	mov	r18,r3
 8007fa8:	003fe906 	br	8007f50 <__alt_data_end+0xf8007f50>

08007fac <__hi0bits>:
 8007fac:	20bfffec 	andhi	r2,r4,65535
 8007fb0:	1000141e 	bne	r2,zero,8008004 <__hi0bits+0x58>
 8007fb4:	2008943a 	slli	r4,r4,16
 8007fb8:	00800404 	movi	r2,16
 8007fbc:	20ffc02c 	andhi	r3,r4,65280
 8007fc0:	1800021e 	bne	r3,zero,8007fcc <__hi0bits+0x20>
 8007fc4:	2008923a 	slli	r4,r4,8
 8007fc8:	10800204 	addi	r2,r2,8
 8007fcc:	20fc002c 	andhi	r3,r4,61440
 8007fd0:	1800021e 	bne	r3,zero,8007fdc <__hi0bits+0x30>
 8007fd4:	2008913a 	slli	r4,r4,4
 8007fd8:	10800104 	addi	r2,r2,4
 8007fdc:	20f0002c 	andhi	r3,r4,49152
 8007fe0:	1800031e 	bne	r3,zero,8007ff0 <__hi0bits+0x44>
 8007fe4:	2109883a 	add	r4,r4,r4
 8007fe8:	10800084 	addi	r2,r2,2
 8007fec:	2109883a 	add	r4,r4,r4
 8007ff0:	20000316 	blt	r4,zero,8008000 <__hi0bits+0x54>
 8007ff4:	2110002c 	andhi	r4,r4,16384
 8007ff8:	2000041e 	bne	r4,zero,800800c <__hi0bits+0x60>
 8007ffc:	00800804 	movi	r2,32
 8008000:	f800283a 	ret
 8008004:	0005883a 	mov	r2,zero
 8008008:	003fec06 	br	8007fbc <__alt_data_end+0xf8007fbc>
 800800c:	10800044 	addi	r2,r2,1
 8008010:	f800283a 	ret

08008014 <__lo0bits>:
 8008014:	20c00017 	ldw	r3,0(r4)
 8008018:	188001cc 	andi	r2,r3,7
 800801c:	10000826 	beq	r2,zero,8008040 <__lo0bits+0x2c>
 8008020:	1880004c 	andi	r2,r3,1
 8008024:	1000211e 	bne	r2,zero,80080ac <__lo0bits+0x98>
 8008028:	1880008c 	andi	r2,r3,2
 800802c:	1000211e 	bne	r2,zero,80080b4 <__lo0bits+0xa0>
 8008030:	1806d0ba 	srli	r3,r3,2
 8008034:	00800084 	movi	r2,2
 8008038:	20c00015 	stw	r3,0(r4)
 800803c:	f800283a 	ret
 8008040:	18bfffcc 	andi	r2,r3,65535
 8008044:	10001326 	beq	r2,zero,8008094 <__lo0bits+0x80>
 8008048:	0005883a 	mov	r2,zero
 800804c:	19403fcc 	andi	r5,r3,255
 8008050:	2800021e 	bne	r5,zero,800805c <__lo0bits+0x48>
 8008054:	1806d23a 	srli	r3,r3,8
 8008058:	10800204 	addi	r2,r2,8
 800805c:	194003cc 	andi	r5,r3,15
 8008060:	2800021e 	bne	r5,zero,800806c <__lo0bits+0x58>
 8008064:	1806d13a 	srli	r3,r3,4
 8008068:	10800104 	addi	r2,r2,4
 800806c:	194000cc 	andi	r5,r3,3
 8008070:	2800021e 	bne	r5,zero,800807c <__lo0bits+0x68>
 8008074:	1806d0ba 	srli	r3,r3,2
 8008078:	10800084 	addi	r2,r2,2
 800807c:	1940004c 	andi	r5,r3,1
 8008080:	2800081e 	bne	r5,zero,80080a4 <__lo0bits+0x90>
 8008084:	1806d07a 	srli	r3,r3,1
 8008088:	1800051e 	bne	r3,zero,80080a0 <__lo0bits+0x8c>
 800808c:	00800804 	movi	r2,32
 8008090:	f800283a 	ret
 8008094:	1806d43a 	srli	r3,r3,16
 8008098:	00800404 	movi	r2,16
 800809c:	003feb06 	br	800804c <__alt_data_end+0xf800804c>
 80080a0:	10800044 	addi	r2,r2,1
 80080a4:	20c00015 	stw	r3,0(r4)
 80080a8:	f800283a 	ret
 80080ac:	0005883a 	mov	r2,zero
 80080b0:	f800283a 	ret
 80080b4:	1806d07a 	srli	r3,r3,1
 80080b8:	00800044 	movi	r2,1
 80080bc:	20c00015 	stw	r3,0(r4)
 80080c0:	f800283a 	ret

080080c4 <__i2b>:
 80080c4:	defffd04 	addi	sp,sp,-12
 80080c8:	dc000015 	stw	r16,0(sp)
 80080cc:	04000044 	movi	r16,1
 80080d0:	dc400115 	stw	r17,4(sp)
 80080d4:	2823883a 	mov	r17,r5
 80080d8:	800b883a 	mov	r5,r16
 80080dc:	dfc00215 	stw	ra,8(sp)
 80080e0:	8007c940 	call	8007c94 <_Balloc>
 80080e4:	14400515 	stw	r17,20(r2)
 80080e8:	14000415 	stw	r16,16(r2)
 80080ec:	dfc00217 	ldw	ra,8(sp)
 80080f0:	dc400117 	ldw	r17,4(sp)
 80080f4:	dc000017 	ldw	r16,0(sp)
 80080f8:	dec00304 	addi	sp,sp,12
 80080fc:	f800283a 	ret

08008100 <__multiply>:
 8008100:	defff004 	addi	sp,sp,-64
 8008104:	dc400715 	stw	r17,28(sp)
 8008108:	dc000615 	stw	r16,24(sp)
 800810c:	34400417 	ldw	r17,16(r6)
 8008110:	2c000417 	ldw	r16,16(r5)
 8008114:	df000e15 	stw	fp,56(sp)
 8008118:	dd000a15 	stw	r20,40(sp)
 800811c:	dfc00f15 	stw	ra,60(sp)
 8008120:	ddc00d15 	stw	r23,52(sp)
 8008124:	dd800c15 	stw	r22,48(sp)
 8008128:	dd400b15 	stw	r21,44(sp)
 800812c:	dcc00915 	stw	r19,36(sp)
 8008130:	dc800815 	stw	r18,32(sp)
 8008134:	2839883a 	mov	fp,r5
 8008138:	3029883a 	mov	r20,r6
 800813c:	8440050e 	bge	r16,r17,8008154 <__multiply+0x54>
 8008140:	8007883a 	mov	r3,r16
 8008144:	3039883a 	mov	fp,r6
 8008148:	8821883a 	mov	r16,r17
 800814c:	2829883a 	mov	r20,r5
 8008150:	1823883a 	mov	r17,r3
 8008154:	e0800217 	ldw	r2,8(fp)
 8008158:	8447883a 	add	r3,r16,r17
 800815c:	d8c00115 	stw	r3,4(sp)
 8008160:	e1400117 	ldw	r5,4(fp)
 8008164:	10c0010e 	bge	r2,r3,800816c <__multiply+0x6c>
 8008168:	29400044 	addi	r5,r5,1
 800816c:	8007c940 	call	8007c94 <_Balloc>
 8008170:	d8c00117 	ldw	r3,4(sp)
 8008174:	d8800515 	stw	r2,20(sp)
 8008178:	18ef883a 	add	r23,r3,r3
 800817c:	bdef883a 	add	r23,r23,r23
 8008180:	10c00504 	addi	r3,r2,20
 8008184:	1def883a 	add	r23,r3,r23
 8008188:	d8c00015 	stw	r3,0(sp)
 800818c:	ddc00215 	stw	r23,8(sp)
 8008190:	1805883a 	mov	r2,r3
 8008194:	1dc0042e 	bgeu	r3,r23,80081a8 <__multiply+0xa8>
 8008198:	d8c00217 	ldw	r3,8(sp)
 800819c:	10000015 	stw	zero,0(r2)
 80081a0:	10800104 	addi	r2,r2,4
 80081a4:	10fffc36 	bltu	r2,r3,8008198 <__alt_data_end+0xf8008198>
 80081a8:	8c63883a 	add	r17,r17,r17
 80081ac:	a5000504 	addi	r20,r20,20
 80081b0:	8c63883a 	add	r17,r17,r17
 80081b4:	e7000504 	addi	fp,fp,20
 80081b8:	8421883a 	add	r16,r16,r16
 80081bc:	a463883a 	add	r17,r20,r17
 80081c0:	8421883a 	add	r16,r16,r16
 80081c4:	df000315 	stw	fp,12(sp)
 80081c8:	dc400415 	stw	r17,16(sp)
 80081cc:	e425883a 	add	r18,fp,r16
 80081d0:	a440482e 	bgeu	r20,r17,80082f4 <__multiply+0x1f4>
 80081d4:	a4000017 	ldw	r16,0(r20)
 80081d8:	847fffcc 	andi	r17,r16,65535
 80081dc:	88001d26 	beq	r17,zero,8008254 <__multiply+0x154>
 80081e0:	dc000017 	ldw	r16,0(sp)
 80081e4:	dcc00317 	ldw	r19,12(sp)
 80081e8:	002b883a 	mov	r21,zero
 80081ec:	9dc00017 	ldw	r23,0(r19)
 80081f0:	85800017 	ldw	r22,0(r16)
 80081f4:	880b883a 	mov	r5,r17
 80081f8:	b93fffcc 	andi	r4,r23,65535
 80081fc:	800c2080 	call	800c208 <__mulsi3>
 8008200:	b808d43a 	srli	r4,r23,16
 8008204:	b0ffffcc 	andi	r3,r22,65535
 8008208:	1885883a 	add	r2,r3,r2
 800820c:	880b883a 	mov	r5,r17
 8008210:	156b883a 	add	r21,r2,r21
 8008214:	b02cd43a 	srli	r22,r22,16
 8008218:	800c2080 	call	800c208 <__mulsi3>
 800821c:	a808d43a 	srli	r4,r21,16
 8008220:	b085883a 	add	r2,r22,r2
 8008224:	a8ffffcc 	andi	r3,r21,65535
 8008228:	110d883a 	add	r6,r2,r4
 800822c:	3004943a 	slli	r2,r6,16
 8008230:	9cc00104 	addi	r19,r19,4
 8008234:	8009883a 	mov	r4,r16
 8008238:	10c6b03a 	or	r3,r2,r3
 800823c:	80c00015 	stw	r3,0(r16)
 8008240:	302ad43a 	srli	r21,r6,16
 8008244:	84000104 	addi	r16,r16,4
 8008248:	9cbfe836 	bltu	r19,r18,80081ec <__alt_data_end+0xf80081ec>
 800824c:	25400115 	stw	r21,4(r4)
 8008250:	a4000017 	ldw	r16,0(r20)
 8008254:	8020d43a 	srli	r16,r16,16
 8008258:	80002026 	beq	r16,zero,80082dc <__multiply+0x1dc>
 800825c:	d8c00017 	ldw	r3,0(sp)
 8008260:	dd400317 	ldw	r21,12(sp)
 8008264:	002f883a 	mov	r23,zero
 8008268:	1f000017 	ldw	fp,0(r3)
 800826c:	182d883a 	mov	r22,r3
 8008270:	e023883a 	mov	r17,fp
 8008274:	a900000b 	ldhu	r4,0(r21)
 8008278:	8822d43a 	srli	r17,r17,16
 800827c:	800b883a 	mov	r5,r16
 8008280:	800c2080 	call	800c208 <__mulsi3>
 8008284:	1445883a 	add	r2,r2,r17
 8008288:	15ef883a 	add	r23,r2,r23
 800828c:	b804943a 	slli	r2,r23,16
 8008290:	e1ffffcc 	andi	r7,fp,65535
 8008294:	ad400104 	addi	r21,r21,4
 8008298:	11ceb03a 	or	r7,r2,r7
 800829c:	b1c00015 	stw	r7,0(r22)
 80082a0:	a93fff17 	ldw	r4,-4(r21)
 80082a4:	b7000117 	ldw	fp,4(r22)
 80082a8:	800b883a 	mov	r5,r16
 80082ac:	2008d43a 	srli	r4,r4,16
 80082b0:	e023883a 	mov	r17,fp
 80082b4:	b027883a 	mov	r19,r22
 80082b8:	800c2080 	call	800c208 <__mulsi3>
 80082bc:	b812d43a 	srli	r9,r23,16
 80082c0:	e23fffcc 	andi	r8,fp,65535
 80082c4:	1205883a 	add	r2,r2,r8
 80082c8:	1279883a 	add	fp,r2,r9
 80082cc:	b5800104 	addi	r22,r22,4
 80082d0:	e02ed43a 	srli	r23,fp,16
 80082d4:	acbfe736 	bltu	r21,r18,8008274 <__alt_data_end+0xf8008274>
 80082d8:	9f000115 	stw	fp,4(r19)
 80082dc:	d8c00017 	ldw	r3,0(sp)
 80082e0:	a5000104 	addi	r20,r20,4
 80082e4:	18c00104 	addi	r3,r3,4
 80082e8:	d8c00015 	stw	r3,0(sp)
 80082ec:	d8c00417 	ldw	r3,16(sp)
 80082f0:	a0ffb836 	bltu	r20,r3,80081d4 <__alt_data_end+0xf80081d4>
 80082f4:	d8c00117 	ldw	r3,4(sp)
 80082f8:	00c00c0e 	bge	zero,r3,800832c <__multiply+0x22c>
 80082fc:	d8c00217 	ldw	r3,8(sp)
 8008300:	18bfff17 	ldw	r2,-4(r3)
 8008304:	1dffff04 	addi	r23,r3,-4
 8008308:	10000326 	beq	r2,zero,8008318 <__multiply+0x218>
 800830c:	00000706 	br	800832c <__multiply+0x22c>
 8008310:	b8800017 	ldw	r2,0(r23)
 8008314:	1000051e 	bne	r2,zero,800832c <__multiply+0x22c>
 8008318:	d8c00117 	ldw	r3,4(sp)
 800831c:	bdffff04 	addi	r23,r23,-4
 8008320:	18ffffc4 	addi	r3,r3,-1
 8008324:	d8c00115 	stw	r3,4(sp)
 8008328:	183ff91e 	bne	r3,zero,8008310 <__alt_data_end+0xf8008310>
 800832c:	d8c00517 	ldw	r3,20(sp)
 8008330:	d9000117 	ldw	r4,4(sp)
 8008334:	1805883a 	mov	r2,r3
 8008338:	19000415 	stw	r4,16(r3)
 800833c:	dfc00f17 	ldw	ra,60(sp)
 8008340:	df000e17 	ldw	fp,56(sp)
 8008344:	ddc00d17 	ldw	r23,52(sp)
 8008348:	dd800c17 	ldw	r22,48(sp)
 800834c:	dd400b17 	ldw	r21,44(sp)
 8008350:	dd000a17 	ldw	r20,40(sp)
 8008354:	dcc00917 	ldw	r19,36(sp)
 8008358:	dc800817 	ldw	r18,32(sp)
 800835c:	dc400717 	ldw	r17,28(sp)
 8008360:	dc000617 	ldw	r16,24(sp)
 8008364:	dec01004 	addi	sp,sp,64
 8008368:	f800283a 	ret

0800836c <__pow5mult>:
 800836c:	defffa04 	addi	sp,sp,-24
 8008370:	dcc00315 	stw	r19,12(sp)
 8008374:	dc800215 	stw	r18,8(sp)
 8008378:	dc000015 	stw	r16,0(sp)
 800837c:	dfc00515 	stw	ra,20(sp)
 8008380:	dd000415 	stw	r20,16(sp)
 8008384:	dc400115 	stw	r17,4(sp)
 8008388:	308000cc 	andi	r2,r6,3
 800838c:	3021883a 	mov	r16,r6
 8008390:	2027883a 	mov	r19,r4
 8008394:	2825883a 	mov	r18,r5
 8008398:	1000301e 	bne	r2,zero,800845c <__pow5mult+0xf0>
 800839c:	8021d0ba 	srai	r16,r16,2
 80083a0:	80001b26 	beq	r16,zero,8008410 <__pow5mult+0xa4>
 80083a4:	9c401217 	ldw	r17,72(r19)
 80083a8:	88003726 	beq	r17,zero,8008488 <__pow5mult+0x11c>
 80083ac:	80c0004c 	andi	r3,r16,1
 80083b0:	1800071e 	bne	r3,zero,80083d0 <__pow5mult+0x64>
 80083b4:	8021d07a 	srai	r16,r16,1
 80083b8:	80001526 	beq	r16,zero,8008410 <__pow5mult+0xa4>
 80083bc:	88800017 	ldw	r2,0(r17)
 80083c0:	10001c26 	beq	r2,zero,8008434 <__pow5mult+0xc8>
 80083c4:	1023883a 	mov	r17,r2
 80083c8:	80c0004c 	andi	r3,r16,1
 80083cc:	183ff926 	beq	r3,zero,80083b4 <__alt_data_end+0xf80083b4>
 80083d0:	900b883a 	mov	r5,r18
 80083d4:	880d883a 	mov	r6,r17
 80083d8:	9809883a 	mov	r4,r19
 80083dc:	80081000 	call	8008100 <__multiply>
 80083e0:	90001c26 	beq	r18,zero,8008454 <__pow5mult+0xe8>
 80083e4:	91000117 	ldw	r4,4(r18)
 80083e8:	98c01317 	ldw	r3,76(r19)
 80083ec:	8021d07a 	srai	r16,r16,1
 80083f0:	2109883a 	add	r4,r4,r4
 80083f4:	2109883a 	add	r4,r4,r4
 80083f8:	1907883a 	add	r3,r3,r4
 80083fc:	19000017 	ldw	r4,0(r3)
 8008400:	91000015 	stw	r4,0(r18)
 8008404:	1c800015 	stw	r18,0(r3)
 8008408:	1025883a 	mov	r18,r2
 800840c:	803feb1e 	bne	r16,zero,80083bc <__alt_data_end+0xf80083bc>
 8008410:	9005883a 	mov	r2,r18
 8008414:	dfc00517 	ldw	ra,20(sp)
 8008418:	dd000417 	ldw	r20,16(sp)
 800841c:	dcc00317 	ldw	r19,12(sp)
 8008420:	dc800217 	ldw	r18,8(sp)
 8008424:	dc400117 	ldw	r17,4(sp)
 8008428:	dc000017 	ldw	r16,0(sp)
 800842c:	dec00604 	addi	sp,sp,24
 8008430:	f800283a 	ret
 8008434:	880b883a 	mov	r5,r17
 8008438:	880d883a 	mov	r6,r17
 800843c:	9809883a 	mov	r4,r19
 8008440:	80081000 	call	8008100 <__multiply>
 8008444:	88800015 	stw	r2,0(r17)
 8008448:	10000015 	stw	zero,0(r2)
 800844c:	1023883a 	mov	r17,r2
 8008450:	003fdd06 	br	80083c8 <__alt_data_end+0xf80083c8>
 8008454:	1025883a 	mov	r18,r2
 8008458:	003fd606 	br	80083b4 <__alt_data_end+0xf80083b4>
 800845c:	10bfffc4 	addi	r2,r2,-1
 8008460:	1085883a 	add	r2,r2,r2
 8008464:	00c20074 	movhi	r3,2049
 8008468:	18c66d04 	addi	r3,r3,6580
 800846c:	1085883a 	add	r2,r2,r2
 8008470:	1885883a 	add	r2,r3,r2
 8008474:	11800017 	ldw	r6,0(r2)
 8008478:	000f883a 	mov	r7,zero
 800847c:	8007d640 	call	8007d64 <__multadd>
 8008480:	1025883a 	mov	r18,r2
 8008484:	003fc506 	br	800839c <__alt_data_end+0xf800839c>
 8008488:	05000044 	movi	r20,1
 800848c:	9809883a 	mov	r4,r19
 8008490:	a00b883a 	mov	r5,r20
 8008494:	8007c940 	call	8007c94 <_Balloc>
 8008498:	1023883a 	mov	r17,r2
 800849c:	00809c44 	movi	r2,625
 80084a0:	88800515 	stw	r2,20(r17)
 80084a4:	8d000415 	stw	r20,16(r17)
 80084a8:	9c401215 	stw	r17,72(r19)
 80084ac:	88000015 	stw	zero,0(r17)
 80084b0:	003fbe06 	br	80083ac <__alt_data_end+0xf80083ac>

080084b4 <__lshift>:
 80084b4:	defff904 	addi	sp,sp,-28
 80084b8:	dd000415 	stw	r20,16(sp)
 80084bc:	dc400115 	stw	r17,4(sp)
 80084c0:	2d000417 	ldw	r20,16(r5)
 80084c4:	3023d17a 	srai	r17,r6,5
 80084c8:	28800217 	ldw	r2,8(r5)
 80084cc:	dd400515 	stw	r21,20(sp)
 80084d0:	8d29883a 	add	r20,r17,r20
 80084d4:	dcc00315 	stw	r19,12(sp)
 80084d8:	dc800215 	stw	r18,8(sp)
 80084dc:	dc000015 	stw	r16,0(sp)
 80084e0:	dfc00615 	stw	ra,24(sp)
 80084e4:	a4000044 	addi	r16,r20,1
 80084e8:	2825883a 	mov	r18,r5
 80084ec:	302b883a 	mov	r21,r6
 80084f0:	2027883a 	mov	r19,r4
 80084f4:	29400117 	ldw	r5,4(r5)
 80084f8:	1400030e 	bge	r2,r16,8008508 <__lshift+0x54>
 80084fc:	1085883a 	add	r2,r2,r2
 8008500:	29400044 	addi	r5,r5,1
 8008504:	143ffd16 	blt	r2,r16,80084fc <__alt_data_end+0xf80084fc>
 8008508:	9809883a 	mov	r4,r19
 800850c:	8007c940 	call	8007c94 <_Balloc>
 8008510:	11000504 	addi	r4,r2,20
 8008514:	0440090e 	bge	zero,r17,800853c <__lshift+0x88>
 8008518:	200f883a 	mov	r7,r4
 800851c:	0007883a 	mov	r3,zero
 8008520:	38000015 	stw	zero,0(r7)
 8008524:	18c00044 	addi	r3,r3,1
 8008528:	39c00104 	addi	r7,r7,4
 800852c:	1c7ffc1e 	bne	r3,r17,8008520 <__alt_data_end+0xf8008520>
 8008530:	18c7883a 	add	r3,r3,r3
 8008534:	18c7883a 	add	r3,r3,r3
 8008538:	20c9883a 	add	r4,r4,r3
 800853c:	92400417 	ldw	r9,16(r18)
 8008540:	90c00504 	addi	r3,r18,20
 8008544:	a98007cc 	andi	r6,r21,31
 8008548:	4a53883a 	add	r9,r9,r9
 800854c:	4a53883a 	add	r9,r9,r9
 8008550:	1a53883a 	add	r9,r3,r9
 8008554:	30002426 	beq	r6,zero,80085e8 <__lshift+0x134>
 8008558:	01400804 	movi	r5,32
 800855c:	298bc83a 	sub	r5,r5,r6
 8008560:	200f883a 	mov	r7,r4
 8008564:	0011883a 	mov	r8,zero
 8008568:	1a800017 	ldw	r10,0(r3)
 800856c:	3809883a 	mov	r4,r7
 8008570:	39c00104 	addi	r7,r7,4
 8008574:	5194983a 	sll	r10,r10,r6
 8008578:	18c00104 	addi	r3,r3,4
 800857c:	4290b03a 	or	r8,r8,r10
 8008580:	3a3fff15 	stw	r8,-4(r7)
 8008584:	1a3fff17 	ldw	r8,-4(r3)
 8008588:	4150d83a 	srl	r8,r8,r5
 800858c:	1a7ff636 	bltu	r3,r9,8008568 <__alt_data_end+0xf8008568>
 8008590:	22000115 	stw	r8,4(r4)
 8008594:	40000126 	beq	r8,zero,800859c <__lshift+0xe8>
 8008598:	a4000084 	addi	r16,r20,2
 800859c:	91000117 	ldw	r4,4(r18)
 80085a0:	98c01317 	ldw	r3,76(r19)
 80085a4:	843fffc4 	addi	r16,r16,-1
 80085a8:	2109883a 	add	r4,r4,r4
 80085ac:	2109883a 	add	r4,r4,r4
 80085b0:	1907883a 	add	r3,r3,r4
 80085b4:	19000017 	ldw	r4,0(r3)
 80085b8:	14000415 	stw	r16,16(r2)
 80085bc:	91000015 	stw	r4,0(r18)
 80085c0:	1c800015 	stw	r18,0(r3)
 80085c4:	dfc00617 	ldw	ra,24(sp)
 80085c8:	dd400517 	ldw	r21,20(sp)
 80085cc:	dd000417 	ldw	r20,16(sp)
 80085d0:	dcc00317 	ldw	r19,12(sp)
 80085d4:	dc800217 	ldw	r18,8(sp)
 80085d8:	dc400117 	ldw	r17,4(sp)
 80085dc:	dc000017 	ldw	r16,0(sp)
 80085e0:	dec00704 	addi	sp,sp,28
 80085e4:	f800283a 	ret
 80085e8:	200f883a 	mov	r7,r4
 80085ec:	19800017 	ldw	r6,0(r3)
 80085f0:	39c00104 	addi	r7,r7,4
 80085f4:	18c00104 	addi	r3,r3,4
 80085f8:	39bfff15 	stw	r6,-4(r7)
 80085fc:	1a7ffb36 	bltu	r3,r9,80085ec <__alt_data_end+0xf80085ec>
 8008600:	003fe606 	br	800859c <__alt_data_end+0xf800859c>

08008604 <__mcmp>:
 8008604:	20800417 	ldw	r2,16(r4)
 8008608:	28c00417 	ldw	r3,16(r5)
 800860c:	10c5c83a 	sub	r2,r2,r3
 8008610:	1000111e 	bne	r2,zero,8008658 <__mcmp+0x54>
 8008614:	18c7883a 	add	r3,r3,r3
 8008618:	18c7883a 	add	r3,r3,r3
 800861c:	21000504 	addi	r4,r4,20
 8008620:	29400504 	addi	r5,r5,20
 8008624:	20c5883a 	add	r2,r4,r3
 8008628:	28cb883a 	add	r5,r5,r3
 800862c:	00000106 	br	8008634 <__mcmp+0x30>
 8008630:	2080082e 	bgeu	r4,r2,8008654 <__mcmp+0x50>
 8008634:	10bfff04 	addi	r2,r2,-4
 8008638:	297fff04 	addi	r5,r5,-4
 800863c:	11800017 	ldw	r6,0(r2)
 8008640:	28c00017 	ldw	r3,0(r5)
 8008644:	30fffa26 	beq	r6,r3,8008630 <__alt_data_end+0xf8008630>
 8008648:	30c00436 	bltu	r6,r3,800865c <__mcmp+0x58>
 800864c:	00800044 	movi	r2,1
 8008650:	f800283a 	ret
 8008654:	0005883a 	mov	r2,zero
 8008658:	f800283a 	ret
 800865c:	00bfffc4 	movi	r2,-1
 8008660:	f800283a 	ret

08008664 <__mdiff>:
 8008664:	defffc04 	addi	sp,sp,-16
 8008668:	dc000015 	stw	r16,0(sp)
 800866c:	2821883a 	mov	r16,r5
 8008670:	200f883a 	mov	r7,r4
 8008674:	300b883a 	mov	r5,r6
 8008678:	8009883a 	mov	r4,r16
 800867c:	dc400115 	stw	r17,4(sp)
 8008680:	dfc00315 	stw	ra,12(sp)
 8008684:	dc800215 	stw	r18,8(sp)
 8008688:	3023883a 	mov	r17,r6
 800868c:	80086040 	call	8008604 <__mcmp>
 8008690:	10005226 	beq	r2,zero,80087dc <__mdiff+0x178>
 8008694:	10004c16 	blt	r2,zero,80087c8 <__mdiff+0x164>
 8008698:	0025883a 	mov	r18,zero
 800869c:	81400117 	ldw	r5,4(r16)
 80086a0:	3809883a 	mov	r4,r7
 80086a4:	8007c940 	call	8007c94 <_Balloc>
 80086a8:	82800417 	ldw	r10,16(r16)
 80086ac:	8b400417 	ldw	r13,16(r17)
 80086b0:	81000504 	addi	r4,r16,20
 80086b4:	5299883a 	add	r12,r10,r10
 80086b8:	6b5b883a 	add	r13,r13,r13
 80086bc:	6319883a 	add	r12,r12,r12
 80086c0:	89800504 	addi	r6,r17,20
 80086c4:	6b5b883a 	add	r13,r13,r13
 80086c8:	14800315 	stw	r18,12(r2)
 80086cc:	2319883a 	add	r12,r4,r12
 80086d0:	335b883a 	add	r13,r6,r13
 80086d4:	11400504 	addi	r5,r2,20
 80086d8:	0007883a 	mov	r3,zero
 80086dc:	00000106 	br	80086e4 <__mdiff+0x80>
 80086e0:	400b883a 	mov	r5,r8
 80086e4:	22400017 	ldw	r9,0(r4)
 80086e8:	32000017 	ldw	r8,0(r6)
 80086ec:	31800104 	addi	r6,r6,4
 80086f0:	49ffffcc 	andi	r7,r9,65535
 80086f4:	42ffffcc 	andi	r11,r8,65535
 80086f8:	38c7883a 	add	r3,r7,r3
 80086fc:	1acfc83a 	sub	r7,r3,r11
 8008700:	4010d43a 	srli	r8,r8,16
 8008704:	4806d43a 	srli	r3,r9,16
 8008708:	3817d43a 	srai	r11,r7,16
 800870c:	39ffffcc 	andi	r7,r7,65535
 8008710:	1a07c83a 	sub	r3,r3,r8
 8008714:	1ac7883a 	add	r3,r3,r11
 8008718:	1812943a 	slli	r9,r3,16
 800871c:	2a000104 	addi	r8,r5,4
 8008720:	21000104 	addi	r4,r4,4
 8008724:	49ceb03a 	or	r7,r9,r7
 8008728:	29c00015 	stw	r7,0(r5)
 800872c:	1807d43a 	srai	r3,r3,16
 8008730:	337feb36 	bltu	r6,r13,80086e0 <__alt_data_end+0xf80086e0>
 8008734:	2013883a 	mov	r9,r4
 8008738:	2300342e 	bgeu	r4,r12,800880c <__mdiff+0x1a8>
 800873c:	400b883a 	mov	r5,r8
 8008740:	21c00017 	ldw	r7,0(r4)
 8008744:	29400104 	addi	r5,r5,4
 8008748:	21000104 	addi	r4,r4,4
 800874c:	39bfffcc 	andi	r6,r7,65535
 8008750:	30cd883a 	add	r6,r6,r3
 8008754:	3007d43a 	srai	r3,r6,16
 8008758:	380ed43a 	srli	r7,r7,16
 800875c:	31bfffcc 	andi	r6,r6,65535
 8008760:	19c7883a 	add	r3,r3,r7
 8008764:	180e943a 	slli	r7,r3,16
 8008768:	1807d43a 	srai	r3,r3,16
 800876c:	398cb03a 	or	r6,r7,r6
 8008770:	29bfff15 	stw	r6,-4(r5)
 8008774:	233ff236 	bltu	r4,r12,8008740 <__alt_data_end+0xf8008740>
 8008778:	0248303a 	nor	r4,zero,r9
 800877c:	2309883a 	add	r4,r4,r12
 8008780:	2008d0ba 	srli	r4,r4,2
 8008784:	21000044 	addi	r4,r4,1
 8008788:	2109883a 	add	r4,r4,r4
 800878c:	2109883a 	add	r4,r4,r4
 8008790:	4111883a 	add	r8,r8,r4
 8008794:	413fff04 	addi	r4,r8,-4
 8008798:	3000041e 	bne	r6,zero,80087ac <__mdiff+0x148>
 800879c:	213fff04 	addi	r4,r4,-4
 80087a0:	20c00017 	ldw	r3,0(r4)
 80087a4:	52bfffc4 	addi	r10,r10,-1
 80087a8:	183ffc26 	beq	r3,zero,800879c <__alt_data_end+0xf800879c>
 80087ac:	12800415 	stw	r10,16(r2)
 80087b0:	dfc00317 	ldw	ra,12(sp)
 80087b4:	dc800217 	ldw	r18,8(sp)
 80087b8:	dc400117 	ldw	r17,4(sp)
 80087bc:	dc000017 	ldw	r16,0(sp)
 80087c0:	dec00404 	addi	sp,sp,16
 80087c4:	f800283a 	ret
 80087c8:	8005883a 	mov	r2,r16
 80087cc:	04800044 	movi	r18,1
 80087d0:	8821883a 	mov	r16,r17
 80087d4:	1023883a 	mov	r17,r2
 80087d8:	003fb006 	br	800869c <__alt_data_end+0xf800869c>
 80087dc:	3809883a 	mov	r4,r7
 80087e0:	000b883a 	mov	r5,zero
 80087e4:	8007c940 	call	8007c94 <_Balloc>
 80087e8:	00c00044 	movi	r3,1
 80087ec:	10c00415 	stw	r3,16(r2)
 80087f0:	10000515 	stw	zero,20(r2)
 80087f4:	dfc00317 	ldw	ra,12(sp)
 80087f8:	dc800217 	ldw	r18,8(sp)
 80087fc:	dc400117 	ldw	r17,4(sp)
 8008800:	dc000017 	ldw	r16,0(sp)
 8008804:	dec00404 	addi	sp,sp,16
 8008808:	f800283a 	ret
 800880c:	380d883a 	mov	r6,r7
 8008810:	003fe006 	br	8008794 <__alt_data_end+0xf8008794>

08008814 <__ulp>:
 8008814:	295ffc2c 	andhi	r5,r5,32752
 8008818:	00bf3034 	movhi	r2,64704
 800881c:	2887883a 	add	r3,r5,r2
 8008820:	00c0020e 	bge	zero,r3,800882c <__ulp+0x18>
 8008824:	0005883a 	mov	r2,zero
 8008828:	f800283a 	ret
 800882c:	00c7c83a 	sub	r3,zero,r3
 8008830:	1805d53a 	srai	r2,r3,20
 8008834:	00c004c4 	movi	r3,19
 8008838:	18800a0e 	bge	r3,r2,8008864 <__ulp+0x50>
 800883c:	01000c84 	movi	r4,50
 8008840:	0007883a 	mov	r3,zero
 8008844:	20800516 	blt	r4,r2,800885c <__ulp+0x48>
 8008848:	01000cc4 	movi	r4,51
 800884c:	2085c83a 	sub	r2,r4,r2
 8008850:	01000044 	movi	r4,1
 8008854:	2084983a 	sll	r2,r4,r2
 8008858:	f800283a 	ret
 800885c:	00800044 	movi	r2,1
 8008860:	f800283a 	ret
 8008864:	00c00234 	movhi	r3,8
 8008868:	1887d83a 	sra	r3,r3,r2
 800886c:	0005883a 	mov	r2,zero
 8008870:	f800283a 	ret

08008874 <__b2d>:
 8008874:	21800417 	ldw	r6,16(r4)
 8008878:	22000504 	addi	r8,r4,20
 800887c:	deffff04 	addi	sp,sp,-4
 8008880:	318d883a 	add	r6,r6,r6
 8008884:	318d883a 	add	r6,r6,r6
 8008888:	418d883a 	add	r6,r8,r6
 800888c:	31ffff17 	ldw	r7,-4(r6)
 8008890:	327fff04 	addi	r9,r6,-4
 8008894:	dfc00015 	stw	ra,0(sp)
 8008898:	3809883a 	mov	r4,r7
 800889c:	8007fac0 	call	8007fac <__hi0bits>
 80088a0:	00c00804 	movi	r3,32
 80088a4:	1887c83a 	sub	r3,r3,r2
 80088a8:	28c00015 	stw	r3,0(r5)
 80088ac:	00c00284 	movi	r3,10
 80088b0:	18800d16 	blt	r3,r2,80088e8 <__b2d+0x74>
 80088b4:	010002c4 	movi	r4,11
 80088b8:	2089c83a 	sub	r4,r4,r2
 80088bc:	3906d83a 	srl	r3,r7,r4
 80088c0:	18cffc34 	orhi	r3,r3,16368
 80088c4:	4240232e 	bgeu	r8,r9,8008954 <__b2d+0xe0>
 80088c8:	317ffe17 	ldw	r5,-8(r6)
 80088cc:	2908d83a 	srl	r4,r5,r4
 80088d0:	10800544 	addi	r2,r2,21
 80088d4:	388e983a 	sll	r7,r7,r2
 80088d8:	21c4b03a 	or	r2,r4,r7
 80088dc:	dfc00017 	ldw	ra,0(sp)
 80088e0:	dec00104 	addi	sp,sp,4
 80088e4:	f800283a 	ret
 80088e8:	42401136 	bltu	r8,r9,8008930 <__b2d+0xbc>
 80088ec:	113ffd44 	addi	r4,r2,-11
 80088f0:	000b883a 	mov	r5,zero
 80088f4:	20001226 	beq	r4,zero,8008940 <__b2d+0xcc>
 80088f8:	00c00ac4 	movi	r3,43
 80088fc:	1885c83a 	sub	r2,r3,r2
 8008900:	3906983a 	sll	r3,r7,r4
 8008904:	288cd83a 	srl	r6,r5,r2
 8008908:	18cffc34 	orhi	r3,r3,16368
 800890c:	1986b03a 	or	r3,r3,r6
 8008910:	4240122e 	bgeu	r8,r9,800895c <__b2d+0xe8>
 8008914:	49bfff17 	ldw	r6,-4(r9)
 8008918:	3084d83a 	srl	r2,r6,r2
 800891c:	2908983a 	sll	r4,r5,r4
 8008920:	1104b03a 	or	r2,r2,r4
 8008924:	dfc00017 	ldw	ra,0(sp)
 8008928:	dec00104 	addi	sp,sp,4
 800892c:	f800283a 	ret
 8008930:	113ffd44 	addi	r4,r2,-11
 8008934:	327ffe04 	addi	r9,r6,-8
 8008938:	317ffe17 	ldw	r5,-8(r6)
 800893c:	203fee1e 	bne	r4,zero,80088f8 <__alt_data_end+0xf80088f8>
 8008940:	38cffc34 	orhi	r3,r7,16368
 8008944:	2805883a 	mov	r2,r5
 8008948:	dfc00017 	ldw	ra,0(sp)
 800894c:	dec00104 	addi	sp,sp,4
 8008950:	f800283a 	ret
 8008954:	0009883a 	mov	r4,zero
 8008958:	003fdd06 	br	80088d0 <__alt_data_end+0xf80088d0>
 800895c:	0005883a 	mov	r2,zero
 8008960:	003fee06 	br	800891c <__alt_data_end+0xf800891c>

08008964 <__d2b>:
 8008964:	defffa04 	addi	sp,sp,-24
 8008968:	dc400315 	stw	r17,12(sp)
 800896c:	2823883a 	mov	r17,r5
 8008970:	01400044 	movi	r5,1
 8008974:	dc800415 	stw	r18,16(sp)
 8008978:	dc000215 	stw	r16,8(sp)
 800897c:	dfc00515 	stw	ra,20(sp)
 8008980:	3021883a 	mov	r16,r6
 8008984:	3825883a 	mov	r18,r7
 8008988:	8007c940 	call	8007c94 <_Balloc>
 800898c:	8012907a 	slli	r9,r16,1
 8008990:	1011883a 	mov	r8,r2
 8008994:	00800434 	movhi	r2,16
 8008998:	10bfffc4 	addi	r2,r2,-1
 800899c:	4812d57a 	srli	r9,r9,21
 80089a0:	80a0703a 	and	r16,r16,r2
 80089a4:	48000126 	beq	r9,zero,80089ac <__d2b+0x48>
 80089a8:	84000434 	orhi	r16,r16,16
 80089ac:	dc000015 	stw	r16,0(sp)
 80089b0:	88001e26 	beq	r17,zero,8008a2c <__d2b+0xc8>
 80089b4:	d9000104 	addi	r4,sp,4
 80089b8:	dc400115 	stw	r17,4(sp)
 80089bc:	80080140 	call	8008014 <__lo0bits>
 80089c0:	d8c00017 	ldw	r3,0(sp)
 80089c4:	10002f1e 	bne	r2,zero,8008a84 <__d2b+0x120>
 80089c8:	d9000117 	ldw	r4,4(sp)
 80089cc:	41000515 	stw	r4,20(r8)
 80089d0:	180b003a 	cmpeq	r5,r3,zero
 80089d4:	01000084 	movi	r4,2
 80089d8:	214bc83a 	sub	r5,r4,r5
 80089dc:	40c00615 	stw	r3,24(r8)
 80089e0:	41400415 	stw	r5,16(r8)
 80089e4:	4800191e 	bne	r9,zero,8008a4c <__d2b+0xe8>
 80089e8:	280690ba 	slli	r3,r5,2
 80089ec:	10bef384 	addi	r2,r2,-1074
 80089f0:	90800015 	stw	r2,0(r18)
 80089f4:	40c5883a 	add	r2,r8,r3
 80089f8:	11000417 	ldw	r4,16(r2)
 80089fc:	8007fac0 	call	8007fac <__hi0bits>
 8008a00:	280a917a 	slli	r5,r5,5
 8008a04:	d8c00617 	ldw	r3,24(sp)
 8008a08:	2885c83a 	sub	r2,r5,r2
 8008a0c:	18800015 	stw	r2,0(r3)
 8008a10:	4005883a 	mov	r2,r8
 8008a14:	dfc00517 	ldw	ra,20(sp)
 8008a18:	dc800417 	ldw	r18,16(sp)
 8008a1c:	dc400317 	ldw	r17,12(sp)
 8008a20:	dc000217 	ldw	r16,8(sp)
 8008a24:	dec00604 	addi	sp,sp,24
 8008a28:	f800283a 	ret
 8008a2c:	d809883a 	mov	r4,sp
 8008a30:	80080140 	call	8008014 <__lo0bits>
 8008a34:	d8c00017 	ldw	r3,0(sp)
 8008a38:	01400044 	movi	r5,1
 8008a3c:	41400415 	stw	r5,16(r8)
 8008a40:	40c00515 	stw	r3,20(r8)
 8008a44:	10800804 	addi	r2,r2,32
 8008a48:	483fe726 	beq	r9,zero,80089e8 <__alt_data_end+0xf80089e8>
 8008a4c:	00c00d44 	movi	r3,53
 8008a50:	4a7ef344 	addi	r9,r9,-1075
 8008a54:	4893883a 	add	r9,r9,r2
 8008a58:	1885c83a 	sub	r2,r3,r2
 8008a5c:	d8c00617 	ldw	r3,24(sp)
 8008a60:	92400015 	stw	r9,0(r18)
 8008a64:	18800015 	stw	r2,0(r3)
 8008a68:	4005883a 	mov	r2,r8
 8008a6c:	dfc00517 	ldw	ra,20(sp)
 8008a70:	dc800417 	ldw	r18,16(sp)
 8008a74:	dc400317 	ldw	r17,12(sp)
 8008a78:	dc000217 	ldw	r16,8(sp)
 8008a7c:	dec00604 	addi	sp,sp,24
 8008a80:	f800283a 	ret
 8008a84:	01000804 	movi	r4,32
 8008a88:	2089c83a 	sub	r4,r4,r2
 8008a8c:	1908983a 	sll	r4,r3,r4
 8008a90:	d9400117 	ldw	r5,4(sp)
 8008a94:	1886d83a 	srl	r3,r3,r2
 8008a98:	2148b03a 	or	r4,r4,r5
 8008a9c:	41000515 	stw	r4,20(r8)
 8008aa0:	d8c00015 	stw	r3,0(sp)
 8008aa4:	003fca06 	br	80089d0 <__alt_data_end+0xf80089d0>

08008aa8 <__ratio>:
 8008aa8:	defffd04 	addi	sp,sp,-12
 8008aac:	2817883a 	mov	r11,r5
 8008ab0:	201b883a 	mov	r13,r4
 8008ab4:	d9400104 	addi	r5,sp,4
 8008ab8:	dfc00215 	stw	ra,8(sp)
 8008abc:	80088740 	call	8008874 <__b2d>
 8008ac0:	5809883a 	mov	r4,r11
 8008ac4:	d80b883a 	mov	r5,sp
 8008ac8:	1019883a 	mov	r12,r2
 8008acc:	1815883a 	mov	r10,r3
 8008ad0:	80088740 	call	8008874 <__b2d>
 8008ad4:	69400417 	ldw	r5,16(r13)
 8008ad8:	59000417 	ldw	r4,16(r11)
 8008adc:	d9800117 	ldw	r6,4(sp)
 8008ae0:	2909c83a 	sub	r4,r5,r4
 8008ae4:	d9400017 	ldw	r5,0(sp)
 8008ae8:	2008917a 	slli	r4,r4,5
 8008aec:	314bc83a 	sub	r5,r6,r5
 8008af0:	290b883a 	add	r5,r5,r4
 8008af4:	01400a0e 	bge	zero,r5,8008b20 <__ratio+0x78>
 8008af8:	280a953a 	slli	r5,r5,20
 8008afc:	6009883a 	mov	r4,r12
 8008b00:	100d883a 	mov	r6,r2
 8008b04:	2a95883a 	add	r10,r5,r10
 8008b08:	500b883a 	mov	r5,r10
 8008b0c:	180f883a 	mov	r7,r3
 8008b10:	800caac0 	call	800caac <__divdf3>
 8008b14:	dfc00217 	ldw	ra,8(sp)
 8008b18:	dec00304 	addi	sp,sp,12
 8008b1c:	f800283a 	ret
 8008b20:	280a953a 	slli	r5,r5,20
 8008b24:	6009883a 	mov	r4,r12
 8008b28:	100d883a 	mov	r6,r2
 8008b2c:	1947c83a 	sub	r3,r3,r5
 8008b30:	180f883a 	mov	r7,r3
 8008b34:	500b883a 	mov	r5,r10
 8008b38:	800caac0 	call	800caac <__divdf3>
 8008b3c:	dfc00217 	ldw	ra,8(sp)
 8008b40:	dec00304 	addi	sp,sp,12
 8008b44:	f800283a 	ret

08008b48 <_mprec_log10>:
 8008b48:	defffe04 	addi	sp,sp,-8
 8008b4c:	dc000015 	stw	r16,0(sp)
 8008b50:	dfc00115 	stw	ra,4(sp)
 8008b54:	008005c4 	movi	r2,23
 8008b58:	2021883a 	mov	r16,r4
 8008b5c:	11000d0e 	bge	r2,r4,8008b94 <_mprec_log10+0x4c>
 8008b60:	0005883a 	mov	r2,zero
 8008b64:	00cffc34 	movhi	r3,16368
 8008b68:	843fffc4 	addi	r16,r16,-1
 8008b6c:	1009883a 	mov	r4,r2
 8008b70:	180b883a 	mov	r5,r3
 8008b74:	000d883a 	mov	r6,zero
 8008b78:	01d00934 	movhi	r7,16420
 8008b7c:	800d6900 	call	800d690 <__muldf3>
 8008b80:	803ff91e 	bne	r16,zero,8008b68 <__alt_data_end+0xf8008b68>
 8008b84:	dfc00117 	ldw	ra,4(sp)
 8008b88:	dc000017 	ldw	r16,0(sp)
 8008b8c:	dec00204 	addi	sp,sp,8
 8008b90:	f800283a 	ret
 8008b94:	202090fa 	slli	r16,r4,3
 8008b98:	00820074 	movhi	r2,2049
 8008b9c:	10868404 	addi	r2,r2,6672
 8008ba0:	1421883a 	add	r16,r2,r16
 8008ba4:	80800017 	ldw	r2,0(r16)
 8008ba8:	80c00117 	ldw	r3,4(r16)
 8008bac:	dfc00117 	ldw	ra,4(sp)
 8008bb0:	dc000017 	ldw	r16,0(sp)
 8008bb4:	dec00204 	addi	sp,sp,8
 8008bb8:	f800283a 	ret

08008bbc <__copybits>:
 8008bbc:	297fffc4 	addi	r5,r5,-1
 8008bc0:	2811d17a 	srai	r8,r5,5
 8008bc4:	31c00417 	ldw	r7,16(r6)
 8008bc8:	30800504 	addi	r2,r6,20
 8008bcc:	42000044 	addi	r8,r8,1
 8008bd0:	39cf883a 	add	r7,r7,r7
 8008bd4:	4211883a 	add	r8,r8,r8
 8008bd8:	39cf883a 	add	r7,r7,r7
 8008bdc:	4211883a 	add	r8,r8,r8
 8008be0:	11cf883a 	add	r7,r2,r7
 8008be4:	2211883a 	add	r8,r4,r8
 8008be8:	11c00d2e 	bgeu	r2,r7,8008c20 <__copybits+0x64>
 8008bec:	2007883a 	mov	r3,r4
 8008bf0:	11400017 	ldw	r5,0(r2)
 8008bf4:	18c00104 	addi	r3,r3,4
 8008bf8:	10800104 	addi	r2,r2,4
 8008bfc:	197fff15 	stw	r5,-4(r3)
 8008c00:	11fffb36 	bltu	r2,r7,8008bf0 <__alt_data_end+0xf8008bf0>
 8008c04:	3985c83a 	sub	r2,r7,r6
 8008c08:	10bffac4 	addi	r2,r2,-21
 8008c0c:	1004d0ba 	srli	r2,r2,2
 8008c10:	10800044 	addi	r2,r2,1
 8008c14:	1085883a 	add	r2,r2,r2
 8008c18:	1085883a 	add	r2,r2,r2
 8008c1c:	2089883a 	add	r4,r4,r2
 8008c20:	2200032e 	bgeu	r4,r8,8008c30 <__copybits+0x74>
 8008c24:	20000015 	stw	zero,0(r4)
 8008c28:	21000104 	addi	r4,r4,4
 8008c2c:	223ffd36 	bltu	r4,r8,8008c24 <__alt_data_end+0xf8008c24>
 8008c30:	f800283a 	ret

08008c34 <__any_on>:
 8008c34:	20800417 	ldw	r2,16(r4)
 8008c38:	2807d17a 	srai	r3,r5,5
 8008c3c:	21000504 	addi	r4,r4,20
 8008c40:	10c00d0e 	bge	r2,r3,8008c78 <__any_on+0x44>
 8008c44:	1085883a 	add	r2,r2,r2
 8008c48:	1085883a 	add	r2,r2,r2
 8008c4c:	2085883a 	add	r2,r4,r2
 8008c50:	2080182e 	bgeu	r4,r2,8008cb4 <__any_on+0x80>
 8008c54:	10ffff17 	ldw	r3,-4(r2)
 8008c58:	10bfff04 	addi	r2,r2,-4
 8008c5c:	1800041e 	bne	r3,zero,8008c70 <__any_on+0x3c>
 8008c60:	2080142e 	bgeu	r4,r2,8008cb4 <__any_on+0x80>
 8008c64:	10bfff04 	addi	r2,r2,-4
 8008c68:	10c00017 	ldw	r3,0(r2)
 8008c6c:	183ffc26 	beq	r3,zero,8008c60 <__alt_data_end+0xf8008c60>
 8008c70:	00800044 	movi	r2,1
 8008c74:	f800283a 	ret
 8008c78:	18800a0e 	bge	r3,r2,8008ca4 <__any_on+0x70>
 8008c7c:	18c7883a 	add	r3,r3,r3
 8008c80:	18c7883a 	add	r3,r3,r3
 8008c84:	294007cc 	andi	r5,r5,31
 8008c88:	20c5883a 	add	r2,r4,r3
 8008c8c:	283ff026 	beq	r5,zero,8008c50 <__alt_data_end+0xf8008c50>
 8008c90:	10c00017 	ldw	r3,0(r2)
 8008c94:	194cd83a 	srl	r6,r3,r5
 8008c98:	314a983a 	sll	r5,r6,r5
 8008c9c:	28fff41e 	bne	r5,r3,8008c70 <__alt_data_end+0xf8008c70>
 8008ca0:	003feb06 	br	8008c50 <__alt_data_end+0xf8008c50>
 8008ca4:	18c7883a 	add	r3,r3,r3
 8008ca8:	18c7883a 	add	r3,r3,r3
 8008cac:	20c5883a 	add	r2,r4,r3
 8008cb0:	003fe706 	br	8008c50 <__alt_data_end+0xf8008c50>
 8008cb4:	0005883a 	mov	r2,zero
 8008cb8:	f800283a 	ret

08008cbc <_realloc_r>:
 8008cbc:	defff604 	addi	sp,sp,-40
 8008cc0:	dd000415 	stw	r20,16(sp)
 8008cc4:	dc000015 	stw	r16,0(sp)
 8008cc8:	dfc00915 	stw	ra,36(sp)
 8008ccc:	df000815 	stw	fp,32(sp)
 8008cd0:	ddc00715 	stw	r23,28(sp)
 8008cd4:	dd800615 	stw	r22,24(sp)
 8008cd8:	dd400515 	stw	r21,20(sp)
 8008cdc:	dcc00315 	stw	r19,12(sp)
 8008ce0:	dc800215 	stw	r18,8(sp)
 8008ce4:	dc400115 	stw	r17,4(sp)
 8008ce8:	2821883a 	mov	r16,r5
 8008cec:	3029883a 	mov	r20,r6
 8008cf0:	28009a26 	beq	r5,zero,8008f5c <_realloc_r+0x2a0>
 8008cf4:	202b883a 	mov	r21,r4
 8008cf8:	800ef800 	call	800ef80 <__malloc_lock>
 8008cfc:	80ffff17 	ldw	r3,-4(r16)
 8008d00:	047fff04 	movi	r17,-4
 8008d04:	a08002c4 	addi	r2,r20,11
 8008d08:	01000584 	movi	r4,22
 8008d0c:	84fffe04 	addi	r19,r16,-8
 8008d10:	1c62703a 	and	r17,r3,r17
 8008d14:	2080372e 	bgeu	r4,r2,8008df4 <_realloc_r+0x138>
 8008d18:	04bffe04 	movi	r18,-8
 8008d1c:	14a4703a 	and	r18,r2,r18
 8008d20:	9005883a 	mov	r2,r18
 8008d24:	90005b16 	blt	r18,zero,8008e94 <_realloc_r+0x1d8>
 8008d28:	95005a36 	bltu	r18,r20,8008e94 <_realloc_r+0x1d8>
 8008d2c:	8880340e 	bge	r17,r2,8008e00 <_realloc_r+0x144>
 8008d30:	05c20074 	movhi	r23,2049
 8008d34:	bdc83004 	addi	r23,r23,8384
 8008d38:	b9000217 	ldw	r4,8(r23)
 8008d3c:	9c4b883a 	add	r5,r19,r17
 8008d40:	21409626 	beq	r4,r5,8008f9c <_realloc_r+0x2e0>
 8008d44:	29800117 	ldw	r6,4(r5)
 8008d48:	01ffff84 	movi	r7,-2
 8008d4c:	31ce703a 	and	r7,r6,r7
 8008d50:	29cf883a 	add	r7,r5,r7
 8008d54:	39c00117 	ldw	r7,4(r7)
 8008d58:	39c0004c 	andi	r7,r7,1
 8008d5c:	38004226 	beq	r7,zero,8008e68 <_realloc_r+0x1ac>
 8008d60:	000d883a 	mov	r6,zero
 8008d64:	000b883a 	mov	r5,zero
 8008d68:	18c0004c 	andi	r3,r3,1
 8008d6c:	18005c1e 	bne	r3,zero,8008ee0 <_realloc_r+0x224>
 8008d70:	85bffe17 	ldw	r22,-8(r16)
 8008d74:	00ffff04 	movi	r3,-4
 8008d78:	9dadc83a 	sub	r22,r19,r22
 8008d7c:	b1c00117 	ldw	r7,4(r22)
 8008d80:	38c6703a 	and	r3,r7,r3
 8008d84:	28005426 	beq	r5,zero,8008ed8 <_realloc_r+0x21c>
 8008d88:	1c47883a 	add	r3,r3,r17
 8008d8c:	2900bf26 	beq	r5,r4,800908c <_realloc_r+0x3d0>
 8008d90:	30ef883a 	add	r23,r6,r3
 8008d94:	b8807e16 	blt	r23,r2,8008f90 <_realloc_r+0x2d4>
 8008d98:	28800317 	ldw	r2,12(r5)
 8008d9c:	28c00217 	ldw	r3,8(r5)
 8008da0:	89bfff04 	addi	r6,r17,-4
 8008da4:	01000904 	movi	r4,36
 8008da8:	18800315 	stw	r2,12(r3)
 8008dac:	10c00215 	stw	r3,8(r2)
 8008db0:	b1400217 	ldw	r5,8(r22)
 8008db4:	b0c00317 	ldw	r3,12(r22)
 8008db8:	b5000204 	addi	r20,r22,8
 8008dbc:	28c00315 	stw	r3,12(r5)
 8008dc0:	19400215 	stw	r5,8(r3)
 8008dc4:	21808536 	bltu	r4,r6,8008fdc <_realloc_r+0x320>
 8008dc8:	008004c4 	movi	r2,19
 8008dcc:	1180932e 	bgeu	r2,r6,800901c <_realloc_r+0x360>
 8008dd0:	80800017 	ldw	r2,0(r16)
 8008dd4:	b0800215 	stw	r2,8(r22)
 8008dd8:	80800117 	ldw	r2,4(r16)
 8008ddc:	b0800315 	stw	r2,12(r22)
 8008de0:	008006c4 	movi	r2,27
 8008de4:	1180df36 	bltu	r2,r6,8009164 <_realloc_r+0x4a8>
 8008de8:	b0c00404 	addi	r3,r22,16
 8008dec:	84000204 	addi	r16,r16,8
 8008df0:	00008b06 	br	8009020 <_realloc_r+0x364>
 8008df4:	00800404 	movi	r2,16
 8008df8:	1025883a 	mov	r18,r2
 8008dfc:	003fca06 	br	8008d28 <__alt_data_end+0xf8008d28>
 8008e00:	8029883a 	mov	r20,r16
 8008e04:	8c8dc83a 	sub	r6,r17,r18
 8008e08:	008003c4 	movi	r2,15
 8008e0c:	18c0004c 	andi	r3,r3,1
 8008e10:	11802436 	bltu	r2,r6,8008ea4 <_realloc_r+0x1e8>
 8008e14:	1c46b03a 	or	r3,r3,r17
 8008e18:	98c00115 	stw	r3,4(r19)
 8008e1c:	9c63883a 	add	r17,r19,r17
 8008e20:	88800117 	ldw	r2,4(r17)
 8008e24:	10800054 	ori	r2,r2,1
 8008e28:	88800115 	stw	r2,4(r17)
 8008e2c:	a809883a 	mov	r4,r21
 8008e30:	800efa00 	call	800efa0 <__malloc_unlock>
 8008e34:	a005883a 	mov	r2,r20
 8008e38:	dfc00917 	ldw	ra,36(sp)
 8008e3c:	df000817 	ldw	fp,32(sp)
 8008e40:	ddc00717 	ldw	r23,28(sp)
 8008e44:	dd800617 	ldw	r22,24(sp)
 8008e48:	dd400517 	ldw	r21,20(sp)
 8008e4c:	dd000417 	ldw	r20,16(sp)
 8008e50:	dcc00317 	ldw	r19,12(sp)
 8008e54:	dc800217 	ldw	r18,8(sp)
 8008e58:	dc400117 	ldw	r17,4(sp)
 8008e5c:	dc000017 	ldw	r16,0(sp)
 8008e60:	dec00a04 	addi	sp,sp,40
 8008e64:	f800283a 	ret
 8008e68:	01ffff04 	movi	r7,-4
 8008e6c:	31cc703a 	and	r6,r6,r7
 8008e70:	344f883a 	add	r7,r6,r17
 8008e74:	38bfbc16 	blt	r7,r2,8008d68 <__alt_data_end+0xf8008d68>
 8008e78:	28800317 	ldw	r2,12(r5)
 8008e7c:	29000217 	ldw	r4,8(r5)
 8008e80:	8029883a 	mov	r20,r16
 8008e84:	3823883a 	mov	r17,r7
 8008e88:	20800315 	stw	r2,12(r4)
 8008e8c:	11000215 	stw	r4,8(r2)
 8008e90:	003fdc06 	br	8008e04 <__alt_data_end+0xf8008e04>
 8008e94:	00800304 	movi	r2,12
 8008e98:	a8800015 	stw	r2,0(r21)
 8008e9c:	0005883a 	mov	r2,zero
 8008ea0:	003fe506 	br	8008e38 <__alt_data_end+0xf8008e38>
 8008ea4:	1c86b03a 	or	r3,r3,r18
 8008ea8:	9c8b883a 	add	r5,r19,r18
 8008eac:	98c00115 	stw	r3,4(r19)
 8008eb0:	30800054 	ori	r2,r6,1
 8008eb4:	28800115 	stw	r2,4(r5)
 8008eb8:	298d883a 	add	r6,r5,r6
 8008ebc:	30800117 	ldw	r2,4(r6)
 8008ec0:	a809883a 	mov	r4,r21
 8008ec4:	29400204 	addi	r5,r5,8
 8008ec8:	10800054 	ori	r2,r2,1
 8008ecc:	30800115 	stw	r2,4(r6)
 8008ed0:	80065280 	call	8006528 <_free_r>
 8008ed4:	003fd506 	br	8008e2c <__alt_data_end+0xf8008e2c>
 8008ed8:	1c6f883a 	add	r23,r3,r17
 8008edc:	b880370e 	bge	r23,r2,8008fbc <_realloc_r+0x300>
 8008ee0:	a00b883a 	mov	r5,r20
 8008ee4:	a809883a 	mov	r4,r21
 8008ee8:	800708c0 	call	800708c <_malloc_r>
 8008eec:	1029883a 	mov	r20,r2
 8008ef0:	1000c026 	beq	r2,zero,80091f4 <_realloc_r+0x538>
 8008ef4:	80ffff17 	ldw	r3,-4(r16)
 8008ef8:	113ffe04 	addi	r4,r2,-8
 8008efc:	00bfff84 	movi	r2,-2
 8008f00:	1884703a 	and	r2,r3,r2
 8008f04:	9885883a 	add	r2,r19,r2
 8008f08:	20809026 	beq	r4,r2,800914c <_realloc_r+0x490>
 8008f0c:	89bfff04 	addi	r6,r17,-4
 8008f10:	00800904 	movi	r2,36
 8008f14:	11805936 	bltu	r2,r6,800907c <_realloc_r+0x3c0>
 8008f18:	00c004c4 	movi	r3,19
 8008f1c:	19803636 	bltu	r3,r6,8008ff8 <_realloc_r+0x33c>
 8008f20:	a005883a 	mov	r2,r20
 8008f24:	8007883a 	mov	r3,r16
 8008f28:	19000017 	ldw	r4,0(r3)
 8008f2c:	11000015 	stw	r4,0(r2)
 8008f30:	19000117 	ldw	r4,4(r3)
 8008f34:	11000115 	stw	r4,4(r2)
 8008f38:	18c00217 	ldw	r3,8(r3)
 8008f3c:	10c00215 	stw	r3,8(r2)
 8008f40:	800b883a 	mov	r5,r16
 8008f44:	a809883a 	mov	r4,r21
 8008f48:	80065280 	call	8006528 <_free_r>
 8008f4c:	a809883a 	mov	r4,r21
 8008f50:	800efa00 	call	800efa0 <__malloc_unlock>
 8008f54:	a005883a 	mov	r2,r20
 8008f58:	003fb706 	br	8008e38 <__alt_data_end+0xf8008e38>
 8008f5c:	300b883a 	mov	r5,r6
 8008f60:	dfc00917 	ldw	ra,36(sp)
 8008f64:	df000817 	ldw	fp,32(sp)
 8008f68:	ddc00717 	ldw	r23,28(sp)
 8008f6c:	dd800617 	ldw	r22,24(sp)
 8008f70:	dd400517 	ldw	r21,20(sp)
 8008f74:	dd000417 	ldw	r20,16(sp)
 8008f78:	dcc00317 	ldw	r19,12(sp)
 8008f7c:	dc800217 	ldw	r18,8(sp)
 8008f80:	dc400117 	ldw	r17,4(sp)
 8008f84:	dc000017 	ldw	r16,0(sp)
 8008f88:	dec00a04 	addi	sp,sp,40
 8008f8c:	800708c1 	jmpi	800708c <_malloc_r>
 8008f90:	182f883a 	mov	r23,r3
 8008f94:	b8bfd216 	blt	r23,r2,8008ee0 <__alt_data_end+0xf8008ee0>
 8008f98:	00000806 	br	8008fbc <_realloc_r+0x300>
 8008f9c:	21800117 	ldw	r6,4(r4)
 8008fa0:	017fff04 	movi	r5,-4
 8008fa4:	91c00404 	addi	r7,r18,16
 8008fa8:	314c703a 	and	r6,r6,r5
 8008fac:	344b883a 	add	r5,r6,r17
 8008fb0:	29c0250e 	bge	r5,r7,8009048 <_realloc_r+0x38c>
 8008fb4:	200b883a 	mov	r5,r4
 8008fb8:	003f6b06 	br	8008d68 <__alt_data_end+0xf8008d68>
 8008fbc:	b0800317 	ldw	r2,12(r22)
 8008fc0:	b0c00217 	ldw	r3,8(r22)
 8008fc4:	89bfff04 	addi	r6,r17,-4
 8008fc8:	01000904 	movi	r4,36
 8008fcc:	18800315 	stw	r2,12(r3)
 8008fd0:	10c00215 	stw	r3,8(r2)
 8008fd4:	b5000204 	addi	r20,r22,8
 8008fd8:	21bf7b2e 	bgeu	r4,r6,8008dc8 <__alt_data_end+0xf8008dc8>
 8008fdc:	a009883a 	mov	r4,r20
 8008fe0:	800b883a 	mov	r5,r16
 8008fe4:	8007a440 	call	8007a44 <memmove>
 8008fe8:	b0c00117 	ldw	r3,4(r22)
 8008fec:	b823883a 	mov	r17,r23
 8008ff0:	b027883a 	mov	r19,r22
 8008ff4:	003f8306 	br	8008e04 <__alt_data_end+0xf8008e04>
 8008ff8:	80c00017 	ldw	r3,0(r16)
 8008ffc:	a0c00015 	stw	r3,0(r20)
 8009000:	80c00117 	ldw	r3,4(r16)
 8009004:	a0c00115 	stw	r3,4(r20)
 8009008:	00c006c4 	movi	r3,27
 800900c:	19804736 	bltu	r3,r6,800912c <_realloc_r+0x470>
 8009010:	a0800204 	addi	r2,r20,8
 8009014:	80c00204 	addi	r3,r16,8
 8009018:	003fc306 	br	8008f28 <__alt_data_end+0xf8008f28>
 800901c:	a007883a 	mov	r3,r20
 8009020:	80800017 	ldw	r2,0(r16)
 8009024:	b823883a 	mov	r17,r23
 8009028:	b027883a 	mov	r19,r22
 800902c:	18800015 	stw	r2,0(r3)
 8009030:	80800117 	ldw	r2,4(r16)
 8009034:	18800115 	stw	r2,4(r3)
 8009038:	80800217 	ldw	r2,8(r16)
 800903c:	18800215 	stw	r2,8(r3)
 8009040:	b0c00117 	ldw	r3,4(r22)
 8009044:	003f6f06 	br	8008e04 <__alt_data_end+0xf8008e04>
 8009048:	9ca7883a 	add	r19,r19,r18
 800904c:	2c85c83a 	sub	r2,r5,r18
 8009050:	bcc00215 	stw	r19,8(r23)
 8009054:	10800054 	ori	r2,r2,1
 8009058:	98800115 	stw	r2,4(r19)
 800905c:	80bfff17 	ldw	r2,-4(r16)
 8009060:	a809883a 	mov	r4,r21
 8009064:	1080004c 	andi	r2,r2,1
 8009068:	90a4b03a 	or	r18,r18,r2
 800906c:	84bfff15 	stw	r18,-4(r16)
 8009070:	800efa00 	call	800efa0 <__malloc_unlock>
 8009074:	8005883a 	mov	r2,r16
 8009078:	003f6f06 	br	8008e38 <__alt_data_end+0xf8008e38>
 800907c:	a009883a 	mov	r4,r20
 8009080:	800b883a 	mov	r5,r16
 8009084:	8007a440 	call	8007a44 <memmove>
 8009088:	003fad06 	br	8008f40 <__alt_data_end+0xf8008f40>
 800908c:	30f9883a 	add	fp,r6,r3
 8009090:	91000404 	addi	r4,r18,16
 8009094:	e13fbe16 	blt	fp,r4,8008f90 <__alt_data_end+0xf8008f90>
 8009098:	b0800317 	ldw	r2,12(r22)
 800909c:	b0c00217 	ldw	r3,8(r22)
 80090a0:	89bfff04 	addi	r6,r17,-4
 80090a4:	01000904 	movi	r4,36
 80090a8:	18800315 	stw	r2,12(r3)
 80090ac:	10c00215 	stw	r3,8(r2)
 80090b0:	b4400204 	addi	r17,r22,8
 80090b4:	21804336 	bltu	r4,r6,80091c4 <_realloc_r+0x508>
 80090b8:	008004c4 	movi	r2,19
 80090bc:	11803f2e 	bgeu	r2,r6,80091bc <_realloc_r+0x500>
 80090c0:	80800017 	ldw	r2,0(r16)
 80090c4:	b0800215 	stw	r2,8(r22)
 80090c8:	80800117 	ldw	r2,4(r16)
 80090cc:	b0800315 	stw	r2,12(r22)
 80090d0:	008006c4 	movi	r2,27
 80090d4:	11803f36 	bltu	r2,r6,80091d4 <_realloc_r+0x518>
 80090d8:	b0c00404 	addi	r3,r22,16
 80090dc:	84000204 	addi	r16,r16,8
 80090e0:	80800017 	ldw	r2,0(r16)
 80090e4:	18800015 	stw	r2,0(r3)
 80090e8:	80800117 	ldw	r2,4(r16)
 80090ec:	18800115 	stw	r2,4(r3)
 80090f0:	80800217 	ldw	r2,8(r16)
 80090f4:	18800215 	stw	r2,8(r3)
 80090f8:	b487883a 	add	r3,r22,r18
 80090fc:	e485c83a 	sub	r2,fp,r18
 8009100:	b8c00215 	stw	r3,8(r23)
 8009104:	10800054 	ori	r2,r2,1
 8009108:	18800115 	stw	r2,4(r3)
 800910c:	b0800117 	ldw	r2,4(r22)
 8009110:	a809883a 	mov	r4,r21
 8009114:	1080004c 	andi	r2,r2,1
 8009118:	90a4b03a 	or	r18,r18,r2
 800911c:	b4800115 	stw	r18,4(r22)
 8009120:	800efa00 	call	800efa0 <__malloc_unlock>
 8009124:	8805883a 	mov	r2,r17
 8009128:	003f4306 	br	8008e38 <__alt_data_end+0xf8008e38>
 800912c:	80c00217 	ldw	r3,8(r16)
 8009130:	a0c00215 	stw	r3,8(r20)
 8009134:	80c00317 	ldw	r3,12(r16)
 8009138:	a0c00315 	stw	r3,12(r20)
 800913c:	30801126 	beq	r6,r2,8009184 <_realloc_r+0x4c8>
 8009140:	a0800404 	addi	r2,r20,16
 8009144:	80c00404 	addi	r3,r16,16
 8009148:	003f7706 	br	8008f28 <__alt_data_end+0xf8008f28>
 800914c:	a13fff17 	ldw	r4,-4(r20)
 8009150:	00bfff04 	movi	r2,-4
 8009154:	8029883a 	mov	r20,r16
 8009158:	2084703a 	and	r2,r4,r2
 800915c:	88a3883a 	add	r17,r17,r2
 8009160:	003f2806 	br	8008e04 <__alt_data_end+0xf8008e04>
 8009164:	80800217 	ldw	r2,8(r16)
 8009168:	b0800415 	stw	r2,16(r22)
 800916c:	80800317 	ldw	r2,12(r16)
 8009170:	b0800515 	stw	r2,20(r22)
 8009174:	31000a26 	beq	r6,r4,80091a0 <_realloc_r+0x4e4>
 8009178:	b0c00604 	addi	r3,r22,24
 800917c:	84000404 	addi	r16,r16,16
 8009180:	003fa706 	br	8009020 <__alt_data_end+0xf8009020>
 8009184:	81000417 	ldw	r4,16(r16)
 8009188:	a0800604 	addi	r2,r20,24
 800918c:	80c00604 	addi	r3,r16,24
 8009190:	a1000415 	stw	r4,16(r20)
 8009194:	81000517 	ldw	r4,20(r16)
 8009198:	a1000515 	stw	r4,20(r20)
 800919c:	003f6206 	br	8008f28 <__alt_data_end+0xf8008f28>
 80091a0:	80800417 	ldw	r2,16(r16)
 80091a4:	84000604 	addi	r16,r16,24
 80091a8:	b0c00804 	addi	r3,r22,32
 80091ac:	b0800615 	stw	r2,24(r22)
 80091b0:	80bfff17 	ldw	r2,-4(r16)
 80091b4:	b0800715 	stw	r2,28(r22)
 80091b8:	003f9906 	br	8009020 <__alt_data_end+0xf8009020>
 80091bc:	8807883a 	mov	r3,r17
 80091c0:	003fc706 	br	80090e0 <__alt_data_end+0xf80090e0>
 80091c4:	8809883a 	mov	r4,r17
 80091c8:	800b883a 	mov	r5,r16
 80091cc:	8007a440 	call	8007a44 <memmove>
 80091d0:	003fc906 	br	80090f8 <__alt_data_end+0xf80090f8>
 80091d4:	80800217 	ldw	r2,8(r16)
 80091d8:	b0800415 	stw	r2,16(r22)
 80091dc:	80800317 	ldw	r2,12(r16)
 80091e0:	b0800515 	stw	r2,20(r22)
 80091e4:	31000726 	beq	r6,r4,8009204 <_realloc_r+0x548>
 80091e8:	b0c00604 	addi	r3,r22,24
 80091ec:	84000404 	addi	r16,r16,16
 80091f0:	003fbb06 	br	80090e0 <__alt_data_end+0xf80090e0>
 80091f4:	a809883a 	mov	r4,r21
 80091f8:	800efa00 	call	800efa0 <__malloc_unlock>
 80091fc:	0005883a 	mov	r2,zero
 8009200:	003f0d06 	br	8008e38 <__alt_data_end+0xf8008e38>
 8009204:	80800417 	ldw	r2,16(r16)
 8009208:	84000604 	addi	r16,r16,24
 800920c:	b0c00804 	addi	r3,r22,32
 8009210:	b0800615 	stw	r2,24(r22)
 8009214:	80bfff17 	ldw	r2,-4(r16)
 8009218:	b0800715 	stw	r2,28(r22)
 800921c:	003fb006 	br	80090e0 <__alt_data_end+0xf80090e0>

08009220 <__fpclassifyd>:
 8009220:	00a00034 	movhi	r2,32768
 8009224:	10bfffc4 	addi	r2,r2,-1
 8009228:	288a703a 	and	r5,r5,r2
 800922c:	28000726 	beq	r5,zero,800924c <__fpclassifyd+0x2c>
 8009230:	00bffc34 	movhi	r2,65520
 8009234:	2885883a 	add	r2,r5,r2
 8009238:	00dff834 	movhi	r3,32736
 800923c:	18ffffc4 	addi	r3,r3,-1
 8009240:	18800636 	bltu	r3,r2,800925c <__fpclassifyd+0x3c>
 8009244:	00800104 	movi	r2,4
 8009248:	f800283a 	ret
 800924c:	2005003a 	cmpeq	r2,r4,zero
 8009250:	00c000c4 	movi	r3,3
 8009254:	1885c83a 	sub	r2,r3,r2
 8009258:	f800283a 	ret
 800925c:	00800434 	movhi	r2,16
 8009260:	10bfffc4 	addi	r2,r2,-1
 8009264:	11400236 	bltu	r2,r5,8009270 <__fpclassifyd+0x50>
 8009268:	008000c4 	movi	r2,3
 800926c:	f800283a 	ret
 8009270:	009ffc34 	movhi	r2,32752
 8009274:	28800226 	beq	r5,r2,8009280 <__fpclassifyd+0x60>
 8009278:	0005883a 	mov	r2,zero
 800927c:	f800283a 	ret
 8009280:	2005003a 	cmpeq	r2,r4,zero
 8009284:	f800283a 	ret

08009288 <_sbrk_r>:
 8009288:	defffd04 	addi	sp,sp,-12
 800928c:	dc400115 	stw	r17,4(sp)
 8009290:	dc000015 	stw	r16,0(sp)
 8009294:	2023883a 	mov	r17,r4
 8009298:	04020074 	movhi	r16,2049
 800929c:	84148604 	addi	r16,r16,21016
 80092a0:	2809883a 	mov	r4,r5
 80092a4:	dfc00215 	stw	ra,8(sp)
 80092a8:	80000015 	stw	zero,0(r16)
 80092ac:	800f1880 	call	800f188 <sbrk>
 80092b0:	00ffffc4 	movi	r3,-1
 80092b4:	10c00526 	beq	r2,r3,80092cc <_sbrk_r+0x44>
 80092b8:	dfc00217 	ldw	ra,8(sp)
 80092bc:	dc400117 	ldw	r17,4(sp)
 80092c0:	dc000017 	ldw	r16,0(sp)
 80092c4:	dec00304 	addi	sp,sp,12
 80092c8:	f800283a 	ret
 80092cc:	80c00017 	ldw	r3,0(r16)
 80092d0:	183ff926 	beq	r3,zero,80092b8 <__alt_data_end+0xf80092b8>
 80092d4:	88c00015 	stw	r3,0(r17)
 80092d8:	dfc00217 	ldw	ra,8(sp)
 80092dc:	dc400117 	ldw	r17,4(sp)
 80092e0:	dc000017 	ldw	r16,0(sp)
 80092e4:	dec00304 	addi	sp,sp,12
 80092e8:	f800283a 	ret

080092ec <__sread>:
 80092ec:	defffe04 	addi	sp,sp,-8
 80092f0:	dc000015 	stw	r16,0(sp)
 80092f4:	2821883a 	mov	r16,r5
 80092f8:	2940038f 	ldh	r5,14(r5)
 80092fc:	dfc00115 	stw	ra,4(sp)
 8009300:	800b0640 	call	800b064 <_read_r>
 8009304:	10000716 	blt	r2,zero,8009324 <__sread+0x38>
 8009308:	80c01417 	ldw	r3,80(r16)
 800930c:	1887883a 	add	r3,r3,r2
 8009310:	80c01415 	stw	r3,80(r16)
 8009314:	dfc00117 	ldw	ra,4(sp)
 8009318:	dc000017 	ldw	r16,0(sp)
 800931c:	dec00204 	addi	sp,sp,8
 8009320:	f800283a 	ret
 8009324:	80c0030b 	ldhu	r3,12(r16)
 8009328:	18fbffcc 	andi	r3,r3,61439
 800932c:	80c0030d 	sth	r3,12(r16)
 8009330:	dfc00117 	ldw	ra,4(sp)
 8009334:	dc000017 	ldw	r16,0(sp)
 8009338:	dec00204 	addi	sp,sp,8
 800933c:	f800283a 	ret

08009340 <__seofread>:
 8009340:	0005883a 	mov	r2,zero
 8009344:	f800283a 	ret

08009348 <__swrite>:
 8009348:	2880030b 	ldhu	r2,12(r5)
 800934c:	defffb04 	addi	sp,sp,-20
 8009350:	dcc00315 	stw	r19,12(sp)
 8009354:	dc800215 	stw	r18,8(sp)
 8009358:	dc400115 	stw	r17,4(sp)
 800935c:	dc000015 	stw	r16,0(sp)
 8009360:	dfc00415 	stw	ra,16(sp)
 8009364:	10c0400c 	andi	r3,r2,256
 8009368:	2821883a 	mov	r16,r5
 800936c:	2027883a 	mov	r19,r4
 8009370:	3025883a 	mov	r18,r6
 8009374:	3823883a 	mov	r17,r7
 8009378:	18000526 	beq	r3,zero,8009390 <__swrite+0x48>
 800937c:	2940038f 	ldh	r5,14(r5)
 8009380:	000d883a 	mov	r6,zero
 8009384:	01c00084 	movi	r7,2
 8009388:	800aff80 	call	800aff8 <_lseek_r>
 800938c:	8080030b 	ldhu	r2,12(r16)
 8009390:	8140038f 	ldh	r5,14(r16)
 8009394:	10bbffcc 	andi	r2,r2,61439
 8009398:	9809883a 	mov	r4,r19
 800939c:	900d883a 	mov	r6,r18
 80093a0:	880f883a 	mov	r7,r17
 80093a4:	8080030d 	sth	r2,12(r16)
 80093a8:	dfc00417 	ldw	ra,16(sp)
 80093ac:	dcc00317 	ldw	r19,12(sp)
 80093b0:	dc800217 	ldw	r18,8(sp)
 80093b4:	dc400117 	ldw	r17,4(sp)
 80093b8:	dc000017 	ldw	r16,0(sp)
 80093bc:	dec00504 	addi	sp,sp,20
 80093c0:	800aa4c1 	jmpi	800aa4c <_write_r>

080093c4 <__sseek>:
 80093c4:	defffe04 	addi	sp,sp,-8
 80093c8:	dc000015 	stw	r16,0(sp)
 80093cc:	2821883a 	mov	r16,r5
 80093d0:	2940038f 	ldh	r5,14(r5)
 80093d4:	dfc00115 	stw	ra,4(sp)
 80093d8:	800aff80 	call	800aff8 <_lseek_r>
 80093dc:	00ffffc4 	movi	r3,-1
 80093e0:	10c00826 	beq	r2,r3,8009404 <__sseek+0x40>
 80093e4:	80c0030b 	ldhu	r3,12(r16)
 80093e8:	80801415 	stw	r2,80(r16)
 80093ec:	18c40014 	ori	r3,r3,4096
 80093f0:	80c0030d 	sth	r3,12(r16)
 80093f4:	dfc00117 	ldw	ra,4(sp)
 80093f8:	dc000017 	ldw	r16,0(sp)
 80093fc:	dec00204 	addi	sp,sp,8
 8009400:	f800283a 	ret
 8009404:	80c0030b 	ldhu	r3,12(r16)
 8009408:	18fbffcc 	andi	r3,r3,61439
 800940c:	80c0030d 	sth	r3,12(r16)
 8009410:	dfc00117 	ldw	ra,4(sp)
 8009414:	dc000017 	ldw	r16,0(sp)
 8009418:	dec00204 	addi	sp,sp,8
 800941c:	f800283a 	ret

08009420 <__sclose>:
 8009420:	2940038f 	ldh	r5,14(r5)
 8009424:	800aab81 	jmpi	800aab8 <_close_r>

08009428 <strcmp>:
 8009428:	2144b03a 	or	r2,r4,r5
 800942c:	108000cc 	andi	r2,r2,3
 8009430:	1000171e 	bne	r2,zero,8009490 <strcmp+0x68>
 8009434:	20800017 	ldw	r2,0(r4)
 8009438:	28c00017 	ldw	r3,0(r5)
 800943c:	10c0141e 	bne	r2,r3,8009490 <strcmp+0x68>
 8009440:	027fbff4 	movhi	r9,65279
 8009444:	4a7fbfc4 	addi	r9,r9,-257
 8009448:	1247883a 	add	r3,r2,r9
 800944c:	0084303a 	nor	r2,zero,r2
 8009450:	1884703a 	and	r2,r3,r2
 8009454:	02202074 	movhi	r8,32897
 8009458:	42202004 	addi	r8,r8,-32640
 800945c:	1204703a 	and	r2,r2,r8
 8009460:	10000226 	beq	r2,zero,800946c <strcmp+0x44>
 8009464:	00001706 	br	80094c4 <strcmp+0x9c>
 8009468:	3000161e 	bne	r6,zero,80094c4 <strcmp+0x9c>
 800946c:	21000104 	addi	r4,r4,4
 8009470:	20800017 	ldw	r2,0(r4)
 8009474:	29400104 	addi	r5,r5,4
 8009478:	28c00017 	ldw	r3,0(r5)
 800947c:	124f883a 	add	r7,r2,r9
 8009480:	008c303a 	nor	r6,zero,r2
 8009484:	398c703a 	and	r6,r7,r6
 8009488:	320c703a 	and	r6,r6,r8
 800948c:	10fff626 	beq	r2,r3,8009468 <__alt_data_end+0xf8009468>
 8009490:	20800007 	ldb	r2,0(r4)
 8009494:	1000051e 	bne	r2,zero,80094ac <strcmp+0x84>
 8009498:	00000606 	br	80094b4 <strcmp+0x8c>
 800949c:	21000044 	addi	r4,r4,1
 80094a0:	20800007 	ldb	r2,0(r4)
 80094a4:	29400044 	addi	r5,r5,1
 80094a8:	10000226 	beq	r2,zero,80094b4 <strcmp+0x8c>
 80094ac:	28c00007 	ldb	r3,0(r5)
 80094b0:	10fffa26 	beq	r2,r3,800949c <__alt_data_end+0xf800949c>
 80094b4:	20c00003 	ldbu	r3,0(r4)
 80094b8:	28800003 	ldbu	r2,0(r5)
 80094bc:	1885c83a 	sub	r2,r3,r2
 80094c0:	f800283a 	ret
 80094c4:	0005883a 	mov	r2,zero
 80094c8:	f800283a 	ret

080094cc <__sprint_r.part.0>:
 80094cc:	28801917 	ldw	r2,100(r5)
 80094d0:	defff604 	addi	sp,sp,-40
 80094d4:	dd800615 	stw	r22,24(sp)
 80094d8:	dcc00315 	stw	r19,12(sp)
 80094dc:	dfc00915 	stw	ra,36(sp)
 80094e0:	df000815 	stw	fp,32(sp)
 80094e4:	ddc00715 	stw	r23,28(sp)
 80094e8:	dd400515 	stw	r21,20(sp)
 80094ec:	dd000415 	stw	r20,16(sp)
 80094f0:	dc800215 	stw	r18,8(sp)
 80094f4:	dc400115 	stw	r17,4(sp)
 80094f8:	dc000015 	stw	r16,0(sp)
 80094fc:	1088000c 	andi	r2,r2,8192
 8009500:	2827883a 	mov	r19,r5
 8009504:	302d883a 	mov	r22,r6
 8009508:	10002d26 	beq	r2,zero,80095c0 <__sprint_r.part.0+0xf4>
 800950c:	30800217 	ldw	r2,8(r6)
 8009510:	35c00017 	ldw	r23,0(r6)
 8009514:	10002826 	beq	r2,zero,80095b8 <__sprint_r.part.0+0xec>
 8009518:	202b883a 	mov	r21,r4
 800951c:	bf000104 	addi	fp,r23,4
 8009520:	053fffc4 	movi	r20,-1
 8009524:	e4800017 	ldw	r18,0(fp)
 8009528:	bc400017 	ldw	r17,0(r23)
 800952c:	0021883a 	mov	r16,zero
 8009530:	9024d0ba 	srli	r18,r18,2
 8009534:	04800316 	blt	zero,r18,8009544 <__sprint_r.part.0+0x78>
 8009538:	00001806 	br	800959c <__sprint_r.part.0+0xd0>
 800953c:	8c400104 	addi	r17,r17,4
 8009540:	94001526 	beq	r18,r16,8009598 <__sprint_r.part.0+0xcc>
 8009544:	89400017 	ldw	r5,0(r17)
 8009548:	a809883a 	mov	r4,r21
 800954c:	980d883a 	mov	r6,r19
 8009550:	800ad300 	call	800ad30 <_fputwc_r>
 8009554:	84000044 	addi	r16,r16,1
 8009558:	153ff81e 	bne	r2,r20,800953c <__alt_data_end+0xf800953c>
 800955c:	a005883a 	mov	r2,r20
 8009560:	b0000215 	stw	zero,8(r22)
 8009564:	b0000115 	stw	zero,4(r22)
 8009568:	dfc00917 	ldw	ra,36(sp)
 800956c:	df000817 	ldw	fp,32(sp)
 8009570:	ddc00717 	ldw	r23,28(sp)
 8009574:	dd800617 	ldw	r22,24(sp)
 8009578:	dd400517 	ldw	r21,20(sp)
 800957c:	dd000417 	ldw	r20,16(sp)
 8009580:	dcc00317 	ldw	r19,12(sp)
 8009584:	dc800217 	ldw	r18,8(sp)
 8009588:	dc400117 	ldw	r17,4(sp)
 800958c:	dc000017 	ldw	r16,0(sp)
 8009590:	dec00a04 	addi	sp,sp,40
 8009594:	f800283a 	ret
 8009598:	b0800217 	ldw	r2,8(r22)
 800959c:	94a5883a 	add	r18,r18,r18
 80095a0:	94a5883a 	add	r18,r18,r18
 80095a4:	1485c83a 	sub	r2,r2,r18
 80095a8:	b0800215 	stw	r2,8(r22)
 80095ac:	bdc00204 	addi	r23,r23,8
 80095b0:	e7000204 	addi	fp,fp,8
 80095b4:	103fdb1e 	bne	r2,zero,8009524 <__alt_data_end+0xf8009524>
 80095b8:	0005883a 	mov	r2,zero
 80095bc:	003fe806 	br	8009560 <__alt_data_end+0xf8009560>
 80095c0:	80067f80 	call	80067f8 <__sfvwrite_r>
 80095c4:	003fe606 	br	8009560 <__alt_data_end+0xf8009560>

080095c8 <__sprint_r>:
 80095c8:	30c00217 	ldw	r3,8(r6)
 80095cc:	18000126 	beq	r3,zero,80095d4 <__sprint_r+0xc>
 80095d0:	80094cc1 	jmpi	80094cc <__sprint_r.part.0>
 80095d4:	30000115 	stw	zero,4(r6)
 80095d8:	0005883a 	mov	r2,zero
 80095dc:	f800283a 	ret

080095e0 <___vfiprintf_internal_r>:
 80095e0:	defec804 	addi	sp,sp,-1248
 80095e4:	dfc13715 	stw	ra,1244(sp)
 80095e8:	df013615 	stw	fp,1240(sp)
 80095ec:	ddc13515 	stw	r23,1236(sp)
 80095f0:	dd813415 	stw	r22,1232(sp)
 80095f4:	dd413315 	stw	r21,1228(sp)
 80095f8:	dd013215 	stw	r20,1224(sp)
 80095fc:	dcc13115 	stw	r19,1220(sp)
 8009600:	dc813015 	stw	r18,1216(sp)
 8009604:	dc412f15 	stw	r17,1212(sp)
 8009608:	dc012e15 	stw	r16,1208(sp)
 800960c:	d9012215 	stw	r4,1160(sp)
 8009610:	d9412015 	stw	r5,1152(sp)
 8009614:	d9c12315 	stw	r7,1164(sp)
 8009618:	3013883a 	mov	r9,r6
 800961c:	20000226 	beq	r4,zero,8009628 <___vfiprintf_internal_r+0x48>
 8009620:	20800e17 	ldw	r2,56(r4)
 8009624:	1000f926 	beq	r2,zero,8009a0c <___vfiprintf_internal_r+0x42c>
 8009628:	d8c12017 	ldw	r3,1152(sp)
 800962c:	1880030b 	ldhu	r2,12(r3)
 8009630:	1108000c 	andi	r4,r2,8192
 8009634:	1007883a 	mov	r3,r2
 8009638:	2000081e 	bne	r4,zero,800965c <___vfiprintf_internal_r+0x7c>
 800963c:	d9412017 	ldw	r5,1152(sp)
 8009640:	10c80014 	ori	r3,r2,8192
 8009644:	00b7ffc4 	movi	r2,-8193
 8009648:	29001917 	ldw	r4,100(r5)
 800964c:	28c0030d 	sth	r3,12(r5)
 8009650:	2088703a 	and	r4,r4,r2
 8009654:	29001915 	stw	r4,100(r5)
 8009658:	1805883a 	mov	r2,r3
 800965c:	1900020c 	andi	r4,r3,8
 8009660:	2000a726 	beq	r4,zero,8009900 <___vfiprintf_internal_r+0x320>
 8009664:	d9412017 	ldw	r5,1152(sp)
 8009668:	29000417 	ldw	r4,16(r5)
 800966c:	2000a426 	beq	r4,zero,8009900 <___vfiprintf_internal_r+0x320>
 8009670:	18c0068c 	andi	r3,r3,26
 8009674:	01000284 	movi	r4,10
 8009678:	1900ad26 	beq	r3,r4,8009930 <___vfiprintf_internal_r+0x350>
 800967c:	d90109c4 	addi	r4,sp,1063
 8009680:	d9410a04 	addi	r5,sp,1064
 8009684:	2905c83a 	sub	r2,r5,r4
 8009688:	d9011e15 	stw	r4,1144(sp)
 800968c:	d9411f15 	stw	r5,1148(sp)
 8009690:	dec11a15 	stw	sp,1128(sp)
 8009694:	d8011c15 	stw	zero,1136(sp)
 8009698:	d8011b15 	stw	zero,1132(sp)
 800969c:	d8012715 	stw	zero,1180(sp)
 80096a0:	d8012415 	stw	zero,1168(sp)
 80096a4:	d811883a 	mov	r8,sp
 80096a8:	04c20074 	movhi	r19,2049
 80096ac:	9cc6ba04 	addi	r19,r19,6888
 80096b0:	04020074 	movhi	r16,2049
 80096b4:	8406b604 	addi	r16,r16,6872
 80096b8:	d8812815 	stw	r2,1184(sp)
 80096bc:	48800007 	ldb	r2,0(r9)
 80096c0:	10040126 	beq	r2,zero,800a6c8 <___vfiprintf_internal_r+0x10e8>
 80096c4:	00c00944 	movi	r3,37
 80096c8:	4829883a 	mov	r20,r9
 80096cc:	10c0021e 	bne	r2,r3,80096d8 <___vfiprintf_internal_r+0xf8>
 80096d0:	00001606 	br	800972c <___vfiprintf_internal_r+0x14c>
 80096d4:	10c00326 	beq	r2,r3,80096e4 <___vfiprintf_internal_r+0x104>
 80096d8:	a5000044 	addi	r20,r20,1
 80096dc:	a0800007 	ldb	r2,0(r20)
 80096e0:	103ffc1e 	bne	r2,zero,80096d4 <__alt_data_end+0xf80096d4>
 80096e4:	a263c83a 	sub	r17,r20,r9
 80096e8:	88001026 	beq	r17,zero,800972c <___vfiprintf_internal_r+0x14c>
 80096ec:	d8c11c17 	ldw	r3,1136(sp)
 80096f0:	d8811b17 	ldw	r2,1132(sp)
 80096f4:	42400015 	stw	r9,0(r8)
 80096f8:	88c7883a 	add	r3,r17,r3
 80096fc:	10800044 	addi	r2,r2,1
 8009700:	44400115 	stw	r17,4(r8)
 8009704:	d8c11c15 	stw	r3,1136(sp)
 8009708:	d8811b15 	stw	r2,1132(sp)
 800970c:	010001c4 	movi	r4,7
 8009710:	2080760e 	bge	r4,r2,80098ec <___vfiprintf_internal_r+0x30c>
 8009714:	1803b41e 	bne	r3,zero,800a5e8 <___vfiprintf_internal_r+0x1008>
 8009718:	d8c12417 	ldw	r3,1168(sp)
 800971c:	d8011b15 	stw	zero,1132(sp)
 8009720:	d811883a 	mov	r8,sp
 8009724:	1c47883a 	add	r3,r3,r17
 8009728:	d8c12415 	stw	r3,1168(sp)
 800972c:	a0800007 	ldb	r2,0(r20)
 8009730:	1002dc26 	beq	r2,zero,800a2a4 <___vfiprintf_internal_r+0xcc4>
 8009734:	04bfffc4 	movi	r18,-1
 8009738:	a2400044 	addi	r9,r20,1
 800973c:	a0c00047 	ldb	r3,1(r20)
 8009740:	d8011d85 	stb	zero,1142(sp)
 8009744:	002d883a 	mov	r22,zero
 8009748:	d8012115 	stw	zero,1156(sp)
 800974c:	0023883a 	mov	r17,zero
 8009750:	05001604 	movi	r20,88
 8009754:	05400244 	movi	r21,9
 8009758:	402f883a 	mov	r23,r8
 800975c:	900d883a 	mov	r6,r18
 8009760:	4a400044 	addi	r9,r9,1
 8009764:	18bff804 	addi	r2,r3,-32
 8009768:	a0828736 	bltu	r20,r2,800a188 <___vfiprintf_internal_r+0xba8>
 800976c:	1085883a 	add	r2,r2,r2
 8009770:	1085883a 	add	r2,r2,r2
 8009774:	01020074 	movhi	r4,2049
 8009778:	2125e204 	addi	r4,r4,-26744
 800977c:	1105883a 	add	r2,r2,r4
 8009780:	10800017 	ldw	r2,0(r2)
 8009784:	1000683a 	jmp	r2
 8009788:	08009ee8 	cmpgeui	zero,at,635
 800978c:	0800a188 	cmpgei	zero,at,646
 8009790:	0800a188 	cmpgei	zero,at,646
 8009794:	08009f04 	addi	zero,at,636
 8009798:	0800a188 	cmpgei	zero,at,646
 800979c:	0800a188 	cmpgei	zero,at,646
 80097a0:	0800a188 	cmpgei	zero,at,646
 80097a4:	0800a188 	cmpgei	zero,at,646
 80097a8:	0800a188 	cmpgei	zero,at,646
 80097ac:	0800a188 	cmpgei	zero,at,646
 80097b0:	08009f98 	cmpnei	zero,at,638
 80097b4:	08009fc0 	call	8009fc <__reset-0x77ff604>
 80097b8:	0800a188 	cmpgei	zero,at,646
 80097bc:	08009a2c 	andhi	zero,at,616
 80097c0:	08009fcc 	andi	zero,at,639
 80097c4:	0800a188 	cmpgei	zero,at,646
 80097c8:	08009a38 	rdprs	zero,at,616
 80097cc:	08009a44 	addi	zero,at,617
 80097d0:	08009a44 	addi	zero,at,617
 80097d4:	08009a44 	addi	zero,at,617
 80097d8:	08009a44 	addi	zero,at,617
 80097dc:	08009a44 	addi	zero,at,617
 80097e0:	08009a44 	addi	zero,at,617
 80097e4:	08009a44 	addi	zero,at,617
 80097e8:	08009a44 	addi	zero,at,617
 80097ec:	08009a44 	addi	zero,at,617
 80097f0:	0800a188 	cmpgei	zero,at,646
 80097f4:	0800a188 	cmpgei	zero,at,646
 80097f8:	0800a188 	cmpgei	zero,at,646
 80097fc:	0800a188 	cmpgei	zero,at,646
 8009800:	0800a188 	cmpgei	zero,at,646
 8009804:	0800a188 	cmpgei	zero,at,646
 8009808:	0800a188 	cmpgei	zero,at,646
 800980c:	0800a188 	cmpgei	zero,at,646
 8009810:	0800a188 	cmpgei	zero,at,646
 8009814:	0800a188 	cmpgei	zero,at,646
 8009818:	08009a8c 	andi	zero,at,618
 800981c:	0800a188 	cmpgei	zero,at,646
 8009820:	0800a188 	cmpgei	zero,at,646
 8009824:	0800a188 	cmpgei	zero,at,646
 8009828:	0800a188 	cmpgei	zero,at,646
 800982c:	0800a188 	cmpgei	zero,at,646
 8009830:	0800a188 	cmpgei	zero,at,646
 8009834:	0800a188 	cmpgei	zero,at,646
 8009838:	0800a188 	cmpgei	zero,at,646
 800983c:	0800a188 	cmpgei	zero,at,646
 8009840:	0800a188 	cmpgei	zero,at,646
 8009844:	08009de0 	cmpeqi	zero,at,631
 8009848:	0800a188 	cmpgei	zero,at,646
 800984c:	0800a188 	cmpgei	zero,at,646
 8009850:	0800a188 	cmpgei	zero,at,646
 8009854:	0800a188 	cmpgei	zero,at,646
 8009858:	0800a188 	cmpgei	zero,at,646
 800985c:	08009e24 	muli	zero,at,632
 8009860:	0800a188 	cmpgei	zero,at,646
 8009864:	0800a188 	cmpgei	zero,at,646
 8009868:	08009e5c 	xori	zero,at,633
 800986c:	0800a188 	cmpgei	zero,at,646
 8009870:	0800a188 	cmpgei	zero,at,646
 8009874:	0800a188 	cmpgei	zero,at,646
 8009878:	0800a188 	cmpgei	zero,at,646
 800987c:	0800a188 	cmpgei	zero,at,646
 8009880:	0800a188 	cmpgei	zero,at,646
 8009884:	0800a188 	cmpgei	zero,at,646
 8009888:	0800a188 	cmpgei	zero,at,646
 800988c:	0800a188 	cmpgei	zero,at,646
 8009890:	0800a188 	cmpgei	zero,at,646
 8009894:	08009eb8 	rdprs	zero,at,634
 8009898:	0800a02c 	andhi	zero,at,640
 800989c:	0800a188 	cmpgei	zero,at,646
 80098a0:	0800a188 	cmpgei	zero,at,646
 80098a4:	0800a188 	cmpgei	zero,at,646
 80098a8:	0800a020 	cmpeqi	zero,at,640
 80098ac:	0800a02c 	andhi	zero,at,640
 80098b0:	0800a188 	cmpgei	zero,at,646
 80098b4:	0800a188 	cmpgei	zero,at,646
 80098b8:	08009f10 	cmplti	zero,at,636
 80098bc:	0800a188 	cmpgei	zero,at,646
 80098c0:	08009f28 	cmpgeui	zero,at,636
 80098c4:	08009f60 	cmpeqi	zero,at,637
 80098c8:	0800a140 	call	800a14 <__reset-0x77ff5ec>
 80098cc:	0800a064 	muli	zero,at,641
 80098d0:	0800a188 	cmpgei	zero,at,646
 80098d4:	0800a070 	cmpltui	zero,at,641
 80098d8:	0800a188 	cmpgei	zero,at,646
 80098dc:	0800a0c8 	cmpgei	zero,at,643
 80098e0:	0800a188 	cmpgei	zero,at,646
 80098e4:	0800a188 	cmpgei	zero,at,646
 80098e8:	0800a100 	call	800a10 <__reset-0x77ff5f0>
 80098ec:	42000204 	addi	r8,r8,8
 80098f0:	d8c12417 	ldw	r3,1168(sp)
 80098f4:	1c47883a 	add	r3,r3,r17
 80098f8:	d8c12415 	stw	r3,1168(sp)
 80098fc:	003f8b06 	br	800972c <__alt_data_end+0xf800972c>
 8009900:	d9012217 	ldw	r4,1160(sp)
 8009904:	d9412017 	ldw	r5,1152(sp)
 8009908:	da412d15 	stw	r9,1204(sp)
 800990c:	80044380 	call	8004438 <__swsetup_r>
 8009910:	da412d17 	ldw	r9,1204(sp)
 8009914:	1000301e 	bne	r2,zero,80099d8 <___vfiprintf_internal_r+0x3f8>
 8009918:	d8c12017 	ldw	r3,1152(sp)
 800991c:	01000284 	movi	r4,10
 8009920:	1880030b 	ldhu	r2,12(r3)
 8009924:	1007883a 	mov	r3,r2
 8009928:	18c0068c 	andi	r3,r3,26
 800992c:	193f531e 	bne	r3,r4,800967c <__alt_data_end+0xf800967c>
 8009930:	d9012017 	ldw	r4,1152(sp)
 8009934:	20c0038b 	ldhu	r3,14(r4)
 8009938:	193fffcc 	andi	r4,r3,65535
 800993c:	2120001c 	xori	r4,r4,32768
 8009940:	21200004 	addi	r4,r4,-32768
 8009944:	203f4d16 	blt	r4,zero,800967c <__alt_data_end+0xf800967c>
 8009948:	d9412017 	ldw	r5,1152(sp)
 800994c:	d9012217 	ldw	r4,1160(sp)
 8009950:	d9c12317 	ldw	r7,1164(sp)
 8009954:	2b001917 	ldw	r12,100(r5)
 8009958:	2ac00717 	ldw	r11,28(r5)
 800995c:	2a800917 	ldw	r10,36(r5)
 8009960:	02010004 	movi	r8,1024
 8009964:	10bfff4c 	andi	r2,r2,65533
 8009968:	da0b883a 	add	r5,sp,r8
 800996c:	480d883a 	mov	r6,r9
 8009970:	d881030d 	sth	r2,1036(sp)
 8009974:	db011915 	stw	r12,1124(sp)
 8009978:	d8c1038d 	sth	r3,1038(sp)
 800997c:	dac10715 	stw	r11,1052(sp)
 8009980:	da810915 	stw	r10,1060(sp)
 8009984:	dec10015 	stw	sp,1024(sp)
 8009988:	dec10415 	stw	sp,1040(sp)
 800998c:	da010215 	stw	r8,1032(sp)
 8009990:	da010515 	stw	r8,1044(sp)
 8009994:	d8010615 	stw	zero,1048(sp)
 8009998:	80095e00 	call	80095e0 <___vfiprintf_internal_r>
 800999c:	1021883a 	mov	r16,r2
 80099a0:	10000416 	blt	r2,zero,80099b4 <___vfiprintf_internal_r+0x3d4>
 80099a4:	d9012217 	ldw	r4,1160(sp)
 80099a8:	d9410004 	addi	r5,sp,1024
 80099ac:	8005dd40 	call	8005dd4 <_fflush_r>
 80099b0:	10040b1e 	bne	r2,zero,800a9e0 <___vfiprintf_internal_r+0x1400>
 80099b4:	d881030b 	ldhu	r2,1036(sp)
 80099b8:	1080100c 	andi	r2,r2,64
 80099bc:	10000426 	beq	r2,zero,80099d0 <___vfiprintf_internal_r+0x3f0>
 80099c0:	d8c12017 	ldw	r3,1152(sp)
 80099c4:	1880030b 	ldhu	r2,12(r3)
 80099c8:	10801014 	ori	r2,r2,64
 80099cc:	1880030d 	sth	r2,12(r3)
 80099d0:	8005883a 	mov	r2,r16
 80099d4:	00000106 	br	80099dc <___vfiprintf_internal_r+0x3fc>
 80099d8:	00bfffc4 	movi	r2,-1
 80099dc:	dfc13717 	ldw	ra,1244(sp)
 80099e0:	df013617 	ldw	fp,1240(sp)
 80099e4:	ddc13517 	ldw	r23,1236(sp)
 80099e8:	dd813417 	ldw	r22,1232(sp)
 80099ec:	dd413317 	ldw	r21,1228(sp)
 80099f0:	dd013217 	ldw	r20,1224(sp)
 80099f4:	dcc13117 	ldw	r19,1220(sp)
 80099f8:	dc813017 	ldw	r18,1216(sp)
 80099fc:	dc412f17 	ldw	r17,1212(sp)
 8009a00:	dc012e17 	ldw	r16,1208(sp)
 8009a04:	dec13804 	addi	sp,sp,1248
 8009a08:	f800283a 	ret
 8009a0c:	d9812d15 	stw	r6,1204(sp)
 8009a10:	80060f40 	call	80060f4 <__sinit>
 8009a14:	da412d17 	ldw	r9,1204(sp)
 8009a18:	003f0306 	br	8009628 <__alt_data_end+0xf8009628>
 8009a1c:	d9412117 	ldw	r5,1156(sp)
 8009a20:	d8812315 	stw	r2,1164(sp)
 8009a24:	014bc83a 	sub	r5,zero,r5
 8009a28:	d9412115 	stw	r5,1156(sp)
 8009a2c:	8c400114 	ori	r17,r17,4
 8009a30:	48c00007 	ldb	r3,0(r9)
 8009a34:	003f4a06 	br	8009760 <__alt_data_end+0xf8009760>
 8009a38:	8c402014 	ori	r17,r17,128
 8009a3c:	48c00007 	ldb	r3,0(r9)
 8009a40:	003f4706 	br	8009760 <__alt_data_end+0xf8009760>
 8009a44:	4825883a 	mov	r18,r9
 8009a48:	d8012115 	stw	zero,1156(sp)
 8009a4c:	1f3ff404 	addi	fp,r3,-48
 8009a50:	00000106 	br	8009a58 <___vfiprintf_internal_r+0x478>
 8009a54:	1025883a 	mov	r18,r2
 8009a58:	d9012117 	ldw	r4,1156(sp)
 8009a5c:	01400284 	movi	r5,10
 8009a60:	d9812b15 	stw	r6,1196(sp)
 8009a64:	800c2080 	call	800c208 <__mulsi3>
 8009a68:	90c00007 	ldb	r3,0(r18)
 8009a6c:	1739883a 	add	fp,r2,fp
 8009a70:	df012115 	stw	fp,1156(sp)
 8009a74:	90800044 	addi	r2,r18,1
 8009a78:	1f3ff404 	addi	fp,r3,-48
 8009a7c:	1013883a 	mov	r9,r2
 8009a80:	d9812b17 	ldw	r6,1196(sp)
 8009a84:	af3ff32e 	bgeu	r21,fp,8009a54 <__alt_data_end+0xf8009a54>
 8009a88:	003f3606 	br	8009764 <__alt_data_end+0xf8009764>
 8009a8c:	8c400414 	ori	r17,r17,16
 8009a90:	dd811d85 	stb	r22,1142(sp)
 8009a94:	8880080c 	andi	r2,r17,32
 8009a98:	b811883a 	mov	r8,r23
 8009a9c:	3025883a 	mov	r18,r6
 8009aa0:	10016726 	beq	r2,zero,800a040 <___vfiprintf_internal_r+0xa60>
 8009aa4:	d8c12317 	ldw	r3,1164(sp)
 8009aa8:	18800117 	ldw	r2,4(r3)
 8009aac:	1d000017 	ldw	r20,0(r3)
 8009ab0:	18c00204 	addi	r3,r3,8
 8009ab4:	d8c12315 	stw	r3,1164(sp)
 8009ab8:	102b883a 	mov	r21,r2
 8009abc:	10030416 	blt	r2,zero,800a6d0 <___vfiprintf_internal_r+0x10f0>
 8009ac0:	dd811d83 	ldbu	r22,1142(sp)
 8009ac4:	900f883a 	mov	r7,r18
 8009ac8:	00800044 	movi	r2,1
 8009acc:	a548b03a 	or	r4,r20,r21
 8009ad0:	90000216 	blt	r18,zero,8009adc <___vfiprintf_internal_r+0x4fc>
 8009ad4:	00ffdfc4 	movi	r3,-129
 8009ad8:	88e2703a 	and	r17,r17,r3
 8009adc:	10803fcc 	andi	r2,r2,255
 8009ae0:	2001db1e 	bne	r4,zero,800a250 <___vfiprintf_internal_r+0xc70>
 8009ae4:	9001da1e 	bne	r18,zero,800a250 <___vfiprintf_internal_r+0xc70>
 8009ae8:	1002ab1e 	bne	r2,zero,800a598 <___vfiprintf_internal_r+0xfb8>
 8009aec:	8880004c 	andi	r2,r17,1
 8009af0:	1002a926 	beq	r2,zero,800a598 <___vfiprintf_internal_r+0xfb8>
 8009af4:	d9c12817 	ldw	r7,1184(sp)
 8009af8:	00800c04 	movi	r2,48
 8009afc:	d88109c5 	stb	r2,1063(sp)
 8009b00:	ddc109c4 	addi	r23,sp,1063
 8009b04:	3829883a 	mov	r20,r7
 8009b08:	3c80010e 	bge	r7,r18,8009b10 <___vfiprintf_internal_r+0x530>
 8009b0c:	9029883a 	mov	r20,r18
 8009b10:	b5803fcc 	andi	r22,r22,255
 8009b14:	b580201c 	xori	r22,r22,128
 8009b18:	b5bfe004 	addi	r22,r22,-128
 8009b1c:	b0000126 	beq	r22,zero,8009b24 <___vfiprintf_internal_r+0x544>
 8009b20:	a5000044 	addi	r20,r20,1
 8009b24:	8a80008c 	andi	r10,r17,2
 8009b28:	50000126 	beq	r10,zero,8009b30 <___vfiprintf_internal_r+0x550>
 8009b2c:	a5000084 	addi	r20,r20,2
 8009b30:	8d40210c 	andi	r21,r17,132
 8009b34:	a801aa1e 	bne	r21,zero,800a1e0 <___vfiprintf_internal_r+0xc00>
 8009b38:	d8c12117 	ldw	r3,1156(sp)
 8009b3c:	1d2dc83a 	sub	r22,r3,r20
 8009b40:	0581a70e 	bge	zero,r22,800a1e0 <___vfiprintf_internal_r+0xc00>
 8009b44:	07000404 	movi	fp,16
 8009b48:	d8c11c17 	ldw	r3,1136(sp)
 8009b4c:	e583780e 	bge	fp,r22,800a930 <___vfiprintf_internal_r+0x1350>
 8009b50:	01420074 	movhi	r5,2049
 8009b54:	2946ba04 	addi	r5,r5,6888
 8009b58:	dc412615 	stw	r17,1176(sp)
 8009b5c:	d9011b17 	ldw	r4,1132(sp)
 8009b60:	b023883a 	mov	r17,r22
 8009b64:	d9412515 	stw	r5,1172(sp)
 8009b68:	030001c4 	movi	r12,7
 8009b6c:	d9c12915 	stw	r7,1188(sp)
 8009b70:	da812a15 	stw	r10,1192(sp)
 8009b74:	482d883a 	mov	r22,r9
 8009b78:	00000506 	br	8009b90 <___vfiprintf_internal_r+0x5b0>
 8009b7c:	21400084 	addi	r5,r4,2
 8009b80:	42000204 	addi	r8,r8,8
 8009b84:	1009883a 	mov	r4,r2
 8009b88:	8c7ffc04 	addi	r17,r17,-16
 8009b8c:	e4400d0e 	bge	fp,r17,8009bc4 <___vfiprintf_internal_r+0x5e4>
 8009b90:	18c00404 	addi	r3,r3,16
 8009b94:	20800044 	addi	r2,r4,1
 8009b98:	44c00015 	stw	r19,0(r8)
 8009b9c:	47000115 	stw	fp,4(r8)
 8009ba0:	d8c11c15 	stw	r3,1136(sp)
 8009ba4:	d8811b15 	stw	r2,1132(sp)
 8009ba8:	60bff40e 	bge	r12,r2,8009b7c <__alt_data_end+0xf8009b7c>
 8009bac:	1801801e 	bne	r3,zero,800a1b0 <___vfiprintf_internal_r+0xbd0>
 8009bb0:	8c7ffc04 	addi	r17,r17,-16
 8009bb4:	0009883a 	mov	r4,zero
 8009bb8:	01400044 	movi	r5,1
 8009bbc:	d811883a 	mov	r8,sp
 8009bc0:	e47ff316 	blt	fp,r17,8009b90 <__alt_data_end+0xf8009b90>
 8009bc4:	b013883a 	mov	r9,r22
 8009bc8:	d9c12917 	ldw	r7,1188(sp)
 8009bcc:	882d883a 	mov	r22,r17
 8009bd0:	da812a17 	ldw	r10,1192(sp)
 8009bd4:	dc412617 	ldw	r17,1176(sp)
 8009bd8:	d8812517 	ldw	r2,1172(sp)
 8009bdc:	b0c7883a 	add	r3,r22,r3
 8009be0:	45800115 	stw	r22,4(r8)
 8009be4:	40800015 	stw	r2,0(r8)
 8009be8:	d8c11c15 	stw	r3,1136(sp)
 8009bec:	d9411b15 	stw	r5,1132(sp)
 8009bf0:	008001c4 	movi	r2,7
 8009bf4:	11426a16 	blt	r2,r5,800a5a0 <___vfiprintf_internal_r+0xfc0>
 8009bf8:	d9011d87 	ldb	r4,1142(sp)
 8009bfc:	42000204 	addi	r8,r8,8
 8009c00:	28800044 	addi	r2,r5,1
 8009c04:	20017b1e 	bne	r4,zero,800a1f4 <___vfiprintf_internal_r+0xc14>
 8009c08:	50000c26 	beq	r10,zero,8009c3c <___vfiprintf_internal_r+0x65c>
 8009c0c:	d9011d04 	addi	r4,sp,1140
 8009c10:	18c00084 	addi	r3,r3,2
 8009c14:	41000015 	stw	r4,0(r8)
 8009c18:	01000084 	movi	r4,2
 8009c1c:	41000115 	stw	r4,4(r8)
 8009c20:	d8c11c15 	stw	r3,1136(sp)
 8009c24:	d8811b15 	stw	r2,1132(sp)
 8009c28:	010001c4 	movi	r4,7
 8009c2c:	20821716 	blt	r4,r2,800a48c <___vfiprintf_internal_r+0xeac>
 8009c30:	100b883a 	mov	r5,r2
 8009c34:	42000204 	addi	r8,r8,8
 8009c38:	10800044 	addi	r2,r2,1
 8009c3c:	01002004 	movi	r4,128
 8009c40:	a901d126 	beq	r21,r4,800a388 <___vfiprintf_internal_r+0xda8>
 8009c44:	91e5c83a 	sub	r18,r18,r7
 8009c48:	0480290e 	bge	zero,r18,8009cf0 <___vfiprintf_internal_r+0x710>
 8009c4c:	05800404 	movi	r22,16
 8009c50:	05420074 	movhi	r21,2049
 8009c54:	ad46b604 	addi	r21,r21,6872
 8009c58:	b4801c0e 	bge	r22,r18,8009ccc <___vfiprintf_internal_r+0x6ec>
 8009c5c:	dc412515 	stw	r17,1172(sp)
 8009c60:	070001c4 	movi	fp,7
 8009c64:	9023883a 	mov	r17,r18
 8009c68:	d9c12615 	stw	r7,1176(sp)
 8009c6c:	4825883a 	mov	r18,r9
 8009c70:	00000506 	br	8009c88 <___vfiprintf_internal_r+0x6a8>
 8009c74:	28800084 	addi	r2,r5,2
 8009c78:	42000204 	addi	r8,r8,8
 8009c7c:	200b883a 	mov	r5,r4
 8009c80:	8c7ffc04 	addi	r17,r17,-16
 8009c84:	b4400d0e 	bge	r22,r17,8009cbc <___vfiprintf_internal_r+0x6dc>
 8009c88:	18c00404 	addi	r3,r3,16
 8009c8c:	29000044 	addi	r4,r5,1
 8009c90:	44000015 	stw	r16,0(r8)
 8009c94:	45800115 	stw	r22,4(r8)
 8009c98:	d8c11c15 	stw	r3,1136(sp)
 8009c9c:	d9011b15 	stw	r4,1132(sp)
 8009ca0:	e13ff40e 	bge	fp,r4,8009c74 <__alt_data_end+0xf8009c74>
 8009ca4:	1801601e 	bne	r3,zero,800a228 <___vfiprintf_internal_r+0xc48>
 8009ca8:	8c7ffc04 	addi	r17,r17,-16
 8009cac:	000b883a 	mov	r5,zero
 8009cb0:	00800044 	movi	r2,1
 8009cb4:	d811883a 	mov	r8,sp
 8009cb8:	b47ff316 	blt	r22,r17,8009c88 <__alt_data_end+0xf8009c88>
 8009cbc:	9013883a 	mov	r9,r18
 8009cc0:	d9c12617 	ldw	r7,1176(sp)
 8009cc4:	8825883a 	mov	r18,r17
 8009cc8:	dc412517 	ldw	r17,1172(sp)
 8009ccc:	1c87883a 	add	r3,r3,r18
 8009cd0:	45400015 	stw	r21,0(r8)
 8009cd4:	44800115 	stw	r18,4(r8)
 8009cd8:	d8c11c15 	stw	r3,1136(sp)
 8009cdc:	d8811b15 	stw	r2,1132(sp)
 8009ce0:	010001c4 	movi	r4,7
 8009ce4:	20819e16 	blt	r4,r2,800a360 <___vfiprintf_internal_r+0xd80>
 8009ce8:	42000204 	addi	r8,r8,8
 8009cec:	10800044 	addi	r2,r2,1
 8009cf0:	38c7883a 	add	r3,r7,r3
 8009cf4:	45c00015 	stw	r23,0(r8)
 8009cf8:	41c00115 	stw	r7,4(r8)
 8009cfc:	d8c11c15 	stw	r3,1136(sp)
 8009d00:	d8811b15 	stw	r2,1132(sp)
 8009d04:	010001c4 	movi	r4,7
 8009d08:	20819d0e 	bge	r4,r2,800a380 <___vfiprintf_internal_r+0xda0>
 8009d0c:	1802291e 	bne	r3,zero,800a5b4 <___vfiprintf_internal_r+0xfd4>
 8009d10:	d8011b15 	stw	zero,1132(sp)
 8009d14:	d811883a 	mov	r8,sp
 8009d18:	8c40010c 	andi	r17,r17,4
 8009d1c:	88017526 	beq	r17,zero,800a2f4 <___vfiprintf_internal_r+0xd14>
 8009d20:	d9412117 	ldw	r5,1156(sp)
 8009d24:	2d23c83a 	sub	r17,r5,r20
 8009d28:	0441720e 	bge	zero,r17,800a2f4 <___vfiprintf_internal_r+0xd14>
 8009d2c:	04800404 	movi	r18,16
 8009d30:	9443170e 	bge	r18,r17,800a990 <___vfiprintf_internal_r+0x13b0>
 8009d34:	01420074 	movhi	r5,2049
 8009d38:	2946ba04 	addi	r5,r5,6888
 8009d3c:	d9011b17 	ldw	r4,1132(sp)
 8009d40:	d9412515 	stw	r5,1172(sp)
 8009d44:	058001c4 	movi	r22,7
 8009d48:	dd412217 	ldw	r21,1160(sp)
 8009d4c:	ddc12017 	ldw	r23,1152(sp)
 8009d50:	4839883a 	mov	fp,r9
 8009d54:	00000506 	br	8009d6c <___vfiprintf_internal_r+0x78c>
 8009d58:	21400084 	addi	r5,r4,2
 8009d5c:	42000204 	addi	r8,r8,8
 8009d60:	1009883a 	mov	r4,r2
 8009d64:	8c7ffc04 	addi	r17,r17,-16
 8009d68:	94400d0e 	bge	r18,r17,8009da0 <___vfiprintf_internal_r+0x7c0>
 8009d6c:	18c00404 	addi	r3,r3,16
 8009d70:	20800044 	addi	r2,r4,1
 8009d74:	44c00015 	stw	r19,0(r8)
 8009d78:	44800115 	stw	r18,4(r8)
 8009d7c:	d8c11c15 	stw	r3,1136(sp)
 8009d80:	d8811b15 	stw	r2,1132(sp)
 8009d84:	b0bff40e 	bge	r22,r2,8009d58 <__alt_data_end+0xf8009d58>
 8009d88:	18016b1e 	bne	r3,zero,800a338 <___vfiprintf_internal_r+0xd58>
 8009d8c:	8c7ffc04 	addi	r17,r17,-16
 8009d90:	0009883a 	mov	r4,zero
 8009d94:	01400044 	movi	r5,1
 8009d98:	d811883a 	mov	r8,sp
 8009d9c:	947ff316 	blt	r18,r17,8009d6c <__alt_data_end+0xf8009d6c>
 8009da0:	e013883a 	mov	r9,fp
 8009da4:	d8812517 	ldw	r2,1172(sp)
 8009da8:	1c47883a 	add	r3,r3,r17
 8009dac:	44400115 	stw	r17,4(r8)
 8009db0:	40800015 	stw	r2,0(r8)
 8009db4:	d8c11c15 	stw	r3,1136(sp)
 8009db8:	d9411b15 	stw	r5,1132(sp)
 8009dbc:	008001c4 	movi	r2,7
 8009dc0:	11414c0e 	bge	r2,r5,800a2f4 <___vfiprintf_internal_r+0xd14>
 8009dc4:	1801431e 	bne	r3,zero,800a2d4 <___vfiprintf_internal_r+0xcf4>
 8009dc8:	d8c12117 	ldw	r3,1156(sp)
 8009dcc:	a0c28e16 	blt	r20,r3,800a808 <___vfiprintf_internal_r+0x1228>
 8009dd0:	d9012417 	ldw	r4,1168(sp)
 8009dd4:	2509883a 	add	r4,r4,r20
 8009dd8:	d9012415 	stw	r4,1168(sp)
 8009ddc:	00015306 	br	800a32c <___vfiprintf_internal_r+0xd4c>
 8009de0:	8c400414 	ori	r17,r17,16
 8009de4:	8880080c 	andi	r2,r17,32
 8009de8:	b811883a 	mov	r8,r23
 8009dec:	3025883a 	mov	r18,r6
 8009df0:	10005f26 	beq	r2,zero,8009f70 <___vfiprintf_internal_r+0x990>
 8009df4:	d8812317 	ldw	r2,1164(sp)
 8009df8:	d8c12317 	ldw	r3,1164(sp)
 8009dfc:	15000017 	ldw	r20,0(r2)
 8009e00:	15400117 	ldw	r21,4(r2)
 8009e04:	18c00204 	addi	r3,r3,8
 8009e08:	0005883a 	mov	r2,zero
 8009e0c:	d8c12315 	stw	r3,1164(sp)
 8009e10:	a548b03a 	or	r4,r20,r21
 8009e14:	d8011d85 	stb	zero,1142(sp)
 8009e18:	900f883a 	mov	r7,r18
 8009e1c:	002d883a 	mov	r22,zero
 8009e20:	003f2b06 	br	8009ad0 <__alt_data_end+0xf8009ad0>
 8009e24:	8c400414 	ori	r17,r17,16
 8009e28:	8880080c 	andi	r2,r17,32
 8009e2c:	b811883a 	mov	r8,r23
 8009e30:	3025883a 	mov	r18,r6
 8009e34:	1000a826 	beq	r2,zero,800a0d8 <___vfiprintf_internal_r+0xaf8>
 8009e38:	d8812317 	ldw	r2,1164(sp)
 8009e3c:	d8c12317 	ldw	r3,1164(sp)
 8009e40:	15000017 	ldw	r20,0(r2)
 8009e44:	15400117 	ldw	r21,4(r2)
 8009e48:	18c00204 	addi	r3,r3,8
 8009e4c:	00800044 	movi	r2,1
 8009e50:	d8c12315 	stw	r3,1164(sp)
 8009e54:	a548b03a 	or	r4,r20,r21
 8009e58:	003fee06 	br	8009e14 <__alt_data_end+0xf8009e14>
 8009e5c:	01420074 	movhi	r5,2049
 8009e60:	29465004 	addi	r5,r5,6464
 8009e64:	dd811d85 	stb	r22,1142(sp)
 8009e68:	d9412715 	stw	r5,1180(sp)
 8009e6c:	8880080c 	andi	r2,r17,32
 8009e70:	b811883a 	mov	r8,r23
 8009e74:	3025883a 	mov	r18,r6
 8009e78:	1000a926 	beq	r2,zero,800a120 <___vfiprintf_internal_r+0xb40>
 8009e7c:	d9412317 	ldw	r5,1164(sp)
 8009e80:	2d000017 	ldw	r20,0(r5)
 8009e84:	2d400117 	ldw	r21,4(r5)
 8009e88:	29400204 	addi	r5,r5,8
 8009e8c:	d9412315 	stw	r5,1164(sp)
 8009e90:	8880004c 	andi	r2,r17,1
 8009e94:	1001d126 	beq	r2,zero,800a5dc <___vfiprintf_internal_r+0xffc>
 8009e98:	a548b03a 	or	r4,r20,r21
 8009e9c:	20021626 	beq	r4,zero,800a6f8 <___vfiprintf_internal_r+0x1118>
 8009ea0:	00800c04 	movi	r2,48
 8009ea4:	d8811d05 	stb	r2,1140(sp)
 8009ea8:	d8c11d45 	stb	r3,1141(sp)
 8009eac:	8c400094 	ori	r17,r17,2
 8009eb0:	00800084 	movi	r2,2
 8009eb4:	003fd706 	br	8009e14 <__alt_data_end+0xf8009e14>
 8009eb8:	d9412317 	ldw	r5,1164(sp)
 8009ebc:	05000044 	movi	r20,1
 8009ec0:	b811883a 	mov	r8,r23
 8009ec4:	28800017 	ldw	r2,0(r5)
 8009ec8:	29400104 	addi	r5,r5,4
 8009ecc:	d8011d85 	stb	zero,1142(sp)
 8009ed0:	d8810005 	stb	r2,1024(sp)
 8009ed4:	d9412315 	stw	r5,1164(sp)
 8009ed8:	a00f883a 	mov	r7,r20
 8009edc:	ddc10004 	addi	r23,sp,1024
 8009ee0:	0025883a 	mov	r18,zero
 8009ee4:	003f0f06 	br	8009b24 <__alt_data_end+0xf8009b24>
 8009ee8:	b0803fcc 	andi	r2,r22,255
 8009eec:	1080201c 	xori	r2,r2,128
 8009ef0:	10bfe004 	addi	r2,r2,-128
 8009ef4:	10021f1e 	bne	r2,zero,800a774 <___vfiprintf_internal_r+0x1194>
 8009ef8:	05800804 	movi	r22,32
 8009efc:	48c00007 	ldb	r3,0(r9)
 8009f00:	003e1706 	br	8009760 <__alt_data_end+0xf8009760>
 8009f04:	8c400054 	ori	r17,r17,1
 8009f08:	48c00007 	ldb	r3,0(r9)
 8009f0c:	003e1406 	br	8009760 <__alt_data_end+0xf8009760>
 8009f10:	48c00007 	ldb	r3,0(r9)
 8009f14:	01001b04 	movi	r4,108
 8009f18:	4805883a 	mov	r2,r9
 8009f1c:	19026526 	beq	r3,r4,800a8b4 <___vfiprintf_internal_r+0x12d4>
 8009f20:	8c400414 	ori	r17,r17,16
 8009f24:	003e0e06 	br	8009760 <__alt_data_end+0xf8009760>
 8009f28:	dd811d85 	stb	r22,1142(sp)
 8009f2c:	8880080c 	andi	r2,r17,32
 8009f30:	b811883a 	mov	r8,r23
 8009f34:	10020426 	beq	r2,zero,800a748 <___vfiprintf_internal_r+0x1168>
 8009f38:	d8c12317 	ldw	r3,1164(sp)
 8009f3c:	d9012417 	ldw	r4,1168(sp)
 8009f40:	d9412317 	ldw	r5,1164(sp)
 8009f44:	18800017 	ldw	r2,0(r3)
 8009f48:	2007d7fa 	srai	r3,r4,31
 8009f4c:	29400104 	addi	r5,r5,4
 8009f50:	d9412315 	stw	r5,1164(sp)
 8009f54:	11000015 	stw	r4,0(r2)
 8009f58:	10c00115 	stw	r3,4(r2)
 8009f5c:	003dd706 	br	80096bc <__alt_data_end+0xf80096bc>
 8009f60:	8880080c 	andi	r2,r17,32
 8009f64:	b811883a 	mov	r8,r23
 8009f68:	3025883a 	mov	r18,r6
 8009f6c:	103fa11e 	bne	r2,zero,8009df4 <__alt_data_end+0xf8009df4>
 8009f70:	8880040c 	andi	r2,r17,16
 8009f74:	1001ea26 	beq	r2,zero,800a720 <___vfiprintf_internal_r+0x1140>
 8009f78:	d9012317 	ldw	r4,1164(sp)
 8009f7c:	002b883a 	mov	r21,zero
 8009f80:	0005883a 	mov	r2,zero
 8009f84:	25000017 	ldw	r20,0(r4)
 8009f88:	21000104 	addi	r4,r4,4
 8009f8c:	d9012315 	stw	r4,1164(sp)
 8009f90:	a009883a 	mov	r4,r20
 8009f94:	003f9f06 	br	8009e14 <__alt_data_end+0xf8009e14>
 8009f98:	d8812317 	ldw	r2,1164(sp)
 8009f9c:	d8c12317 	ldw	r3,1164(sp)
 8009fa0:	10800017 	ldw	r2,0(r2)
 8009fa4:	d8812115 	stw	r2,1156(sp)
 8009fa8:	d9012117 	ldw	r4,1156(sp)
 8009fac:	18800104 	addi	r2,r3,4
 8009fb0:	203e9a16 	blt	r4,zero,8009a1c <__alt_data_end+0xf8009a1c>
 8009fb4:	d8812315 	stw	r2,1164(sp)
 8009fb8:	48c00007 	ldb	r3,0(r9)
 8009fbc:	003de806 	br	8009760 <__alt_data_end+0xf8009760>
 8009fc0:	05800ac4 	movi	r22,43
 8009fc4:	48c00007 	ldb	r3,0(r9)
 8009fc8:	003de506 	br	8009760 <__alt_data_end+0xf8009760>
 8009fcc:	48c00007 	ldb	r3,0(r9)
 8009fd0:	01000a84 	movi	r4,42
 8009fd4:	48800044 	addi	r2,r9,1
 8009fd8:	19028326 	beq	r3,r4,800a9e8 <___vfiprintf_internal_r+0x1408>
 8009fdc:	1f3ff404 	addi	fp,r3,-48
 8009fe0:	af027a36 	bltu	r21,fp,800a9cc <___vfiprintf_internal_r+0x13ec>
 8009fe4:	1025883a 	mov	r18,r2
 8009fe8:	0009883a 	mov	r4,zero
 8009fec:	00000106 	br	8009ff4 <___vfiprintf_internal_r+0xa14>
 8009ff0:	4825883a 	mov	r18,r9
 8009ff4:	01400284 	movi	r5,10
 8009ff8:	800c2080 	call	800c208 <__mulsi3>
 8009ffc:	90c00007 	ldb	r3,0(r18)
 800a000:	e089883a 	add	r4,fp,r2
 800a004:	92400044 	addi	r9,r18,1
 800a008:	1f3ff404 	addi	fp,r3,-48
 800a00c:	af3ff82e 	bgeu	r21,fp,8009ff0 <__alt_data_end+0xf8009ff0>
 800a010:	2025883a 	mov	r18,r4
 800a014:	20022416 	blt	r4,zero,800a8a8 <___vfiprintf_internal_r+0x12c8>
 800a018:	900d883a 	mov	r6,r18
 800a01c:	003dd106 	br	8009764 <__alt_data_end+0xf8009764>
 800a020:	8c401014 	ori	r17,r17,64
 800a024:	48c00007 	ldb	r3,0(r9)
 800a028:	003dcd06 	br	8009760 <__alt_data_end+0xf8009760>
 800a02c:	dd811d85 	stb	r22,1142(sp)
 800a030:	8880080c 	andi	r2,r17,32
 800a034:	b811883a 	mov	r8,r23
 800a038:	3025883a 	mov	r18,r6
 800a03c:	103e991e 	bne	r2,zero,8009aa4 <__alt_data_end+0xf8009aa4>
 800a040:	8880040c 	andi	r2,r17,16
 800a044:	1001d726 	beq	r2,zero,800a7a4 <___vfiprintf_internal_r+0x11c4>
 800a048:	d9012317 	ldw	r4,1164(sp)
 800a04c:	25000017 	ldw	r20,0(r4)
 800a050:	21000104 	addi	r4,r4,4
 800a054:	d9012315 	stw	r4,1164(sp)
 800a058:	a02bd7fa 	srai	r21,r20,31
 800a05c:	a805883a 	mov	r2,r21
 800a060:	003e9606 	br	8009abc <__alt_data_end+0xf8009abc>
 800a064:	8c400814 	ori	r17,r17,32
 800a068:	48c00007 	ldb	r3,0(r9)
 800a06c:	003dbc06 	br	8009760 <__alt_data_end+0xf8009760>
 800a070:	d9412317 	ldw	r5,1164(sp)
 800a074:	b811883a 	mov	r8,r23
 800a078:	d8011d85 	stb	zero,1142(sp)
 800a07c:	2dc00017 	ldw	r23,0(r5)
 800a080:	3025883a 	mov	r18,r6
 800a084:	2d400104 	addi	r21,r5,4
 800a088:	b8022f26 	beq	r23,zero,800a948 <___vfiprintf_internal_r+0x1368>
 800a08c:	b809883a 	mov	r4,r23
 800a090:	30020f16 	blt	r6,zero,800a8d0 <___vfiprintf_internal_r+0x12f0>
 800a094:	000b883a 	mov	r5,zero
 800a098:	da012b15 	stw	r8,1196(sp)
 800a09c:	da412d15 	stw	r9,1204(sp)
 800a0a0:	80078500 	call	8007850 <memchr>
 800a0a4:	da012b17 	ldw	r8,1196(sp)
 800a0a8:	da412d17 	ldw	r9,1204(sp)
 800a0ac:	10024226 	beq	r2,zero,800a9b8 <___vfiprintf_internal_r+0x13d8>
 800a0b0:	15cfc83a 	sub	r7,r2,r23
 800a0b4:	91c1d616 	blt	r18,r7,800a810 <___vfiprintf_internal_r+0x1230>
 800a0b8:	dd811d83 	ldbu	r22,1142(sp)
 800a0bc:	dd412315 	stw	r21,1164(sp)
 800a0c0:	0025883a 	mov	r18,zero
 800a0c4:	003e8f06 	br	8009b04 <__alt_data_end+0xf8009b04>
 800a0c8:	8880080c 	andi	r2,r17,32
 800a0cc:	b811883a 	mov	r8,r23
 800a0d0:	3025883a 	mov	r18,r6
 800a0d4:	103f581e 	bne	r2,zero,8009e38 <__alt_data_end+0xf8009e38>
 800a0d8:	8880040c 	andi	r2,r17,16
 800a0dc:	1001a726 	beq	r2,zero,800a77c <___vfiprintf_internal_r+0x119c>
 800a0e0:	d9012317 	ldw	r4,1164(sp)
 800a0e4:	002b883a 	mov	r21,zero
 800a0e8:	00800044 	movi	r2,1
 800a0ec:	25000017 	ldw	r20,0(r4)
 800a0f0:	21000104 	addi	r4,r4,4
 800a0f4:	d9012315 	stw	r4,1164(sp)
 800a0f8:	a009883a 	mov	r4,r20
 800a0fc:	003f4506 	br	8009e14 <__alt_data_end+0xf8009e14>
 800a100:	01020074 	movhi	r4,2049
 800a104:	21065504 	addi	r4,r4,6484
 800a108:	dd811d85 	stb	r22,1142(sp)
 800a10c:	d9012715 	stw	r4,1180(sp)
 800a110:	8880080c 	andi	r2,r17,32
 800a114:	b811883a 	mov	r8,r23
 800a118:	3025883a 	mov	r18,r6
 800a11c:	103f571e 	bne	r2,zero,8009e7c <__alt_data_end+0xf8009e7c>
 800a120:	8880040c 	andi	r2,r17,16
 800a124:	10017626 	beq	r2,zero,800a700 <___vfiprintf_internal_r+0x1120>
 800a128:	d8812317 	ldw	r2,1164(sp)
 800a12c:	002b883a 	mov	r21,zero
 800a130:	15000017 	ldw	r20,0(r2)
 800a134:	10800104 	addi	r2,r2,4
 800a138:	d8812315 	stw	r2,1164(sp)
 800a13c:	003f5406 	br	8009e90 <__alt_data_end+0xf8009e90>
 800a140:	d8c12317 	ldw	r3,1164(sp)
 800a144:	00800c04 	movi	r2,48
 800a148:	01020074 	movhi	r4,2049
 800a14c:	21065504 	addi	r4,r4,6484
 800a150:	1d000017 	ldw	r20,0(r3)
 800a154:	d8811d05 	stb	r2,1140(sp)
 800a158:	18c00104 	addi	r3,r3,4
 800a15c:	00801e04 	movi	r2,120
 800a160:	d8811d45 	stb	r2,1141(sp)
 800a164:	d9012715 	stw	r4,1180(sp)
 800a168:	b811883a 	mov	r8,r23
 800a16c:	3025883a 	mov	r18,r6
 800a170:	002b883a 	mov	r21,zero
 800a174:	8c400094 	ori	r17,r17,2
 800a178:	d8c12315 	stw	r3,1164(sp)
 800a17c:	00800084 	movi	r2,2
 800a180:	a009883a 	mov	r4,r20
 800a184:	003f2306 	br	8009e14 <__alt_data_end+0xf8009e14>
 800a188:	dd811d85 	stb	r22,1142(sp)
 800a18c:	b811883a 	mov	r8,r23
 800a190:	18004426 	beq	r3,zero,800a2a4 <___vfiprintf_internal_r+0xcc4>
 800a194:	05000044 	movi	r20,1
 800a198:	d8c10005 	stb	r3,1024(sp)
 800a19c:	d8011d85 	stb	zero,1142(sp)
 800a1a0:	a00f883a 	mov	r7,r20
 800a1a4:	ddc10004 	addi	r23,sp,1024
 800a1a8:	0025883a 	mov	r18,zero
 800a1ac:	003e5d06 	br	8009b24 <__alt_data_end+0xf8009b24>
 800a1b0:	d9012217 	ldw	r4,1160(sp)
 800a1b4:	d9412017 	ldw	r5,1152(sp)
 800a1b8:	d9811a04 	addi	r6,sp,1128
 800a1bc:	db012b15 	stw	r12,1196(sp)
 800a1c0:	80094cc0 	call	80094cc <__sprint_r.part.0>
 800a1c4:	db012b17 	ldw	r12,1196(sp)
 800a1c8:	10003c1e 	bne	r2,zero,800a2bc <___vfiprintf_internal_r+0xcdc>
 800a1cc:	d9011b17 	ldw	r4,1132(sp)
 800a1d0:	d8c11c17 	ldw	r3,1136(sp)
 800a1d4:	d811883a 	mov	r8,sp
 800a1d8:	21400044 	addi	r5,r4,1
 800a1dc:	003e6a06 	br	8009b88 <__alt_data_end+0xf8009b88>
 800a1e0:	d9411b17 	ldw	r5,1132(sp)
 800a1e4:	d8c11c17 	ldw	r3,1136(sp)
 800a1e8:	28800044 	addi	r2,r5,1
 800a1ec:	d9011d87 	ldb	r4,1142(sp)
 800a1f0:	203e8526 	beq	r4,zero,8009c08 <__alt_data_end+0xf8009c08>
 800a1f4:	01000044 	movi	r4,1
 800a1f8:	d9411d84 	addi	r5,sp,1142
 800a1fc:	1907883a 	add	r3,r3,r4
 800a200:	41400015 	stw	r5,0(r8)
 800a204:	41000115 	stw	r4,4(r8)
 800a208:	d8c11c15 	stw	r3,1136(sp)
 800a20c:	d8811b15 	stw	r2,1132(sp)
 800a210:	014001c4 	movi	r5,7
 800a214:	28809816 	blt	r5,r2,800a478 <___vfiprintf_internal_r+0xe98>
 800a218:	100b883a 	mov	r5,r2
 800a21c:	42000204 	addi	r8,r8,8
 800a220:	1105883a 	add	r2,r2,r4
 800a224:	003e7806 	br	8009c08 <__alt_data_end+0xf8009c08>
 800a228:	d9012217 	ldw	r4,1160(sp)
 800a22c:	d9412017 	ldw	r5,1152(sp)
 800a230:	d9811a04 	addi	r6,sp,1128
 800a234:	80094cc0 	call	80094cc <__sprint_r.part.0>
 800a238:	1000201e 	bne	r2,zero,800a2bc <___vfiprintf_internal_r+0xcdc>
 800a23c:	d9411b17 	ldw	r5,1132(sp)
 800a240:	d8c11c17 	ldw	r3,1136(sp)
 800a244:	d811883a 	mov	r8,sp
 800a248:	28800044 	addi	r2,r5,1
 800a24c:	003e8c06 	br	8009c80 <__alt_data_end+0xf8009c80>
 800a250:	00c00044 	movi	r3,1
 800a254:	10c0ab26 	beq	r2,r3,800a504 <___vfiprintf_internal_r+0xf24>
 800a258:	00c00084 	movi	r3,2
 800a25c:	10c0901e 	bne	r2,r3,800a4a0 <___vfiprintf_internal_r+0xec0>
 800a260:	d9412717 	ldw	r5,1180(sp)
 800a264:	d88109c4 	addi	r2,sp,1063
 800a268:	a0c003cc 	andi	r3,r20,15
 800a26c:	a808973a 	slli	r4,r21,28
 800a270:	28c7883a 	add	r3,r5,r3
 800a274:	a028d13a 	srli	r20,r20,4
 800a278:	18c00003 	ldbu	r3,0(r3)
 800a27c:	a82ad13a 	srli	r21,r21,4
 800a280:	2528b03a 	or	r20,r4,r20
 800a284:	10c00005 	stb	r3,0(r2)
 800a288:	a546b03a 	or	r3,r20,r21
 800a28c:	102f883a 	mov	r23,r2
 800a290:	10bfffc4 	addi	r2,r2,-1
 800a294:	183ff41e 	bne	r3,zero,800a268 <__alt_data_end+0xf800a268>
 800a298:	d8811f17 	ldw	r2,1148(sp)
 800a29c:	15cfc83a 	sub	r7,r2,r23
 800a2a0:	003e1806 	br	8009b04 <__alt_data_end+0xf8009b04>
 800a2a4:	d8811c17 	ldw	r2,1136(sp)
 800a2a8:	10000426 	beq	r2,zero,800a2bc <___vfiprintf_internal_r+0xcdc>
 800a2ac:	d9012217 	ldw	r4,1160(sp)
 800a2b0:	d9412017 	ldw	r5,1152(sp)
 800a2b4:	d9811a04 	addi	r6,sp,1128
 800a2b8:	80094cc0 	call	80094cc <__sprint_r.part.0>
 800a2bc:	d8c12017 	ldw	r3,1152(sp)
 800a2c0:	1880030b 	ldhu	r2,12(r3)
 800a2c4:	1080100c 	andi	r2,r2,64
 800a2c8:	103dc31e 	bne	r2,zero,80099d8 <__alt_data_end+0xf80099d8>
 800a2cc:	d8812417 	ldw	r2,1168(sp)
 800a2d0:	003dc206 	br	80099dc <__alt_data_end+0xf80099dc>
 800a2d4:	d9012217 	ldw	r4,1160(sp)
 800a2d8:	d9412017 	ldw	r5,1152(sp)
 800a2dc:	d9811a04 	addi	r6,sp,1128
 800a2e0:	da412d15 	stw	r9,1204(sp)
 800a2e4:	80094cc0 	call	80094cc <__sprint_r.part.0>
 800a2e8:	da412d17 	ldw	r9,1204(sp)
 800a2ec:	103ff31e 	bne	r2,zero,800a2bc <__alt_data_end+0xf800a2bc>
 800a2f0:	d8c11c17 	ldw	r3,1136(sp)
 800a2f4:	d9412117 	ldw	r5,1156(sp)
 800a2f8:	a140010e 	bge	r20,r5,800a300 <___vfiprintf_internal_r+0xd20>
 800a2fc:	2829883a 	mov	r20,r5
 800a300:	d8812417 	ldw	r2,1168(sp)
 800a304:	1505883a 	add	r2,r2,r20
 800a308:	d8812415 	stw	r2,1168(sp)
 800a30c:	18000726 	beq	r3,zero,800a32c <___vfiprintf_internal_r+0xd4c>
 800a310:	d9012217 	ldw	r4,1160(sp)
 800a314:	d9412017 	ldw	r5,1152(sp)
 800a318:	d9811a04 	addi	r6,sp,1128
 800a31c:	da412d15 	stw	r9,1204(sp)
 800a320:	80094cc0 	call	80094cc <__sprint_r.part.0>
 800a324:	da412d17 	ldw	r9,1204(sp)
 800a328:	103fe41e 	bne	r2,zero,800a2bc <__alt_data_end+0xf800a2bc>
 800a32c:	d8011b15 	stw	zero,1132(sp)
 800a330:	d811883a 	mov	r8,sp
 800a334:	003ce106 	br	80096bc <__alt_data_end+0xf80096bc>
 800a338:	a809883a 	mov	r4,r21
 800a33c:	b80b883a 	mov	r5,r23
 800a340:	d9811a04 	addi	r6,sp,1128
 800a344:	80094cc0 	call	80094cc <__sprint_r.part.0>
 800a348:	103fdc1e 	bne	r2,zero,800a2bc <__alt_data_end+0xf800a2bc>
 800a34c:	d9011b17 	ldw	r4,1132(sp)
 800a350:	d8c11c17 	ldw	r3,1136(sp)
 800a354:	d811883a 	mov	r8,sp
 800a358:	21400044 	addi	r5,r4,1
 800a35c:	003e8106 	br	8009d64 <__alt_data_end+0xf8009d64>
 800a360:	1800cb1e 	bne	r3,zero,800a690 <___vfiprintf_internal_r+0x10b0>
 800a364:	00800044 	movi	r2,1
 800a368:	ddc00015 	stw	r23,0(sp)
 800a36c:	d9c00115 	stw	r7,4(sp)
 800a370:	d9c11c15 	stw	r7,1136(sp)
 800a374:	d8811b15 	stw	r2,1132(sp)
 800a378:	3807883a 	mov	r3,r7
 800a37c:	d811883a 	mov	r8,sp
 800a380:	42000204 	addi	r8,r8,8
 800a384:	003e6406 	br	8009d18 <__alt_data_end+0xf8009d18>
 800a388:	d9012117 	ldw	r4,1156(sp)
 800a38c:	252dc83a 	sub	r22,r4,r20
 800a390:	05be2c0e 	bge	zero,r22,8009c44 <__alt_data_end+0xf8009c44>
 800a394:	07000404 	movi	fp,16
 800a398:	e581830e 	bge	fp,r22,800a9a8 <___vfiprintf_internal_r+0x13c8>
 800a39c:	05420074 	movhi	r21,2049
 800a3a0:	ad46b604 	addi	r21,r21,6872
 800a3a4:	dc412515 	stw	r17,1172(sp)
 800a3a8:	028001c4 	movi	r10,7
 800a3ac:	b023883a 	mov	r17,r22
 800a3b0:	d9c12615 	stw	r7,1176(sp)
 800a3b4:	a82d883a 	mov	r22,r21
 800a3b8:	482b883a 	mov	r21,r9
 800a3bc:	00000506 	br	800a3d4 <___vfiprintf_internal_r+0xdf4>
 800a3c0:	29000084 	addi	r4,r5,2
 800a3c4:	42000204 	addi	r8,r8,8
 800a3c8:	100b883a 	mov	r5,r2
 800a3cc:	8c7ffc04 	addi	r17,r17,-16
 800a3d0:	e4400d0e 	bge	fp,r17,800a408 <___vfiprintf_internal_r+0xe28>
 800a3d4:	18c00404 	addi	r3,r3,16
 800a3d8:	28800044 	addi	r2,r5,1
 800a3dc:	44000015 	stw	r16,0(r8)
 800a3e0:	47000115 	stw	fp,4(r8)
 800a3e4:	d8c11c15 	stw	r3,1136(sp)
 800a3e8:	d8811b15 	stw	r2,1132(sp)
 800a3ec:	50bff40e 	bge	r10,r2,800a3c0 <__alt_data_end+0xf800a3c0>
 800a3f0:	1800151e 	bne	r3,zero,800a448 <___vfiprintf_internal_r+0xe68>
 800a3f4:	8c7ffc04 	addi	r17,r17,-16
 800a3f8:	000b883a 	mov	r5,zero
 800a3fc:	01000044 	movi	r4,1
 800a400:	d811883a 	mov	r8,sp
 800a404:	e47ff316 	blt	fp,r17,800a3d4 <__alt_data_end+0xf800a3d4>
 800a408:	a813883a 	mov	r9,r21
 800a40c:	d9c12617 	ldw	r7,1176(sp)
 800a410:	b02b883a 	mov	r21,r22
 800a414:	882d883a 	mov	r22,r17
 800a418:	dc412517 	ldw	r17,1172(sp)
 800a41c:	1d87883a 	add	r3,r3,r22
 800a420:	45400015 	stw	r21,0(r8)
 800a424:	45800115 	stw	r22,4(r8)
 800a428:	d8c11c15 	stw	r3,1136(sp)
 800a42c:	d9011b15 	stw	r4,1132(sp)
 800a430:	008001c4 	movi	r2,7
 800a434:	11009116 	blt	r2,r4,800a67c <___vfiprintf_internal_r+0x109c>
 800a438:	42000204 	addi	r8,r8,8
 800a43c:	20800044 	addi	r2,r4,1
 800a440:	200b883a 	mov	r5,r4
 800a444:	003dff06 	br	8009c44 <__alt_data_end+0xf8009c44>
 800a448:	d9012217 	ldw	r4,1160(sp)
 800a44c:	d9412017 	ldw	r5,1152(sp)
 800a450:	d9811a04 	addi	r6,sp,1128
 800a454:	da812c15 	stw	r10,1200(sp)
 800a458:	80094cc0 	call	80094cc <__sprint_r.part.0>
 800a45c:	da812c17 	ldw	r10,1200(sp)
 800a460:	103f961e 	bne	r2,zero,800a2bc <__alt_data_end+0xf800a2bc>
 800a464:	d9411b17 	ldw	r5,1132(sp)
 800a468:	d8c11c17 	ldw	r3,1136(sp)
 800a46c:	d811883a 	mov	r8,sp
 800a470:	29000044 	addi	r4,r5,1
 800a474:	003fd506 	br	800a3cc <__alt_data_end+0xf800a3cc>
 800a478:	1800701e 	bne	r3,zero,800a63c <___vfiprintf_internal_r+0x105c>
 800a47c:	000b883a 	mov	r5,zero
 800a480:	2005883a 	mov	r2,r4
 800a484:	d811883a 	mov	r8,sp
 800a488:	003ddf06 	br	8009c08 <__alt_data_end+0xf8009c08>
 800a48c:	18005d1e 	bne	r3,zero,800a604 <___vfiprintf_internal_r+0x1024>
 800a490:	000b883a 	mov	r5,zero
 800a494:	00800044 	movi	r2,1
 800a498:	d811883a 	mov	r8,sp
 800a49c:	003de706 	br	8009c3c <__alt_data_end+0xf8009c3c>
 800a4a0:	d8c109c4 	addi	r3,sp,1063
 800a4a4:	a008d0fa 	srli	r4,r20,3
 800a4a8:	a80a977a 	slli	r5,r21,29
 800a4ac:	a82ad0fa 	srli	r21,r21,3
 800a4b0:	a50001cc 	andi	r20,r20,7
 800a4b4:	a0800c04 	addi	r2,r20,48
 800a4b8:	2928b03a 	or	r20,r5,r4
 800a4bc:	18800005 	stb	r2,0(r3)
 800a4c0:	a548b03a 	or	r4,r20,r21
 800a4c4:	182f883a 	mov	r23,r3
 800a4c8:	18ffffc4 	addi	r3,r3,-1
 800a4cc:	203ff51e 	bne	r4,zero,800a4a4 <__alt_data_end+0xf800a4a4>
 800a4d0:	8900004c 	andi	r4,r17,1
 800a4d4:	b80b883a 	mov	r5,r23
 800a4d8:	203f6f26 	beq	r4,zero,800a298 <__alt_data_end+0xf800a298>
 800a4dc:	10803fcc 	andi	r2,r2,255
 800a4e0:	1080201c 	xori	r2,r2,128
 800a4e4:	10bfe004 	addi	r2,r2,-128
 800a4e8:	01000c04 	movi	r4,48
 800a4ec:	1100f526 	beq	r2,r4,800a8c4 <___vfiprintf_internal_r+0x12e4>
 800a4f0:	293fffc5 	stb	r4,-1(r5)
 800a4f4:	d9011f17 	ldw	r4,1148(sp)
 800a4f8:	182f883a 	mov	r23,r3
 800a4fc:	20cfc83a 	sub	r7,r4,r3
 800a500:	003d8006 	br	8009b04 <__alt_data_end+0xf8009b04>
 800a504:	a800021e 	bne	r21,zero,800a510 <___vfiprintf_internal_r+0xf30>
 800a508:	00800244 	movi	r2,9
 800a50c:	15001d2e 	bgeu	r2,r20,800a584 <___vfiprintf_internal_r+0xfa4>
 800a510:	dc412515 	stw	r17,1172(sp)
 800a514:	d88109c4 	addi	r2,sp,1063
 800a518:	a823883a 	mov	r17,r21
 800a51c:	4039883a 	mov	fp,r8
 800a520:	482b883a 	mov	r21,r9
 800a524:	a009883a 	mov	r4,r20
 800a528:	880b883a 	mov	r5,r17
 800a52c:	01800284 	movi	r6,10
 800a530:	000f883a 	mov	r7,zero
 800a534:	102f883a 	mov	r23,r2
 800a538:	800bac00 	call	800bac0 <__umoddi3>
 800a53c:	10800c04 	addi	r2,r2,48
 800a540:	a009883a 	mov	r4,r20
 800a544:	880b883a 	mov	r5,r17
 800a548:	b8800005 	stb	r2,0(r23)
 800a54c:	01800284 	movi	r6,10
 800a550:	000f883a 	mov	r7,zero
 800a554:	800b46c0 	call	800b46c <__udivdi3>
 800a558:	1823883a 	mov	r17,r3
 800a55c:	10c6b03a 	or	r3,r2,r3
 800a560:	1029883a 	mov	r20,r2
 800a564:	b8bfffc4 	addi	r2,r23,-1
 800a568:	183fee1e 	bne	r3,zero,800a524 <__alt_data_end+0xf800a524>
 800a56c:	d9411f17 	ldw	r5,1148(sp)
 800a570:	e011883a 	mov	r8,fp
 800a574:	dc412517 	ldw	r17,1172(sp)
 800a578:	a813883a 	mov	r9,r21
 800a57c:	2dcfc83a 	sub	r7,r5,r23
 800a580:	003d6006 	br	8009b04 <__alt_data_end+0xf8009b04>
 800a584:	a5000c04 	addi	r20,r20,48
 800a588:	dd0109c5 	stb	r20,1063(sp)
 800a58c:	d9c12817 	ldw	r7,1184(sp)
 800a590:	ddc109c4 	addi	r23,sp,1063
 800a594:	003d5b06 	br	8009b04 <__alt_data_end+0xf8009b04>
 800a598:	ddc10a04 	addi	r23,sp,1064
 800a59c:	003d5906 	br	8009b04 <__alt_data_end+0xf8009b04>
 800a5a0:	1800891e 	bne	r3,zero,800a7c8 <___vfiprintf_internal_r+0x11e8>
 800a5a4:	000b883a 	mov	r5,zero
 800a5a8:	00800044 	movi	r2,1
 800a5ac:	d811883a 	mov	r8,sp
 800a5b0:	003f0e06 	br	800a1ec <__alt_data_end+0xf800a1ec>
 800a5b4:	d9012217 	ldw	r4,1160(sp)
 800a5b8:	d9412017 	ldw	r5,1152(sp)
 800a5bc:	d9811a04 	addi	r6,sp,1128
 800a5c0:	da412d15 	stw	r9,1204(sp)
 800a5c4:	80094cc0 	call	80094cc <__sprint_r.part.0>
 800a5c8:	da412d17 	ldw	r9,1204(sp)
 800a5cc:	103f3b1e 	bne	r2,zero,800a2bc <__alt_data_end+0xf800a2bc>
 800a5d0:	d8c11c17 	ldw	r3,1136(sp)
 800a5d4:	d811883a 	mov	r8,sp
 800a5d8:	003dcf06 	br	8009d18 <__alt_data_end+0xf8009d18>
 800a5dc:	00800084 	movi	r2,2
 800a5e0:	a548b03a 	or	r4,r20,r21
 800a5e4:	003e0b06 	br	8009e14 <__alt_data_end+0xf8009e14>
 800a5e8:	d9012217 	ldw	r4,1160(sp)
 800a5ec:	d9412017 	ldw	r5,1152(sp)
 800a5f0:	d9811a04 	addi	r6,sp,1128
 800a5f4:	80094cc0 	call	80094cc <__sprint_r.part.0>
 800a5f8:	103f301e 	bne	r2,zero,800a2bc <__alt_data_end+0xf800a2bc>
 800a5fc:	d811883a 	mov	r8,sp
 800a600:	003cbb06 	br	80098f0 <__alt_data_end+0xf80098f0>
 800a604:	d9012217 	ldw	r4,1160(sp)
 800a608:	d9412017 	ldw	r5,1152(sp)
 800a60c:	d9811a04 	addi	r6,sp,1128
 800a610:	d9c12b15 	stw	r7,1196(sp)
 800a614:	da412d15 	stw	r9,1204(sp)
 800a618:	80094cc0 	call	80094cc <__sprint_r.part.0>
 800a61c:	d9c12b17 	ldw	r7,1196(sp)
 800a620:	da412d17 	ldw	r9,1204(sp)
 800a624:	103f251e 	bne	r2,zero,800a2bc <__alt_data_end+0xf800a2bc>
 800a628:	d9411b17 	ldw	r5,1132(sp)
 800a62c:	d8c11c17 	ldw	r3,1136(sp)
 800a630:	d811883a 	mov	r8,sp
 800a634:	28800044 	addi	r2,r5,1
 800a638:	003d8006 	br	8009c3c <__alt_data_end+0xf8009c3c>
 800a63c:	d9012217 	ldw	r4,1160(sp)
 800a640:	d9412017 	ldw	r5,1152(sp)
 800a644:	d9811a04 	addi	r6,sp,1128
 800a648:	d9c12b15 	stw	r7,1196(sp)
 800a64c:	da412d15 	stw	r9,1204(sp)
 800a650:	da812c15 	stw	r10,1200(sp)
 800a654:	80094cc0 	call	80094cc <__sprint_r.part.0>
 800a658:	d9c12b17 	ldw	r7,1196(sp)
 800a65c:	da412d17 	ldw	r9,1204(sp)
 800a660:	da812c17 	ldw	r10,1200(sp)
 800a664:	103f151e 	bne	r2,zero,800a2bc <__alt_data_end+0xf800a2bc>
 800a668:	d9411b17 	ldw	r5,1132(sp)
 800a66c:	d8c11c17 	ldw	r3,1136(sp)
 800a670:	d811883a 	mov	r8,sp
 800a674:	28800044 	addi	r2,r5,1
 800a678:	003d6306 	br	8009c08 <__alt_data_end+0xf8009c08>
 800a67c:	18009e1e 	bne	r3,zero,800a8f8 <___vfiprintf_internal_r+0x1318>
 800a680:	000b883a 	mov	r5,zero
 800a684:	00800044 	movi	r2,1
 800a688:	d811883a 	mov	r8,sp
 800a68c:	003d6d06 	br	8009c44 <__alt_data_end+0xf8009c44>
 800a690:	d9012217 	ldw	r4,1160(sp)
 800a694:	d9412017 	ldw	r5,1152(sp)
 800a698:	d9811a04 	addi	r6,sp,1128
 800a69c:	d9c12b15 	stw	r7,1196(sp)
 800a6a0:	da412d15 	stw	r9,1204(sp)
 800a6a4:	80094cc0 	call	80094cc <__sprint_r.part.0>
 800a6a8:	d9c12b17 	ldw	r7,1196(sp)
 800a6ac:	da412d17 	ldw	r9,1204(sp)
 800a6b0:	103f021e 	bne	r2,zero,800a2bc <__alt_data_end+0xf800a2bc>
 800a6b4:	d8811b17 	ldw	r2,1132(sp)
 800a6b8:	d8c11c17 	ldw	r3,1136(sp)
 800a6bc:	d811883a 	mov	r8,sp
 800a6c0:	10800044 	addi	r2,r2,1
 800a6c4:	003d8a06 	br	8009cf0 <__alt_data_end+0xf8009cf0>
 800a6c8:	4829883a 	mov	r20,r9
 800a6cc:	003c1706 	br	800972c <__alt_data_end+0xf800972c>
 800a6d0:	0529c83a 	sub	r20,zero,r20
 800a6d4:	a004c03a 	cmpne	r2,r20,zero
 800a6d8:	056bc83a 	sub	r21,zero,r21
 800a6dc:	a8abc83a 	sub	r21,r21,r2
 800a6e0:	05800b44 	movi	r22,45
 800a6e4:	dd811d85 	stb	r22,1142(sp)
 800a6e8:	900f883a 	mov	r7,r18
 800a6ec:	00800044 	movi	r2,1
 800a6f0:	a548b03a 	or	r4,r20,r21
 800a6f4:	003cf606 	br	8009ad0 <__alt_data_end+0xf8009ad0>
 800a6f8:	00800084 	movi	r2,2
 800a6fc:	003dc506 	br	8009e14 <__alt_data_end+0xf8009e14>
 800a700:	8880100c 	andi	r2,r17,64
 800a704:	10005a26 	beq	r2,zero,800a870 <___vfiprintf_internal_r+0x1290>
 800a708:	d9012317 	ldw	r4,1164(sp)
 800a70c:	002b883a 	mov	r21,zero
 800a710:	2500000b 	ldhu	r20,0(r4)
 800a714:	21000104 	addi	r4,r4,4
 800a718:	d9012315 	stw	r4,1164(sp)
 800a71c:	003ddc06 	br	8009e90 <__alt_data_end+0xf8009e90>
 800a720:	8880100c 	andi	r2,r17,64
 800a724:	10005826 	beq	r2,zero,800a888 <___vfiprintf_internal_r+0x12a8>
 800a728:	d9412317 	ldw	r5,1164(sp)
 800a72c:	002b883a 	mov	r21,zero
 800a730:	0005883a 	mov	r2,zero
 800a734:	2d00000b 	ldhu	r20,0(r5)
 800a738:	29400104 	addi	r5,r5,4
 800a73c:	d9412315 	stw	r5,1164(sp)
 800a740:	a009883a 	mov	r4,r20
 800a744:	003db306 	br	8009e14 <__alt_data_end+0xf8009e14>
 800a748:	8880040c 	andi	r2,r17,16
 800a74c:	1000411e 	bne	r2,zero,800a854 <___vfiprintf_internal_r+0x1274>
 800a750:	8c40100c 	andi	r17,r17,64
 800a754:	88008726 	beq	r17,zero,800a974 <___vfiprintf_internal_r+0x1394>
 800a758:	d9412317 	ldw	r5,1164(sp)
 800a75c:	d8c12417 	ldw	r3,1168(sp)
 800a760:	28800017 	ldw	r2,0(r5)
 800a764:	29400104 	addi	r5,r5,4
 800a768:	d9412315 	stw	r5,1164(sp)
 800a76c:	10c0000d 	sth	r3,0(r2)
 800a770:	003bd206 	br	80096bc <__alt_data_end+0xf80096bc>
 800a774:	48c00007 	ldb	r3,0(r9)
 800a778:	003bf906 	br	8009760 <__alt_data_end+0xf8009760>
 800a77c:	8880100c 	andi	r2,r17,64
 800a780:	10002c26 	beq	r2,zero,800a834 <___vfiprintf_internal_r+0x1254>
 800a784:	d9412317 	ldw	r5,1164(sp)
 800a788:	002b883a 	mov	r21,zero
 800a78c:	00800044 	movi	r2,1
 800a790:	2d00000b 	ldhu	r20,0(r5)
 800a794:	29400104 	addi	r5,r5,4
 800a798:	d9412315 	stw	r5,1164(sp)
 800a79c:	a009883a 	mov	r4,r20
 800a7a0:	003d9c06 	br	8009e14 <__alt_data_end+0xf8009e14>
 800a7a4:	8880100c 	andi	r2,r17,64
 800a7a8:	10001b26 	beq	r2,zero,800a818 <___vfiprintf_internal_r+0x1238>
 800a7ac:	d9412317 	ldw	r5,1164(sp)
 800a7b0:	2d00000f 	ldh	r20,0(r5)
 800a7b4:	29400104 	addi	r5,r5,4
 800a7b8:	d9412315 	stw	r5,1164(sp)
 800a7bc:	a02bd7fa 	srai	r21,r20,31
 800a7c0:	a805883a 	mov	r2,r21
 800a7c4:	003cbd06 	br	8009abc <__alt_data_end+0xf8009abc>
 800a7c8:	d9012217 	ldw	r4,1160(sp)
 800a7cc:	d9412017 	ldw	r5,1152(sp)
 800a7d0:	d9811a04 	addi	r6,sp,1128
 800a7d4:	d9c12b15 	stw	r7,1196(sp)
 800a7d8:	da412d15 	stw	r9,1204(sp)
 800a7dc:	da812c15 	stw	r10,1200(sp)
 800a7e0:	80094cc0 	call	80094cc <__sprint_r.part.0>
 800a7e4:	d9c12b17 	ldw	r7,1196(sp)
 800a7e8:	da412d17 	ldw	r9,1204(sp)
 800a7ec:	da812c17 	ldw	r10,1200(sp)
 800a7f0:	103eb21e 	bne	r2,zero,800a2bc <__alt_data_end+0xf800a2bc>
 800a7f4:	d9411b17 	ldw	r5,1132(sp)
 800a7f8:	d8c11c17 	ldw	r3,1136(sp)
 800a7fc:	d811883a 	mov	r8,sp
 800a800:	28800044 	addi	r2,r5,1
 800a804:	003e7906 	br	800a1ec <__alt_data_end+0xf800a1ec>
 800a808:	1829883a 	mov	r20,r3
 800a80c:	003d7006 	br	8009dd0 <__alt_data_end+0xf8009dd0>
 800a810:	900f883a 	mov	r7,r18
 800a814:	003e2806 	br	800a0b8 <__alt_data_end+0xf800a0b8>
 800a818:	d8812317 	ldw	r2,1164(sp)
 800a81c:	15000017 	ldw	r20,0(r2)
 800a820:	10800104 	addi	r2,r2,4
 800a824:	d8812315 	stw	r2,1164(sp)
 800a828:	a02bd7fa 	srai	r21,r20,31
 800a82c:	a805883a 	mov	r2,r21
 800a830:	003ca206 	br	8009abc <__alt_data_end+0xf8009abc>
 800a834:	d8812317 	ldw	r2,1164(sp)
 800a838:	002b883a 	mov	r21,zero
 800a83c:	15000017 	ldw	r20,0(r2)
 800a840:	10800104 	addi	r2,r2,4
 800a844:	d8812315 	stw	r2,1164(sp)
 800a848:	a009883a 	mov	r4,r20
 800a84c:	00800044 	movi	r2,1
 800a850:	003d7006 	br	8009e14 <__alt_data_end+0xf8009e14>
 800a854:	d8c12317 	ldw	r3,1164(sp)
 800a858:	d9012417 	ldw	r4,1168(sp)
 800a85c:	18800017 	ldw	r2,0(r3)
 800a860:	18c00104 	addi	r3,r3,4
 800a864:	d8c12315 	stw	r3,1164(sp)
 800a868:	11000015 	stw	r4,0(r2)
 800a86c:	003b9306 	br	80096bc <__alt_data_end+0xf80096bc>
 800a870:	d9412317 	ldw	r5,1164(sp)
 800a874:	002b883a 	mov	r21,zero
 800a878:	2d000017 	ldw	r20,0(r5)
 800a87c:	29400104 	addi	r5,r5,4
 800a880:	d9412315 	stw	r5,1164(sp)
 800a884:	003d8206 	br	8009e90 <__alt_data_end+0xf8009e90>
 800a888:	d8812317 	ldw	r2,1164(sp)
 800a88c:	002b883a 	mov	r21,zero
 800a890:	15000017 	ldw	r20,0(r2)
 800a894:	10800104 	addi	r2,r2,4
 800a898:	d8812315 	stw	r2,1164(sp)
 800a89c:	a009883a 	mov	r4,r20
 800a8a0:	0005883a 	mov	r2,zero
 800a8a4:	003d5b06 	br	8009e14 <__alt_data_end+0xf8009e14>
 800a8a8:	04bfffc4 	movi	r18,-1
 800a8ac:	900d883a 	mov	r6,r18
 800a8b0:	003bac06 	br	8009764 <__alt_data_end+0xf8009764>
 800a8b4:	4a400044 	addi	r9,r9,1
 800a8b8:	8c400814 	ori	r17,r17,32
 800a8bc:	10c00047 	ldb	r3,1(r2)
 800a8c0:	003ba706 	br	8009760 <__alt_data_end+0xf8009760>
 800a8c4:	d8c11f17 	ldw	r3,1148(sp)
 800a8c8:	1dcfc83a 	sub	r7,r3,r23
 800a8cc:	003c8d06 	br	8009b04 <__alt_data_end+0xf8009b04>
 800a8d0:	da012b15 	stw	r8,1196(sp)
 800a8d4:	da412d15 	stw	r9,1204(sp)
 800a8d8:	80022340 	call	8002234 <strlen>
 800a8dc:	100f883a 	mov	r7,r2
 800a8e0:	dd811d83 	ldbu	r22,1142(sp)
 800a8e4:	dd412315 	stw	r21,1164(sp)
 800a8e8:	0025883a 	mov	r18,zero
 800a8ec:	da012b17 	ldw	r8,1196(sp)
 800a8f0:	da412d17 	ldw	r9,1204(sp)
 800a8f4:	003c8306 	br	8009b04 <__alt_data_end+0xf8009b04>
 800a8f8:	d9012217 	ldw	r4,1160(sp)
 800a8fc:	d9412017 	ldw	r5,1152(sp)
 800a900:	d9811a04 	addi	r6,sp,1128
 800a904:	d9c12b15 	stw	r7,1196(sp)
 800a908:	da412d15 	stw	r9,1204(sp)
 800a90c:	80094cc0 	call	80094cc <__sprint_r.part.0>
 800a910:	d9c12b17 	ldw	r7,1196(sp)
 800a914:	da412d17 	ldw	r9,1204(sp)
 800a918:	103e681e 	bne	r2,zero,800a2bc <__alt_data_end+0xf800a2bc>
 800a91c:	d9411b17 	ldw	r5,1132(sp)
 800a920:	d8c11c17 	ldw	r3,1136(sp)
 800a924:	d811883a 	mov	r8,sp
 800a928:	28800044 	addi	r2,r5,1
 800a92c:	003cc506 	br	8009c44 <__alt_data_end+0xf8009c44>
 800a930:	d9411b17 	ldw	r5,1132(sp)
 800a934:	01020074 	movhi	r4,2049
 800a938:	2106ba04 	addi	r4,r4,6888
 800a93c:	d9012515 	stw	r4,1172(sp)
 800a940:	29400044 	addi	r5,r5,1
 800a944:	003ca406 	br	8009bd8 <__alt_data_end+0xf8009bd8>
 800a948:	00800184 	movi	r2,6
 800a94c:	300f883a 	mov	r7,r6
 800a950:	1180012e 	bgeu	r2,r6,800a958 <___vfiprintf_internal_r+0x1378>
 800a954:	100f883a 	mov	r7,r2
 800a958:	3829883a 	mov	r20,r7
 800a95c:	38001e16 	blt	r7,zero,800a9d8 <___vfiprintf_internal_r+0x13f8>
 800a960:	dd412315 	stw	r21,1164(sp)
 800a964:	05c20074 	movhi	r23,2049
 800a968:	bdc65a04 	addi	r23,r23,6504
 800a96c:	0025883a 	mov	r18,zero
 800a970:	003c6c06 	br	8009b24 <__alt_data_end+0xf8009b24>
 800a974:	d9012317 	ldw	r4,1164(sp)
 800a978:	d9412417 	ldw	r5,1168(sp)
 800a97c:	20800017 	ldw	r2,0(r4)
 800a980:	21000104 	addi	r4,r4,4
 800a984:	d9012315 	stw	r4,1164(sp)
 800a988:	11400015 	stw	r5,0(r2)
 800a98c:	003b4b06 	br	80096bc <__alt_data_end+0xf80096bc>
 800a990:	d9411b17 	ldw	r5,1132(sp)
 800a994:	00820074 	movhi	r2,2049
 800a998:	1086ba04 	addi	r2,r2,6888
 800a99c:	d8812515 	stw	r2,1172(sp)
 800a9a0:	29400044 	addi	r5,r5,1
 800a9a4:	003cff06 	br	8009da4 <__alt_data_end+0xf8009da4>
 800a9a8:	1009883a 	mov	r4,r2
 800a9ac:	05420074 	movhi	r21,2049
 800a9b0:	ad46b604 	addi	r21,r21,6872
 800a9b4:	003e9906 	br	800a41c <__alt_data_end+0xf800a41c>
 800a9b8:	900f883a 	mov	r7,r18
 800a9bc:	dd811d83 	ldbu	r22,1142(sp)
 800a9c0:	dd412315 	stw	r21,1164(sp)
 800a9c4:	0025883a 	mov	r18,zero
 800a9c8:	003c4e06 	br	8009b04 <__alt_data_end+0xf8009b04>
 800a9cc:	1013883a 	mov	r9,r2
 800a9d0:	000d883a 	mov	r6,zero
 800a9d4:	003b6306 	br	8009764 <__alt_data_end+0xf8009764>
 800a9d8:	0029883a 	mov	r20,zero
 800a9dc:	003fe006 	br	800a960 <__alt_data_end+0xf800a960>
 800a9e0:	043fffc4 	movi	r16,-1
 800a9e4:	003bf306 	br	80099b4 <__alt_data_end+0xf80099b4>
 800a9e8:	d9412317 	ldw	r5,1164(sp)
 800a9ec:	48c00043 	ldbu	r3,1(r9)
 800a9f0:	1013883a 	mov	r9,r2
 800a9f4:	29800017 	ldw	r6,0(r5)
 800a9f8:	29000104 	addi	r4,r5,4
 800a9fc:	d9012315 	stw	r4,1164(sp)
 800aa00:	30000416 	blt	r6,zero,800aa14 <___vfiprintf_internal_r+0x1434>
 800aa04:	18c03fcc 	andi	r3,r3,255
 800aa08:	18c0201c 	xori	r3,r3,128
 800aa0c:	18ffe004 	addi	r3,r3,-128
 800aa10:	003b5306 	br	8009760 <__alt_data_end+0xf8009760>
 800aa14:	18c03fcc 	andi	r3,r3,255
 800aa18:	18c0201c 	xori	r3,r3,128
 800aa1c:	01bfffc4 	movi	r6,-1
 800aa20:	18ffe004 	addi	r3,r3,-128
 800aa24:	003b4e06 	br	8009760 <__alt_data_end+0xf8009760>

0800aa28 <__vfiprintf_internal>:
 800aa28:	00820074 	movhi	r2,2049
 800aa2c:	108db504 	addi	r2,r2,14036
 800aa30:	2007883a 	mov	r3,r4
 800aa34:	11000017 	ldw	r4,0(r2)
 800aa38:	2805883a 	mov	r2,r5
 800aa3c:	300f883a 	mov	r7,r6
 800aa40:	180b883a 	mov	r5,r3
 800aa44:	100d883a 	mov	r6,r2
 800aa48:	80095e01 	jmpi	80095e0 <___vfiprintf_internal_r>

0800aa4c <_write_r>:
 800aa4c:	defffd04 	addi	sp,sp,-12
 800aa50:	dc400115 	stw	r17,4(sp)
 800aa54:	dc000015 	stw	r16,0(sp)
 800aa58:	2023883a 	mov	r17,r4
 800aa5c:	04020074 	movhi	r16,2049
 800aa60:	84148604 	addi	r16,r16,21016
 800aa64:	2809883a 	mov	r4,r5
 800aa68:	300b883a 	mov	r5,r6
 800aa6c:	380d883a 	mov	r6,r7
 800aa70:	dfc00215 	stw	ra,8(sp)
 800aa74:	80000015 	stw	zero,0(r16)
 800aa78:	800f2b80 	call	800f2b8 <write>
 800aa7c:	00ffffc4 	movi	r3,-1
 800aa80:	10c00526 	beq	r2,r3,800aa98 <_write_r+0x4c>
 800aa84:	dfc00217 	ldw	ra,8(sp)
 800aa88:	dc400117 	ldw	r17,4(sp)
 800aa8c:	dc000017 	ldw	r16,0(sp)
 800aa90:	dec00304 	addi	sp,sp,12
 800aa94:	f800283a 	ret
 800aa98:	80c00017 	ldw	r3,0(r16)
 800aa9c:	183ff926 	beq	r3,zero,800aa84 <__alt_data_end+0xf800aa84>
 800aaa0:	88c00015 	stw	r3,0(r17)
 800aaa4:	dfc00217 	ldw	ra,8(sp)
 800aaa8:	dc400117 	ldw	r17,4(sp)
 800aaac:	dc000017 	ldw	r16,0(sp)
 800aab0:	dec00304 	addi	sp,sp,12
 800aab4:	f800283a 	ret

0800aab8 <_close_r>:
 800aab8:	defffd04 	addi	sp,sp,-12
 800aabc:	dc400115 	stw	r17,4(sp)
 800aac0:	dc000015 	stw	r16,0(sp)
 800aac4:	2023883a 	mov	r17,r4
 800aac8:	04020074 	movhi	r16,2049
 800aacc:	84148604 	addi	r16,r16,21016
 800aad0:	2809883a 	mov	r4,r5
 800aad4:	dfc00215 	stw	ra,8(sp)
 800aad8:	80000015 	stw	zero,0(r16)
 800aadc:	800ea040 	call	800ea04 <close>
 800aae0:	00ffffc4 	movi	r3,-1
 800aae4:	10c00526 	beq	r2,r3,800aafc <_close_r+0x44>
 800aae8:	dfc00217 	ldw	ra,8(sp)
 800aaec:	dc400117 	ldw	r17,4(sp)
 800aaf0:	dc000017 	ldw	r16,0(sp)
 800aaf4:	dec00304 	addi	sp,sp,12
 800aaf8:	f800283a 	ret
 800aafc:	80c00017 	ldw	r3,0(r16)
 800ab00:	183ff926 	beq	r3,zero,800aae8 <__alt_data_end+0xf800aae8>
 800ab04:	88c00015 	stw	r3,0(r17)
 800ab08:	dfc00217 	ldw	ra,8(sp)
 800ab0c:	dc400117 	ldw	r17,4(sp)
 800ab10:	dc000017 	ldw	r16,0(sp)
 800ab14:	dec00304 	addi	sp,sp,12
 800ab18:	f800283a 	ret

0800ab1c <_calloc_r>:
 800ab1c:	defffe04 	addi	sp,sp,-8
 800ab20:	dc000015 	stw	r16,0(sp)
 800ab24:	2021883a 	mov	r16,r4
 800ab28:	2809883a 	mov	r4,r5
 800ab2c:	300b883a 	mov	r5,r6
 800ab30:	dfc00115 	stw	ra,4(sp)
 800ab34:	800c2080 	call	800c208 <__mulsi3>
 800ab38:	8009883a 	mov	r4,r16
 800ab3c:	100b883a 	mov	r5,r2
 800ab40:	800708c0 	call	800708c <_malloc_r>
 800ab44:	1021883a 	mov	r16,r2
 800ab48:	10002826 	beq	r2,zero,800abec <_calloc_r+0xd0>
 800ab4c:	11bfff17 	ldw	r6,-4(r2)
 800ab50:	00ffff04 	movi	r3,-4
 800ab54:	00800904 	movi	r2,36
 800ab58:	30cc703a 	and	r6,r6,r3
 800ab5c:	30cd883a 	add	r6,r6,r3
 800ab60:	11801436 	bltu	r2,r6,800abb4 <_calloc_r+0x98>
 800ab64:	00c004c4 	movi	r3,19
 800ab68:	19800936 	bltu	r3,r6,800ab90 <_calloc_r+0x74>
 800ab6c:	8005883a 	mov	r2,r16
 800ab70:	10000015 	stw	zero,0(r2)
 800ab74:	10000115 	stw	zero,4(r2)
 800ab78:	10000215 	stw	zero,8(r2)
 800ab7c:	8005883a 	mov	r2,r16
 800ab80:	dfc00117 	ldw	ra,4(sp)
 800ab84:	dc000017 	ldw	r16,0(sp)
 800ab88:	dec00204 	addi	sp,sp,8
 800ab8c:	f800283a 	ret
 800ab90:	80000015 	stw	zero,0(r16)
 800ab94:	80000115 	stw	zero,4(r16)
 800ab98:	00c006c4 	movi	r3,27
 800ab9c:	19800d2e 	bgeu	r3,r6,800abd4 <_calloc_r+0xb8>
 800aba0:	80000215 	stw	zero,8(r16)
 800aba4:	80000315 	stw	zero,12(r16)
 800aba8:	30800c26 	beq	r6,r2,800abdc <_calloc_r+0xc0>
 800abac:	80800404 	addi	r2,r16,16
 800abb0:	003fef06 	br	800ab70 <__alt_data_end+0xf800ab70>
 800abb4:	8009883a 	mov	r4,r16
 800abb8:	000b883a 	mov	r5,zero
 800abbc:	8007b800 	call	8007b80 <memset>
 800abc0:	8005883a 	mov	r2,r16
 800abc4:	dfc00117 	ldw	ra,4(sp)
 800abc8:	dc000017 	ldw	r16,0(sp)
 800abcc:	dec00204 	addi	sp,sp,8
 800abd0:	f800283a 	ret
 800abd4:	80800204 	addi	r2,r16,8
 800abd8:	003fe506 	br	800ab70 <__alt_data_end+0xf800ab70>
 800abdc:	80000415 	stw	zero,16(r16)
 800abe0:	80800604 	addi	r2,r16,24
 800abe4:	80000515 	stw	zero,20(r16)
 800abe8:	003fe106 	br	800ab70 <__alt_data_end+0xf800ab70>
 800abec:	0005883a 	mov	r2,zero
 800abf0:	003fe306 	br	800ab80 <__alt_data_end+0xf800ab80>

0800abf4 <_fclose_r>:
 800abf4:	defffc04 	addi	sp,sp,-16
 800abf8:	dc000015 	stw	r16,0(sp)
 800abfc:	dfc00315 	stw	ra,12(sp)
 800ac00:	dc800215 	stw	r18,8(sp)
 800ac04:	dc400115 	stw	r17,4(sp)
 800ac08:	2821883a 	mov	r16,r5
 800ac0c:	28003126 	beq	r5,zero,800acd4 <_fclose_r+0xe0>
 800ac10:	2023883a 	mov	r17,r4
 800ac14:	80063ac0 	call	80063ac <__sfp_lock_acquire>
 800ac18:	88000226 	beq	r17,zero,800ac24 <_fclose_r+0x30>
 800ac1c:	88800e17 	ldw	r2,56(r17)
 800ac20:	10003326 	beq	r2,zero,800acf0 <_fclose_r+0xfc>
 800ac24:	8080030f 	ldh	r2,12(r16)
 800ac28:	10002226 	beq	r2,zero,800acb4 <_fclose_r+0xc0>
 800ac2c:	8809883a 	mov	r4,r17
 800ac30:	800b883a 	mov	r5,r16
 800ac34:	8005dd40 	call	8005dd4 <_fflush_r>
 800ac38:	80c00b17 	ldw	r3,44(r16)
 800ac3c:	1025883a 	mov	r18,r2
 800ac40:	18000426 	beq	r3,zero,800ac54 <_fclose_r+0x60>
 800ac44:	81400717 	ldw	r5,28(r16)
 800ac48:	8809883a 	mov	r4,r17
 800ac4c:	183ee83a 	callr	r3
 800ac50:	10003016 	blt	r2,zero,800ad14 <_fclose_r+0x120>
 800ac54:	8080030b 	ldhu	r2,12(r16)
 800ac58:	1080200c 	andi	r2,r2,128
 800ac5c:	1000291e 	bne	r2,zero,800ad04 <_fclose_r+0x110>
 800ac60:	81400c17 	ldw	r5,48(r16)
 800ac64:	28000526 	beq	r5,zero,800ac7c <_fclose_r+0x88>
 800ac68:	80801004 	addi	r2,r16,64
 800ac6c:	28800226 	beq	r5,r2,800ac78 <_fclose_r+0x84>
 800ac70:	8809883a 	mov	r4,r17
 800ac74:	80065280 	call	8006528 <_free_r>
 800ac78:	80000c15 	stw	zero,48(r16)
 800ac7c:	81401117 	ldw	r5,68(r16)
 800ac80:	28000326 	beq	r5,zero,800ac90 <_fclose_r+0x9c>
 800ac84:	8809883a 	mov	r4,r17
 800ac88:	80065280 	call	8006528 <_free_r>
 800ac8c:	80001115 	stw	zero,68(r16)
 800ac90:	8000030d 	sth	zero,12(r16)
 800ac94:	80063b00 	call	80063b0 <__sfp_lock_release>
 800ac98:	9005883a 	mov	r2,r18
 800ac9c:	dfc00317 	ldw	ra,12(sp)
 800aca0:	dc800217 	ldw	r18,8(sp)
 800aca4:	dc400117 	ldw	r17,4(sp)
 800aca8:	dc000017 	ldw	r16,0(sp)
 800acac:	dec00404 	addi	sp,sp,16
 800acb0:	f800283a 	ret
 800acb4:	80063b00 	call	80063b0 <__sfp_lock_release>
 800acb8:	0005883a 	mov	r2,zero
 800acbc:	dfc00317 	ldw	ra,12(sp)
 800acc0:	dc800217 	ldw	r18,8(sp)
 800acc4:	dc400117 	ldw	r17,4(sp)
 800acc8:	dc000017 	ldw	r16,0(sp)
 800accc:	dec00404 	addi	sp,sp,16
 800acd0:	f800283a 	ret
 800acd4:	0005883a 	mov	r2,zero
 800acd8:	dfc00317 	ldw	ra,12(sp)
 800acdc:	dc800217 	ldw	r18,8(sp)
 800ace0:	dc400117 	ldw	r17,4(sp)
 800ace4:	dc000017 	ldw	r16,0(sp)
 800ace8:	dec00404 	addi	sp,sp,16
 800acec:	f800283a 	ret
 800acf0:	8809883a 	mov	r4,r17
 800acf4:	80060f40 	call	80060f4 <__sinit>
 800acf8:	8080030f 	ldh	r2,12(r16)
 800acfc:	103fcb1e 	bne	r2,zero,800ac2c <__alt_data_end+0xf800ac2c>
 800ad00:	003fec06 	br	800acb4 <__alt_data_end+0xf800acb4>
 800ad04:	81400417 	ldw	r5,16(r16)
 800ad08:	8809883a 	mov	r4,r17
 800ad0c:	80065280 	call	8006528 <_free_r>
 800ad10:	003fd306 	br	800ac60 <__alt_data_end+0xf800ac60>
 800ad14:	04bfffc4 	movi	r18,-1
 800ad18:	003fce06 	br	800ac54 <__alt_data_end+0xf800ac54>

0800ad1c <fclose>:
 800ad1c:	00820074 	movhi	r2,2049
 800ad20:	108db504 	addi	r2,r2,14036
 800ad24:	200b883a 	mov	r5,r4
 800ad28:	11000017 	ldw	r4,0(r2)
 800ad2c:	800abf41 	jmpi	800abf4 <_fclose_r>

0800ad30 <_fputwc_r>:
 800ad30:	3080030b 	ldhu	r2,12(r6)
 800ad34:	defff804 	addi	sp,sp,-32
 800ad38:	dcc00415 	stw	r19,16(sp)
 800ad3c:	dc800315 	stw	r18,12(sp)
 800ad40:	dc000115 	stw	r16,4(sp)
 800ad44:	dfc00715 	stw	ra,28(sp)
 800ad48:	dd400615 	stw	r21,24(sp)
 800ad4c:	dd000515 	stw	r20,20(sp)
 800ad50:	dc400215 	stw	r17,8(sp)
 800ad54:	10c8000c 	andi	r3,r2,8192
 800ad58:	3021883a 	mov	r16,r6
 800ad5c:	2027883a 	mov	r19,r4
 800ad60:	2825883a 	mov	r18,r5
 800ad64:	1800051e 	bne	r3,zero,800ad7c <_fputwc_r+0x4c>
 800ad68:	30c01917 	ldw	r3,100(r6)
 800ad6c:	10880014 	ori	r2,r2,8192
 800ad70:	3080030d 	sth	r2,12(r6)
 800ad74:	18880014 	ori	r2,r3,8192
 800ad78:	30801915 	stw	r2,100(r6)
 800ad7c:	8006e800 	call	8006e80 <__locale_mb_cur_max>
 800ad80:	00c00044 	movi	r3,1
 800ad84:	10c03e26 	beq	r2,r3,800ae80 <_fputwc_r+0x150>
 800ad88:	9809883a 	mov	r4,r19
 800ad8c:	d80b883a 	mov	r5,sp
 800ad90:	900d883a 	mov	r6,r18
 800ad94:	81c01704 	addi	r7,r16,92
 800ad98:	800b26c0 	call	800b26c <_wcrtomb_r>
 800ad9c:	1029883a 	mov	r20,r2
 800ada0:	00bfffc4 	movi	r2,-1
 800ada4:	a0802026 	beq	r20,r2,800ae28 <_fputwc_r+0xf8>
 800ada8:	d9400003 	ldbu	r5,0(sp)
 800adac:	a0001c26 	beq	r20,zero,800ae20 <_fputwc_r+0xf0>
 800adb0:	0023883a 	mov	r17,zero
 800adb4:	05400284 	movi	r21,10
 800adb8:	00000906 	br	800ade0 <_fputwc_r+0xb0>
 800adbc:	80c00017 	ldw	r3,0(r16)
 800adc0:	19400005 	stb	r5,0(r3)
 800adc4:	80c00017 	ldw	r3,0(r16)
 800adc8:	18c00044 	addi	r3,r3,1
 800adcc:	80c00015 	stw	r3,0(r16)
 800add0:	8c400044 	addi	r17,r17,1
 800add4:	dc47883a 	add	r3,sp,r17
 800add8:	8d00112e 	bgeu	r17,r20,800ae20 <_fputwc_r+0xf0>
 800addc:	19400003 	ldbu	r5,0(r3)
 800ade0:	80c00217 	ldw	r3,8(r16)
 800ade4:	18ffffc4 	addi	r3,r3,-1
 800ade8:	80c00215 	stw	r3,8(r16)
 800adec:	183ff30e 	bge	r3,zero,800adbc <__alt_data_end+0xf800adbc>
 800adf0:	80800617 	ldw	r2,24(r16)
 800adf4:	18801916 	blt	r3,r2,800ae5c <_fputwc_r+0x12c>
 800adf8:	80800017 	ldw	r2,0(r16)
 800adfc:	11400005 	stb	r5,0(r2)
 800ae00:	80800017 	ldw	r2,0(r16)
 800ae04:	10c00003 	ldbu	r3,0(r2)
 800ae08:	10800044 	addi	r2,r2,1
 800ae0c:	1d402326 	beq	r3,r21,800ae9c <_fputwc_r+0x16c>
 800ae10:	8c400044 	addi	r17,r17,1
 800ae14:	80800015 	stw	r2,0(r16)
 800ae18:	dc47883a 	add	r3,sp,r17
 800ae1c:	8d3fef36 	bltu	r17,r20,800addc <__alt_data_end+0xf800addc>
 800ae20:	9005883a 	mov	r2,r18
 800ae24:	00000406 	br	800ae38 <_fputwc_r+0x108>
 800ae28:	80c0030b 	ldhu	r3,12(r16)
 800ae2c:	a005883a 	mov	r2,r20
 800ae30:	18c01014 	ori	r3,r3,64
 800ae34:	80c0030d 	sth	r3,12(r16)
 800ae38:	dfc00717 	ldw	ra,28(sp)
 800ae3c:	dd400617 	ldw	r21,24(sp)
 800ae40:	dd000517 	ldw	r20,20(sp)
 800ae44:	dcc00417 	ldw	r19,16(sp)
 800ae48:	dc800317 	ldw	r18,12(sp)
 800ae4c:	dc400217 	ldw	r17,8(sp)
 800ae50:	dc000117 	ldw	r16,4(sp)
 800ae54:	dec00804 	addi	sp,sp,32
 800ae58:	f800283a 	ret
 800ae5c:	9809883a 	mov	r4,r19
 800ae60:	29403fcc 	andi	r5,r5,255
 800ae64:	800d883a 	mov	r6,r16
 800ae68:	800b0d00 	call	800b0d0 <__swbuf_r>
 800ae6c:	10bfffe0 	cmpeqi	r2,r2,-1
 800ae70:	10803fcc 	andi	r2,r2,255
 800ae74:	103fd626 	beq	r2,zero,800add0 <__alt_data_end+0xf800add0>
 800ae78:	00bfffc4 	movi	r2,-1
 800ae7c:	003fee06 	br	800ae38 <__alt_data_end+0xf800ae38>
 800ae80:	90ffffc4 	addi	r3,r18,-1
 800ae84:	01003f84 	movi	r4,254
 800ae88:	20ffbf36 	bltu	r4,r3,800ad88 <__alt_data_end+0xf800ad88>
 800ae8c:	900b883a 	mov	r5,r18
 800ae90:	dc800005 	stb	r18,0(sp)
 800ae94:	1029883a 	mov	r20,r2
 800ae98:	003fc506 	br	800adb0 <__alt_data_end+0xf800adb0>
 800ae9c:	9809883a 	mov	r4,r19
 800aea0:	a80b883a 	mov	r5,r21
 800aea4:	800d883a 	mov	r6,r16
 800aea8:	800b0d00 	call	800b0d0 <__swbuf_r>
 800aeac:	10bfffe0 	cmpeqi	r2,r2,-1
 800aeb0:	003fef06 	br	800ae70 <__alt_data_end+0xf800ae70>

0800aeb4 <fputwc>:
 800aeb4:	defffc04 	addi	sp,sp,-16
 800aeb8:	dc000115 	stw	r16,4(sp)
 800aebc:	04020074 	movhi	r16,2049
 800aec0:	840db504 	addi	r16,r16,14036
 800aec4:	80800017 	ldw	r2,0(r16)
 800aec8:	dc400215 	stw	r17,8(sp)
 800aecc:	dfc00315 	stw	ra,12(sp)
 800aed0:	2023883a 	mov	r17,r4
 800aed4:	280d883a 	mov	r6,r5
 800aed8:	10000d26 	beq	r2,zero,800af10 <fputwc+0x5c>
 800aedc:	10c00e17 	ldw	r3,56(r2)
 800aee0:	1009883a 	mov	r4,r2
 800aee4:	1800041e 	bne	r3,zero,800aef8 <fputwc+0x44>
 800aee8:	d9400015 	stw	r5,0(sp)
 800aeec:	80060f40 	call	80060f4 <__sinit>
 800aef0:	81000017 	ldw	r4,0(r16)
 800aef4:	d9800017 	ldw	r6,0(sp)
 800aef8:	880b883a 	mov	r5,r17
 800aefc:	dfc00317 	ldw	ra,12(sp)
 800af00:	dc400217 	ldw	r17,8(sp)
 800af04:	dc000117 	ldw	r16,4(sp)
 800af08:	dec00404 	addi	sp,sp,16
 800af0c:	800ad301 	jmpi	800ad30 <_fputwc_r>
 800af10:	0009883a 	mov	r4,zero
 800af14:	880b883a 	mov	r5,r17
 800af18:	dfc00317 	ldw	ra,12(sp)
 800af1c:	dc400217 	ldw	r17,8(sp)
 800af20:	dc000117 	ldw	r16,4(sp)
 800af24:	dec00404 	addi	sp,sp,16
 800af28:	800ad301 	jmpi	800ad30 <_fputwc_r>

0800af2c <_fstat_r>:
 800af2c:	defffd04 	addi	sp,sp,-12
 800af30:	dc400115 	stw	r17,4(sp)
 800af34:	dc000015 	stw	r16,0(sp)
 800af38:	2023883a 	mov	r17,r4
 800af3c:	04020074 	movhi	r16,2049
 800af40:	84148604 	addi	r16,r16,21016
 800af44:	2809883a 	mov	r4,r5
 800af48:	300b883a 	mov	r5,r6
 800af4c:	dfc00215 	stw	ra,8(sp)
 800af50:	80000015 	stw	zero,0(r16)
 800af54:	800eb500 	call	800eb50 <fstat>
 800af58:	00ffffc4 	movi	r3,-1
 800af5c:	10c00526 	beq	r2,r3,800af74 <_fstat_r+0x48>
 800af60:	dfc00217 	ldw	ra,8(sp)
 800af64:	dc400117 	ldw	r17,4(sp)
 800af68:	dc000017 	ldw	r16,0(sp)
 800af6c:	dec00304 	addi	sp,sp,12
 800af70:	f800283a 	ret
 800af74:	80c00017 	ldw	r3,0(r16)
 800af78:	183ff926 	beq	r3,zero,800af60 <__alt_data_end+0xf800af60>
 800af7c:	88c00015 	stw	r3,0(r17)
 800af80:	dfc00217 	ldw	ra,8(sp)
 800af84:	dc400117 	ldw	r17,4(sp)
 800af88:	dc000017 	ldw	r16,0(sp)
 800af8c:	dec00304 	addi	sp,sp,12
 800af90:	f800283a 	ret

0800af94 <_isatty_r>:
 800af94:	defffd04 	addi	sp,sp,-12
 800af98:	dc400115 	stw	r17,4(sp)
 800af9c:	dc000015 	stw	r16,0(sp)
 800afa0:	2023883a 	mov	r17,r4
 800afa4:	04020074 	movhi	r16,2049
 800afa8:	84148604 	addi	r16,r16,21016
 800afac:	2809883a 	mov	r4,r5
 800afb0:	dfc00215 	stw	ra,8(sp)
 800afb4:	80000015 	stw	zero,0(r16)
 800afb8:	800ec540 	call	800ec54 <isatty>
 800afbc:	00ffffc4 	movi	r3,-1
 800afc0:	10c00526 	beq	r2,r3,800afd8 <_isatty_r+0x44>
 800afc4:	dfc00217 	ldw	ra,8(sp)
 800afc8:	dc400117 	ldw	r17,4(sp)
 800afcc:	dc000017 	ldw	r16,0(sp)
 800afd0:	dec00304 	addi	sp,sp,12
 800afd4:	f800283a 	ret
 800afd8:	80c00017 	ldw	r3,0(r16)
 800afdc:	183ff926 	beq	r3,zero,800afc4 <__alt_data_end+0xf800afc4>
 800afe0:	88c00015 	stw	r3,0(r17)
 800afe4:	dfc00217 	ldw	ra,8(sp)
 800afe8:	dc400117 	ldw	r17,4(sp)
 800afec:	dc000017 	ldw	r16,0(sp)
 800aff0:	dec00304 	addi	sp,sp,12
 800aff4:	f800283a 	ret

0800aff8 <_lseek_r>:
 800aff8:	defffd04 	addi	sp,sp,-12
 800affc:	dc400115 	stw	r17,4(sp)
 800b000:	dc000015 	stw	r16,0(sp)
 800b004:	2023883a 	mov	r17,r4
 800b008:	04020074 	movhi	r16,2049
 800b00c:	84148604 	addi	r16,r16,21016
 800b010:	2809883a 	mov	r4,r5
 800b014:	300b883a 	mov	r5,r6
 800b018:	380d883a 	mov	r6,r7
 800b01c:	dfc00215 	stw	ra,8(sp)
 800b020:	80000015 	stw	zero,0(r16)
 800b024:	800ee300 	call	800ee30 <lseek>
 800b028:	00ffffc4 	movi	r3,-1
 800b02c:	10c00526 	beq	r2,r3,800b044 <_lseek_r+0x4c>
 800b030:	dfc00217 	ldw	ra,8(sp)
 800b034:	dc400117 	ldw	r17,4(sp)
 800b038:	dc000017 	ldw	r16,0(sp)
 800b03c:	dec00304 	addi	sp,sp,12
 800b040:	f800283a 	ret
 800b044:	80c00017 	ldw	r3,0(r16)
 800b048:	183ff926 	beq	r3,zero,800b030 <__alt_data_end+0xf800b030>
 800b04c:	88c00015 	stw	r3,0(r17)
 800b050:	dfc00217 	ldw	ra,8(sp)
 800b054:	dc400117 	ldw	r17,4(sp)
 800b058:	dc000017 	ldw	r16,0(sp)
 800b05c:	dec00304 	addi	sp,sp,12
 800b060:	f800283a 	ret

0800b064 <_read_r>:
 800b064:	defffd04 	addi	sp,sp,-12
 800b068:	dc400115 	stw	r17,4(sp)
 800b06c:	dc000015 	stw	r16,0(sp)
 800b070:	2023883a 	mov	r17,r4
 800b074:	04020074 	movhi	r16,2049
 800b078:	84148604 	addi	r16,r16,21016
 800b07c:	2809883a 	mov	r4,r5
 800b080:	300b883a 	mov	r5,r6
 800b084:	380d883a 	mov	r6,r7
 800b088:	dfc00215 	stw	ra,8(sp)
 800b08c:	80000015 	stw	zero,0(r16)
 800b090:	800f0100 	call	800f010 <read>
 800b094:	00ffffc4 	movi	r3,-1
 800b098:	10c00526 	beq	r2,r3,800b0b0 <_read_r+0x4c>
 800b09c:	dfc00217 	ldw	ra,8(sp)
 800b0a0:	dc400117 	ldw	r17,4(sp)
 800b0a4:	dc000017 	ldw	r16,0(sp)
 800b0a8:	dec00304 	addi	sp,sp,12
 800b0ac:	f800283a 	ret
 800b0b0:	80c00017 	ldw	r3,0(r16)
 800b0b4:	183ff926 	beq	r3,zero,800b09c <__alt_data_end+0xf800b09c>
 800b0b8:	88c00015 	stw	r3,0(r17)
 800b0bc:	dfc00217 	ldw	ra,8(sp)
 800b0c0:	dc400117 	ldw	r17,4(sp)
 800b0c4:	dc000017 	ldw	r16,0(sp)
 800b0c8:	dec00304 	addi	sp,sp,12
 800b0cc:	f800283a 	ret

0800b0d0 <__swbuf_r>:
 800b0d0:	defffc04 	addi	sp,sp,-16
 800b0d4:	dc800215 	stw	r18,8(sp)
 800b0d8:	dc400115 	stw	r17,4(sp)
 800b0dc:	dc000015 	stw	r16,0(sp)
 800b0e0:	dfc00315 	stw	ra,12(sp)
 800b0e4:	2023883a 	mov	r17,r4
 800b0e8:	2825883a 	mov	r18,r5
 800b0ec:	3021883a 	mov	r16,r6
 800b0f0:	20000226 	beq	r4,zero,800b0fc <__swbuf_r+0x2c>
 800b0f4:	20800e17 	ldw	r2,56(r4)
 800b0f8:	10004d26 	beq	r2,zero,800b230 <__swbuf_r+0x160>
 800b0fc:	80800617 	ldw	r2,24(r16)
 800b100:	80c0030b 	ldhu	r3,12(r16)
 800b104:	80800215 	stw	r2,8(r16)
 800b108:	1880020c 	andi	r2,r3,8
 800b10c:	10004126 	beq	r2,zero,800b214 <__swbuf_r+0x144>
 800b110:	80800417 	ldw	r2,16(r16)
 800b114:	10003f26 	beq	r2,zero,800b214 <__swbuf_r+0x144>
 800b118:	1908000c 	andi	r4,r3,8192
 800b11c:	94803fcc 	andi	r18,r18,255
 800b120:	20001726 	beq	r4,zero,800b180 <__swbuf_r+0xb0>
 800b124:	80c00017 	ldw	r3,0(r16)
 800b128:	81000517 	ldw	r4,20(r16)
 800b12c:	1885c83a 	sub	r2,r3,r2
 800b130:	11001d0e 	bge	r2,r4,800b1a8 <__swbuf_r+0xd8>
 800b134:	81000217 	ldw	r4,8(r16)
 800b138:	19400044 	addi	r5,r3,1
 800b13c:	81400015 	stw	r5,0(r16)
 800b140:	213fffc4 	addi	r4,r4,-1
 800b144:	81000215 	stw	r4,8(r16)
 800b148:	1c800005 	stb	r18,0(r3)
 800b14c:	80c00517 	ldw	r3,20(r16)
 800b150:	10800044 	addi	r2,r2,1
 800b154:	18802226 	beq	r3,r2,800b1e0 <__swbuf_r+0x110>
 800b158:	8080030b 	ldhu	r2,12(r16)
 800b15c:	1080004c 	andi	r2,r2,1
 800b160:	1000251e 	bne	r2,zero,800b1f8 <__swbuf_r+0x128>
 800b164:	9005883a 	mov	r2,r18
 800b168:	dfc00317 	ldw	ra,12(sp)
 800b16c:	dc800217 	ldw	r18,8(sp)
 800b170:	dc400117 	ldw	r17,4(sp)
 800b174:	dc000017 	ldw	r16,0(sp)
 800b178:	dec00404 	addi	sp,sp,16
 800b17c:	f800283a 	ret
 800b180:	81401917 	ldw	r5,100(r16)
 800b184:	18c80014 	ori	r3,r3,8192
 800b188:	0137ffc4 	movi	r4,-8193
 800b18c:	2908703a 	and	r4,r5,r4
 800b190:	80c0030d 	sth	r3,12(r16)
 800b194:	80c00017 	ldw	r3,0(r16)
 800b198:	81001915 	stw	r4,100(r16)
 800b19c:	81000517 	ldw	r4,20(r16)
 800b1a0:	1885c83a 	sub	r2,r3,r2
 800b1a4:	113fe316 	blt	r2,r4,800b134 <__alt_data_end+0xf800b134>
 800b1a8:	8809883a 	mov	r4,r17
 800b1ac:	800b883a 	mov	r5,r16
 800b1b0:	8005dd40 	call	8005dd4 <_fflush_r>
 800b1b4:	10000e1e 	bne	r2,zero,800b1f0 <__swbuf_r+0x120>
 800b1b8:	80c00017 	ldw	r3,0(r16)
 800b1bc:	81000217 	ldw	r4,8(r16)
 800b1c0:	00800044 	movi	r2,1
 800b1c4:	19400044 	addi	r5,r3,1
 800b1c8:	213fffc4 	addi	r4,r4,-1
 800b1cc:	81400015 	stw	r5,0(r16)
 800b1d0:	81000215 	stw	r4,8(r16)
 800b1d4:	1c800005 	stb	r18,0(r3)
 800b1d8:	80c00517 	ldw	r3,20(r16)
 800b1dc:	18bfde1e 	bne	r3,r2,800b158 <__alt_data_end+0xf800b158>
 800b1e0:	8809883a 	mov	r4,r17
 800b1e4:	800b883a 	mov	r5,r16
 800b1e8:	8005dd40 	call	8005dd4 <_fflush_r>
 800b1ec:	103fdd26 	beq	r2,zero,800b164 <__alt_data_end+0xf800b164>
 800b1f0:	00bfffc4 	movi	r2,-1
 800b1f4:	003fdc06 	br	800b168 <__alt_data_end+0xf800b168>
 800b1f8:	00800284 	movi	r2,10
 800b1fc:	90bfd91e 	bne	r18,r2,800b164 <__alt_data_end+0xf800b164>
 800b200:	8809883a 	mov	r4,r17
 800b204:	800b883a 	mov	r5,r16
 800b208:	8005dd40 	call	8005dd4 <_fflush_r>
 800b20c:	103fd526 	beq	r2,zero,800b164 <__alt_data_end+0xf800b164>
 800b210:	003ff706 	br	800b1f0 <__alt_data_end+0xf800b1f0>
 800b214:	8809883a 	mov	r4,r17
 800b218:	800b883a 	mov	r5,r16
 800b21c:	80044380 	call	8004438 <__swsetup_r>
 800b220:	80c0030b 	ldhu	r3,12(r16)
 800b224:	1000041e 	bne	r2,zero,800b238 <__swbuf_r+0x168>
 800b228:	80800417 	ldw	r2,16(r16)
 800b22c:	003fba06 	br	800b118 <__alt_data_end+0xf800b118>
 800b230:	80060f40 	call	80060f4 <__sinit>
 800b234:	003fb106 	br	800b0fc <__alt_data_end+0xf800b0fc>
 800b238:	18c01014 	ori	r3,r3,64
 800b23c:	80c0030d 	sth	r3,12(r16)
 800b240:	00c00244 	movi	r3,9
 800b244:	00bfffc4 	movi	r2,-1
 800b248:	88c00015 	stw	r3,0(r17)
 800b24c:	003fc606 	br	800b168 <__alt_data_end+0xf800b168>

0800b250 <__swbuf>:
 800b250:	00c20074 	movhi	r3,2049
 800b254:	18cdb504 	addi	r3,r3,14036
 800b258:	2005883a 	mov	r2,r4
 800b25c:	19000017 	ldw	r4,0(r3)
 800b260:	280d883a 	mov	r6,r5
 800b264:	100b883a 	mov	r5,r2
 800b268:	800b0d01 	jmpi	800b0d0 <__swbuf_r>

0800b26c <_wcrtomb_r>:
 800b26c:	defff604 	addi	sp,sp,-40
 800b270:	dc800815 	stw	r18,32(sp)
 800b274:	dc400715 	stw	r17,28(sp)
 800b278:	dc000615 	stw	r16,24(sp)
 800b27c:	00820074 	movhi	r2,2049
 800b280:	108db904 	addi	r2,r2,14052
 800b284:	dfc00915 	stw	ra,36(sp)
 800b288:	2021883a 	mov	r16,r4
 800b28c:	3823883a 	mov	r17,r7
 800b290:	14800017 	ldw	r18,0(r2)
 800b294:	28001426 	beq	r5,zero,800b2e8 <_wcrtomb_r+0x7c>
 800b298:	d9400415 	stw	r5,16(sp)
 800b29c:	d9800515 	stw	r6,20(sp)
 800b2a0:	8006e740 	call	8006e74 <__locale_charset>
 800b2a4:	d9400417 	ldw	r5,16(sp)
 800b2a8:	d9800517 	ldw	r6,20(sp)
 800b2ac:	8009883a 	mov	r4,r16
 800b2b0:	dc400015 	stw	r17,0(sp)
 800b2b4:	100f883a 	mov	r7,r2
 800b2b8:	903ee83a 	callr	r18
 800b2bc:	00ffffc4 	movi	r3,-1
 800b2c0:	10c0031e 	bne	r2,r3,800b2d0 <_wcrtomb_r+0x64>
 800b2c4:	88000015 	stw	zero,0(r17)
 800b2c8:	00c02284 	movi	r3,138
 800b2cc:	80c00015 	stw	r3,0(r16)
 800b2d0:	dfc00917 	ldw	ra,36(sp)
 800b2d4:	dc800817 	ldw	r18,32(sp)
 800b2d8:	dc400717 	ldw	r17,28(sp)
 800b2dc:	dc000617 	ldw	r16,24(sp)
 800b2e0:	dec00a04 	addi	sp,sp,40
 800b2e4:	f800283a 	ret
 800b2e8:	8006e740 	call	8006e74 <__locale_charset>
 800b2ec:	8009883a 	mov	r4,r16
 800b2f0:	dc400015 	stw	r17,0(sp)
 800b2f4:	d9400104 	addi	r5,sp,4
 800b2f8:	000d883a 	mov	r6,zero
 800b2fc:	100f883a 	mov	r7,r2
 800b300:	903ee83a 	callr	r18
 800b304:	003fed06 	br	800b2bc <__alt_data_end+0xf800b2bc>

0800b308 <wcrtomb>:
 800b308:	defff504 	addi	sp,sp,-44
 800b30c:	dc400515 	stw	r17,20(sp)
 800b310:	dc000415 	stw	r16,16(sp)
 800b314:	dfc00a15 	stw	ra,40(sp)
 800b318:	dd400915 	stw	r21,36(sp)
 800b31c:	dd000815 	stw	r20,32(sp)
 800b320:	dcc00715 	stw	r19,28(sp)
 800b324:	dc800615 	stw	r18,24(sp)
 800b328:	2021883a 	mov	r16,r4
 800b32c:	3023883a 	mov	r17,r6
 800b330:	20001d26 	beq	r4,zero,800b3a8 <wcrtomb+0xa0>
 800b334:	04820074 	movhi	r18,2049
 800b338:	948db504 	addi	r18,r18,14036
 800b33c:	95400017 	ldw	r21,0(r18)
 800b340:	00820074 	movhi	r2,2049
 800b344:	108db904 	addi	r2,r2,14052
 800b348:	15000017 	ldw	r20,0(r2)
 800b34c:	2827883a 	mov	r19,r5
 800b350:	8006e740 	call	8006e74 <__locale_charset>
 800b354:	a809883a 	mov	r4,r21
 800b358:	dc400015 	stw	r17,0(sp)
 800b35c:	800b883a 	mov	r5,r16
 800b360:	980d883a 	mov	r6,r19
 800b364:	100f883a 	mov	r7,r2
 800b368:	a03ee83a 	callr	r20
 800b36c:	00ffffc4 	movi	r3,-1
 800b370:	10c0041e 	bne	r2,r3,800b384 <wcrtomb+0x7c>
 800b374:	90c00017 	ldw	r3,0(r18)
 800b378:	01002284 	movi	r4,138
 800b37c:	88000015 	stw	zero,0(r17)
 800b380:	19000015 	stw	r4,0(r3)
 800b384:	dfc00a17 	ldw	ra,40(sp)
 800b388:	dd400917 	ldw	r21,36(sp)
 800b38c:	dd000817 	ldw	r20,32(sp)
 800b390:	dcc00717 	ldw	r19,28(sp)
 800b394:	dc800617 	ldw	r18,24(sp)
 800b398:	dc400517 	ldw	r17,20(sp)
 800b39c:	dc000417 	ldw	r16,16(sp)
 800b3a0:	dec00b04 	addi	sp,sp,44
 800b3a4:	f800283a 	ret
 800b3a8:	04820074 	movhi	r18,2049
 800b3ac:	948db504 	addi	r18,r18,14036
 800b3b0:	94c00017 	ldw	r19,0(r18)
 800b3b4:	00820074 	movhi	r2,2049
 800b3b8:	108db904 	addi	r2,r2,14052
 800b3bc:	14000017 	ldw	r16,0(r2)
 800b3c0:	8006e740 	call	8006e74 <__locale_charset>
 800b3c4:	9809883a 	mov	r4,r19
 800b3c8:	dc400015 	stw	r17,0(sp)
 800b3cc:	d9400104 	addi	r5,sp,4
 800b3d0:	000d883a 	mov	r6,zero
 800b3d4:	100f883a 	mov	r7,r2
 800b3d8:	803ee83a 	callr	r16
 800b3dc:	003fe306 	br	800b36c <__alt_data_end+0xf800b36c>

0800b3e0 <__ascii_wctomb>:
 800b3e0:	28000526 	beq	r5,zero,800b3f8 <__ascii_wctomb+0x18>
 800b3e4:	00803fc4 	movi	r2,255
 800b3e8:	11800536 	bltu	r2,r6,800b400 <__ascii_wctomb+0x20>
 800b3ec:	29800005 	stb	r6,0(r5)
 800b3f0:	00800044 	movi	r2,1
 800b3f4:	f800283a 	ret
 800b3f8:	0005883a 	mov	r2,zero
 800b3fc:	f800283a 	ret
 800b400:	00802284 	movi	r2,138
 800b404:	20800015 	stw	r2,0(r4)
 800b408:	00bfffc4 	movi	r2,-1
 800b40c:	f800283a 	ret

0800b410 <_wctomb_r>:
 800b410:	defff904 	addi	sp,sp,-28
 800b414:	00820074 	movhi	r2,2049
 800b418:	108db904 	addi	r2,r2,14052
 800b41c:	dfc00615 	stw	ra,24(sp)
 800b420:	dc400515 	stw	r17,20(sp)
 800b424:	dc000415 	stw	r16,16(sp)
 800b428:	3823883a 	mov	r17,r7
 800b42c:	14000017 	ldw	r16,0(r2)
 800b430:	d9000115 	stw	r4,4(sp)
 800b434:	d9400215 	stw	r5,8(sp)
 800b438:	d9800315 	stw	r6,12(sp)
 800b43c:	8006e740 	call	8006e74 <__locale_charset>
 800b440:	d9000117 	ldw	r4,4(sp)
 800b444:	d9400217 	ldw	r5,8(sp)
 800b448:	d9800317 	ldw	r6,12(sp)
 800b44c:	dc400015 	stw	r17,0(sp)
 800b450:	100f883a 	mov	r7,r2
 800b454:	803ee83a 	callr	r16
 800b458:	dfc00617 	ldw	ra,24(sp)
 800b45c:	dc400517 	ldw	r17,20(sp)
 800b460:	dc000417 	ldw	r16,16(sp)
 800b464:	dec00704 	addi	sp,sp,28
 800b468:	f800283a 	ret

0800b46c <__udivdi3>:
 800b46c:	defff504 	addi	sp,sp,-44
 800b470:	dc800315 	stw	r18,12(sp)
 800b474:	dc400215 	stw	r17,8(sp)
 800b478:	dfc00a15 	stw	ra,40(sp)
 800b47c:	df000915 	stw	fp,36(sp)
 800b480:	ddc00815 	stw	r23,32(sp)
 800b484:	dd800715 	stw	r22,28(sp)
 800b488:	dd400615 	stw	r21,24(sp)
 800b48c:	dd000515 	stw	r20,20(sp)
 800b490:	dcc00415 	stw	r19,16(sp)
 800b494:	dc000115 	stw	r16,4(sp)
 800b498:	2025883a 	mov	r18,r4
 800b49c:	2823883a 	mov	r17,r5
 800b4a0:	3800481e 	bne	r7,zero,800b5c4 <__udivdi3+0x158>
 800b4a4:	3021883a 	mov	r16,r6
 800b4a8:	2027883a 	mov	r19,r4
 800b4ac:	29805a2e 	bgeu	r5,r6,800b618 <__udivdi3+0x1ac>
 800b4b0:	00bfffd4 	movui	r2,65535
 800b4b4:	2829883a 	mov	r20,r5
 800b4b8:	1180b436 	bltu	r2,r6,800b78c <__udivdi3+0x320>
 800b4bc:	00803fc4 	movi	r2,255
 800b4c0:	11816736 	bltu	r2,r6,800ba60 <__udivdi3+0x5f4>
 800b4c4:	0005883a 	mov	r2,zero
 800b4c8:	0007883a 	mov	r3,zero
 800b4cc:	3084d83a 	srl	r2,r6,r2
 800b4d0:	01020074 	movhi	r4,2049
 800b4d4:	2106be04 	addi	r4,r4,6904
 800b4d8:	2085883a 	add	r2,r4,r2
 800b4dc:	10800003 	ldbu	r2,0(r2)
 800b4e0:	10c7883a 	add	r3,r2,r3
 800b4e4:	00800804 	movi	r2,32
 800b4e8:	10c5c83a 	sub	r2,r2,r3
 800b4ec:	10000526 	beq	r2,zero,800b504 <__udivdi3+0x98>
 800b4f0:	88a2983a 	sll	r17,r17,r2
 800b4f4:	90c6d83a 	srl	r3,r18,r3
 800b4f8:	30a0983a 	sll	r16,r6,r2
 800b4fc:	90a6983a 	sll	r19,r18,r2
 800b500:	88e8b03a 	or	r20,r17,r3
 800b504:	8022d43a 	srli	r17,r16,16
 800b508:	a009883a 	mov	r4,r20
 800b50c:	857fffcc 	andi	r21,r16,65535
 800b510:	880b883a 	mov	r5,r17
 800b514:	800c2000 	call	800c200 <__umodsi3>
 800b518:	a009883a 	mov	r4,r20
 800b51c:	880b883a 	mov	r5,r17
 800b520:	102d883a 	mov	r22,r2
 800b524:	800c1f80 	call	800c1f8 <__udivsi3>
 800b528:	1009883a 	mov	r4,r2
 800b52c:	a80b883a 	mov	r5,r21
 800b530:	1025883a 	mov	r18,r2
 800b534:	800c2080 	call	800c208 <__mulsi3>
 800b538:	1009883a 	mov	r4,r2
 800b53c:	b006943a 	slli	r3,r22,16
 800b540:	9804d43a 	srli	r2,r19,16
 800b544:	1886b03a 	or	r3,r3,r2
 800b548:	1900052e 	bgeu	r3,r4,800b560 <__udivdi3+0xf4>
 800b54c:	1c07883a 	add	r3,r3,r16
 800b550:	90bfffc4 	addi	r2,r18,-1
 800b554:	1c000136 	bltu	r3,r16,800b55c <__udivdi3+0xf0>
 800b558:	19015636 	bltu	r3,r4,800bab4 <__udivdi3+0x648>
 800b55c:	1025883a 	mov	r18,r2
 800b560:	1929c83a 	sub	r20,r3,r4
 800b564:	880b883a 	mov	r5,r17
 800b568:	a009883a 	mov	r4,r20
 800b56c:	800c2000 	call	800c200 <__umodsi3>
 800b570:	102d883a 	mov	r22,r2
 800b574:	880b883a 	mov	r5,r17
 800b578:	a009883a 	mov	r4,r20
 800b57c:	b02c943a 	slli	r22,r22,16
 800b580:	800c1f80 	call	800c1f8 <__udivsi3>
 800b584:	1009883a 	mov	r4,r2
 800b588:	a80b883a 	mov	r5,r21
 800b58c:	9cffffcc 	andi	r19,r19,65535
 800b590:	1023883a 	mov	r17,r2
 800b594:	b4e6b03a 	or	r19,r22,r19
 800b598:	800c2080 	call	800c208 <__mulsi3>
 800b59c:	9880052e 	bgeu	r19,r2,800b5b4 <__udivdi3+0x148>
 800b5a0:	9c27883a 	add	r19,r19,r16
 800b5a4:	88ffffc4 	addi	r3,r17,-1
 800b5a8:	9c011436 	bltu	r19,r16,800b9fc <__udivdi3+0x590>
 800b5ac:	9881132e 	bgeu	r19,r2,800b9fc <__udivdi3+0x590>
 800b5b0:	8c7fff84 	addi	r17,r17,-2
 800b5b4:	9024943a 	slli	r18,r18,16
 800b5b8:	0007883a 	mov	r3,zero
 800b5bc:	8c84b03a 	or	r2,r17,r18
 800b5c0:	00006106 	br	800b748 <__udivdi3+0x2dc>
 800b5c4:	29c05e36 	bltu	r5,r7,800b740 <__udivdi3+0x2d4>
 800b5c8:	00bfffd4 	movui	r2,65535
 800b5cc:	11c06a2e 	bgeu	r2,r7,800b778 <__udivdi3+0x30c>
 800b5d0:	00804034 	movhi	r2,256
 800b5d4:	10bfffc4 	addi	r2,r2,-1
 800b5d8:	11c11236 	bltu	r2,r7,800ba24 <__udivdi3+0x5b8>
 800b5dc:	00c00404 	movi	r3,16
 800b5e0:	180b883a 	mov	r5,r3
 800b5e4:	38c6d83a 	srl	r3,r7,r3
 800b5e8:	01020074 	movhi	r4,2049
 800b5ec:	2106be04 	addi	r4,r4,6904
 800b5f0:	04000804 	movi	r16,32
 800b5f4:	20c7883a 	add	r3,r4,r3
 800b5f8:	18800003 	ldbu	r2,0(r3)
 800b5fc:	1145883a 	add	r2,r2,r5
 800b600:	80a1c83a 	sub	r16,r16,r2
 800b604:	80006c1e 	bne	r16,zero,800b7b8 <__udivdi3+0x34c>
 800b608:	3c411836 	bltu	r7,r17,800ba6c <__udivdi3+0x600>
 800b60c:	9185403a 	cmpgeu	r2,r18,r6
 800b610:	0007883a 	mov	r3,zero
 800b614:	00004c06 	br	800b748 <__udivdi3+0x2dc>
 800b618:	3000041e 	bne	r6,zero,800b62c <__udivdi3+0x1c0>
 800b61c:	01000044 	movi	r4,1
 800b620:	000b883a 	mov	r5,zero
 800b624:	800c1f80 	call	800c1f8 <__udivsi3>
 800b628:	1021883a 	mov	r16,r2
 800b62c:	00bfffd4 	movui	r2,65535
 800b630:	14005c2e 	bgeu	r2,r16,800b7a4 <__udivdi3+0x338>
 800b634:	00804034 	movhi	r2,256
 800b638:	10bfffc4 	addi	r2,r2,-1
 800b63c:	14010236 	bltu	r2,r16,800ba48 <__udivdi3+0x5dc>
 800b640:	00800404 	movi	r2,16
 800b644:	1007883a 	mov	r3,r2
 800b648:	8084d83a 	srl	r2,r16,r2
 800b64c:	01020074 	movhi	r4,2049
 800b650:	2106be04 	addi	r4,r4,6904
 800b654:	2085883a 	add	r2,r4,r2
 800b658:	10800003 	ldbu	r2,0(r2)
 800b65c:	10c7883a 	add	r3,r2,r3
 800b660:	00800804 	movi	r2,32
 800b664:	10c5c83a 	sub	r2,r2,r3
 800b668:	1000aa1e 	bne	r2,zero,800b914 <__udivdi3+0x4a8>
 800b66c:	8028d43a 	srli	r20,r16,16
 800b670:	8c23c83a 	sub	r17,r17,r16
 800b674:	857fffcc 	andi	r21,r16,65535
 800b678:	00c00044 	movi	r3,1
 800b67c:	8809883a 	mov	r4,r17
 800b680:	a00b883a 	mov	r5,r20
 800b684:	d8c00015 	stw	r3,0(sp)
 800b688:	800c2000 	call	800c200 <__umodsi3>
 800b68c:	8809883a 	mov	r4,r17
 800b690:	a00b883a 	mov	r5,r20
 800b694:	102d883a 	mov	r22,r2
 800b698:	800c1f80 	call	800c1f8 <__udivsi3>
 800b69c:	1009883a 	mov	r4,r2
 800b6a0:	a80b883a 	mov	r5,r21
 800b6a4:	1025883a 	mov	r18,r2
 800b6a8:	800c2080 	call	800c208 <__mulsi3>
 800b6ac:	1009883a 	mov	r4,r2
 800b6b0:	b00e943a 	slli	r7,r22,16
 800b6b4:	9804d43a 	srli	r2,r19,16
 800b6b8:	d8c00017 	ldw	r3,0(sp)
 800b6bc:	388eb03a 	or	r7,r7,r2
 800b6c0:	3900052e 	bgeu	r7,r4,800b6d8 <__udivdi3+0x26c>
 800b6c4:	3c0f883a 	add	r7,r7,r16
 800b6c8:	90bfffc4 	addi	r2,r18,-1
 800b6cc:	3c000136 	bltu	r7,r16,800b6d4 <__udivdi3+0x268>
 800b6d0:	3900f536 	bltu	r7,r4,800baa8 <__udivdi3+0x63c>
 800b6d4:	1025883a 	mov	r18,r2
 800b6d8:	3923c83a 	sub	r17,r7,r4
 800b6dc:	8809883a 	mov	r4,r17
 800b6e0:	a00b883a 	mov	r5,r20
 800b6e4:	d8c00015 	stw	r3,0(sp)
 800b6e8:	800c2000 	call	800c200 <__umodsi3>
 800b6ec:	102d883a 	mov	r22,r2
 800b6f0:	8809883a 	mov	r4,r17
 800b6f4:	a00b883a 	mov	r5,r20
 800b6f8:	b02c943a 	slli	r22,r22,16
 800b6fc:	800c1f80 	call	800c1f8 <__udivsi3>
 800b700:	1009883a 	mov	r4,r2
 800b704:	a80b883a 	mov	r5,r21
 800b708:	9cffffcc 	andi	r19,r19,65535
 800b70c:	1023883a 	mov	r17,r2
 800b710:	b4e6b03a 	or	r19,r22,r19
 800b714:	800c2080 	call	800c208 <__mulsi3>
 800b718:	d8c00017 	ldw	r3,0(sp)
 800b71c:	9880052e 	bgeu	r19,r2,800b734 <__udivdi3+0x2c8>
 800b720:	9c27883a 	add	r19,r19,r16
 800b724:	893fffc4 	addi	r4,r17,-1
 800b728:	9c00b236 	bltu	r19,r16,800b9f4 <__udivdi3+0x588>
 800b72c:	9880b12e 	bgeu	r19,r2,800b9f4 <__udivdi3+0x588>
 800b730:	8c7fff84 	addi	r17,r17,-2
 800b734:	9024943a 	slli	r18,r18,16
 800b738:	8c84b03a 	or	r2,r17,r18
 800b73c:	00000206 	br	800b748 <__udivdi3+0x2dc>
 800b740:	0007883a 	mov	r3,zero
 800b744:	0005883a 	mov	r2,zero
 800b748:	dfc00a17 	ldw	ra,40(sp)
 800b74c:	df000917 	ldw	fp,36(sp)
 800b750:	ddc00817 	ldw	r23,32(sp)
 800b754:	dd800717 	ldw	r22,28(sp)
 800b758:	dd400617 	ldw	r21,24(sp)
 800b75c:	dd000517 	ldw	r20,20(sp)
 800b760:	dcc00417 	ldw	r19,16(sp)
 800b764:	dc800317 	ldw	r18,12(sp)
 800b768:	dc400217 	ldw	r17,8(sp)
 800b76c:	dc000117 	ldw	r16,4(sp)
 800b770:	dec00b04 	addi	sp,sp,44
 800b774:	f800283a 	ret
 800b778:	00803fc4 	movi	r2,255
 800b77c:	11c0ac36 	bltu	r2,r7,800ba30 <__udivdi3+0x5c4>
 800b780:	0007883a 	mov	r3,zero
 800b784:	000b883a 	mov	r5,zero
 800b788:	003f9606 	br	800b5e4 <__alt_data_end+0xf800b5e4>
 800b78c:	00804034 	movhi	r2,256
 800b790:	10bfffc4 	addi	r2,r2,-1
 800b794:	1180a936 	bltu	r2,r6,800ba3c <__udivdi3+0x5d0>
 800b798:	00800404 	movi	r2,16
 800b79c:	1007883a 	mov	r3,r2
 800b7a0:	003f4a06 	br	800b4cc <__alt_data_end+0xf800b4cc>
 800b7a4:	00803fc4 	movi	r2,255
 800b7a8:	1400aa36 	bltu	r2,r16,800ba54 <__udivdi3+0x5e8>
 800b7ac:	0005883a 	mov	r2,zero
 800b7b0:	0007883a 	mov	r3,zero
 800b7b4:	003fa406 	br	800b648 <__alt_data_end+0xf800b648>
 800b7b8:	3c0e983a 	sll	r7,r7,r16
 800b7bc:	3086d83a 	srl	r3,r6,r2
 800b7c0:	88aed83a 	srl	r23,r17,r2
 800b7c4:	9084d83a 	srl	r2,r18,r2
 800b7c8:	38e6b03a 	or	r19,r7,r3
 800b7cc:	9828d43a 	srli	r20,r19,16
 800b7d0:	8c22983a 	sll	r17,r17,r16
 800b7d4:	b809883a 	mov	r4,r23
 800b7d8:	a00b883a 	mov	r5,r20
 800b7dc:	342a983a 	sll	r21,r6,r16
 800b7e0:	88a2b03a 	or	r17,r17,r2
 800b7e4:	800c2000 	call	800c200 <__umodsi3>
 800b7e8:	b809883a 	mov	r4,r23
 800b7ec:	a00b883a 	mov	r5,r20
 800b7f0:	1039883a 	mov	fp,r2
 800b7f4:	9dbfffcc 	andi	r22,r19,65535
 800b7f8:	800c1f80 	call	800c1f8 <__udivsi3>
 800b7fc:	1009883a 	mov	r4,r2
 800b800:	b00b883a 	mov	r5,r22
 800b804:	102f883a 	mov	r23,r2
 800b808:	800c2080 	call	800c208 <__mulsi3>
 800b80c:	1009883a 	mov	r4,r2
 800b810:	e00e943a 	slli	r7,fp,16
 800b814:	8804d43a 	srli	r2,r17,16
 800b818:	388eb03a 	or	r7,r7,r2
 800b81c:	3900042e 	bgeu	r7,r4,800b830 <__udivdi3+0x3c4>
 800b820:	3ccf883a 	add	r7,r7,r19
 800b824:	b8bfffc4 	addi	r2,r23,-1
 800b828:	3cc0972e 	bgeu	r7,r19,800ba88 <__udivdi3+0x61c>
 800b82c:	102f883a 	mov	r23,r2
 800b830:	3939c83a 	sub	fp,r7,r4
 800b834:	a00b883a 	mov	r5,r20
 800b838:	e009883a 	mov	r4,fp
 800b83c:	800c2000 	call	800c200 <__umodsi3>
 800b840:	a00b883a 	mov	r5,r20
 800b844:	e009883a 	mov	r4,fp
 800b848:	d8800015 	stw	r2,0(sp)
 800b84c:	800c1f80 	call	800c1f8 <__udivsi3>
 800b850:	1009883a 	mov	r4,r2
 800b854:	b00b883a 	mov	r5,r22
 800b858:	1029883a 	mov	r20,r2
 800b85c:	800c2080 	call	800c208 <__mulsi3>
 800b860:	d8c00017 	ldw	r3,0(sp)
 800b864:	8c7fffcc 	andi	r17,r17,65535
 800b868:	1806943a 	slli	r3,r3,16
 800b86c:	1c46b03a 	or	r3,r3,r17
 800b870:	1880042e 	bgeu	r3,r2,800b884 <__udivdi3+0x418>
 800b874:	1cc7883a 	add	r3,r3,r19
 800b878:	a13fffc4 	addi	r4,r20,-1
 800b87c:	1cc07e2e 	bgeu	r3,r19,800ba78 <__udivdi3+0x60c>
 800b880:	2029883a 	mov	r20,r4
 800b884:	b82e943a 	slli	r23,r23,16
 800b888:	a822d43a 	srli	r17,r21,16
 800b88c:	ad7fffcc 	andi	r21,r21,65535
 800b890:	a5e8b03a 	or	r20,r20,r23
 800b894:	a5bfffcc 	andi	r22,r20,65535
 800b898:	b009883a 	mov	r4,r22
 800b89c:	a80b883a 	mov	r5,r21
 800b8a0:	18afc83a 	sub	r23,r3,r2
 800b8a4:	a026d43a 	srli	r19,r20,16
 800b8a8:	800c2080 	call	800c208 <__mulsi3>
 800b8ac:	b009883a 	mov	r4,r22
 800b8b0:	880b883a 	mov	r5,r17
 800b8b4:	1039883a 	mov	fp,r2
 800b8b8:	800c2080 	call	800c208 <__mulsi3>
 800b8bc:	a80b883a 	mov	r5,r21
 800b8c0:	9809883a 	mov	r4,r19
 800b8c4:	102d883a 	mov	r22,r2
 800b8c8:	800c2080 	call	800c208 <__mulsi3>
 800b8cc:	9809883a 	mov	r4,r19
 800b8d0:	880b883a 	mov	r5,r17
 800b8d4:	102b883a 	mov	r21,r2
 800b8d8:	800c2080 	call	800c208 <__mulsi3>
 800b8dc:	100b883a 	mov	r5,r2
 800b8e0:	e004d43a 	srli	r2,fp,16
 800b8e4:	ad89883a 	add	r4,r21,r22
 800b8e8:	2089883a 	add	r4,r4,r2
 800b8ec:	2540022e 	bgeu	r4,r21,800b8f8 <__udivdi3+0x48c>
 800b8f0:	00800074 	movhi	r2,1
 800b8f4:	288b883a 	add	r5,r5,r2
 800b8f8:	2004d43a 	srli	r2,r4,16
 800b8fc:	288b883a 	add	r5,r5,r2
 800b900:	b9404536 	bltu	r23,r5,800ba18 <__udivdi3+0x5ac>
 800b904:	b9403f26 	beq	r23,r5,800ba04 <__udivdi3+0x598>
 800b908:	a005883a 	mov	r2,r20
 800b90c:	0007883a 	mov	r3,zero
 800b910:	003f8d06 	br	800b748 <__alt_data_end+0xf800b748>
 800b914:	80a0983a 	sll	r16,r16,r2
 800b918:	88eed83a 	srl	r23,r17,r3
 800b91c:	90c6d83a 	srl	r3,r18,r3
 800b920:	8028d43a 	srli	r20,r16,16
 800b924:	88a2983a 	sll	r17,r17,r2
 800b928:	b809883a 	mov	r4,r23
 800b92c:	a00b883a 	mov	r5,r20
 800b930:	88ecb03a 	or	r22,r17,r3
 800b934:	90a6983a 	sll	r19,r18,r2
 800b938:	800c2000 	call	800c200 <__umodsi3>
 800b93c:	b809883a 	mov	r4,r23
 800b940:	a00b883a 	mov	r5,r20
 800b944:	1023883a 	mov	r17,r2
 800b948:	857fffcc 	andi	r21,r16,65535
 800b94c:	800c1f80 	call	800c1f8 <__udivsi3>
 800b950:	1009883a 	mov	r4,r2
 800b954:	a80b883a 	mov	r5,r21
 800b958:	102f883a 	mov	r23,r2
 800b95c:	800c2080 	call	800c208 <__mulsi3>
 800b960:	1009883a 	mov	r4,r2
 800b964:	880c943a 	slli	r6,r17,16
 800b968:	b004d43a 	srli	r2,r22,16
 800b96c:	308cb03a 	or	r6,r6,r2
 800b970:	3100062e 	bgeu	r6,r4,800b98c <__udivdi3+0x520>
 800b974:	340d883a 	add	r6,r6,r16
 800b978:	b8bfffc4 	addi	r2,r23,-1
 800b97c:	34004836 	bltu	r6,r16,800baa0 <__udivdi3+0x634>
 800b980:	3100472e 	bgeu	r6,r4,800baa0 <__udivdi3+0x634>
 800b984:	bdffff84 	addi	r23,r23,-2
 800b988:	340d883a 	add	r6,r6,r16
 800b98c:	3125c83a 	sub	r18,r6,r4
 800b990:	9009883a 	mov	r4,r18
 800b994:	a00b883a 	mov	r5,r20
 800b998:	800c2000 	call	800c200 <__umodsi3>
 800b99c:	1023883a 	mov	r17,r2
 800b9a0:	9009883a 	mov	r4,r18
 800b9a4:	a00b883a 	mov	r5,r20
 800b9a8:	8822943a 	slli	r17,r17,16
 800b9ac:	800c1f80 	call	800c1f8 <__udivsi3>
 800b9b0:	1009883a 	mov	r4,r2
 800b9b4:	a80b883a 	mov	r5,r21
 800b9b8:	b5bfffcc 	andi	r22,r22,65535
 800b9bc:	1025883a 	mov	r18,r2
 800b9c0:	8da2b03a 	or	r17,r17,r22
 800b9c4:	800c2080 	call	800c208 <__mulsi3>
 800b9c8:	8880062e 	bgeu	r17,r2,800b9e4 <__udivdi3+0x578>
 800b9cc:	8c23883a 	add	r17,r17,r16
 800b9d0:	90ffffc4 	addi	r3,r18,-1
 800b9d4:	8c003036 	bltu	r17,r16,800ba98 <__udivdi3+0x62c>
 800b9d8:	88802f2e 	bgeu	r17,r2,800ba98 <__udivdi3+0x62c>
 800b9dc:	94bfff84 	addi	r18,r18,-2
 800b9e0:	8c23883a 	add	r17,r17,r16
 800b9e4:	b806943a 	slli	r3,r23,16
 800b9e8:	88a3c83a 	sub	r17,r17,r2
 800b9ec:	90c6b03a 	or	r3,r18,r3
 800b9f0:	003f2206 	br	800b67c <__alt_data_end+0xf800b67c>
 800b9f4:	2023883a 	mov	r17,r4
 800b9f8:	003f4e06 	br	800b734 <__alt_data_end+0xf800b734>
 800b9fc:	1823883a 	mov	r17,r3
 800ba00:	003eec06 	br	800b5b4 <__alt_data_end+0xf800b5b4>
 800ba04:	2008943a 	slli	r4,r4,16
 800ba08:	9420983a 	sll	r16,r18,r16
 800ba0c:	e73fffcc 	andi	fp,fp,65535
 800ba10:	2709883a 	add	r4,r4,fp
 800ba14:	813fbc2e 	bgeu	r16,r4,800b908 <__alt_data_end+0xf800b908>
 800ba18:	a0bfffc4 	addi	r2,r20,-1
 800ba1c:	0007883a 	mov	r3,zero
 800ba20:	003f4906 	br	800b748 <__alt_data_end+0xf800b748>
 800ba24:	00c00604 	movi	r3,24
 800ba28:	180b883a 	mov	r5,r3
 800ba2c:	003eed06 	br	800b5e4 <__alt_data_end+0xf800b5e4>
 800ba30:	00c00204 	movi	r3,8
 800ba34:	180b883a 	mov	r5,r3
 800ba38:	003eea06 	br	800b5e4 <__alt_data_end+0xf800b5e4>
 800ba3c:	00800604 	movi	r2,24
 800ba40:	1007883a 	mov	r3,r2
 800ba44:	003ea106 	br	800b4cc <__alt_data_end+0xf800b4cc>
 800ba48:	00800604 	movi	r2,24
 800ba4c:	1007883a 	mov	r3,r2
 800ba50:	003efd06 	br	800b648 <__alt_data_end+0xf800b648>
 800ba54:	00800204 	movi	r2,8
 800ba58:	1007883a 	mov	r3,r2
 800ba5c:	003efa06 	br	800b648 <__alt_data_end+0xf800b648>
 800ba60:	00800204 	movi	r2,8
 800ba64:	1007883a 	mov	r3,r2
 800ba68:	003e9806 	br	800b4cc <__alt_data_end+0xf800b4cc>
 800ba6c:	0007883a 	mov	r3,zero
 800ba70:	00800044 	movi	r2,1
 800ba74:	003f3406 	br	800b748 <__alt_data_end+0xf800b748>
 800ba78:	18bf812e 	bgeu	r3,r2,800b880 <__alt_data_end+0xf800b880>
 800ba7c:	a53fff84 	addi	r20,r20,-2
 800ba80:	1cc7883a 	add	r3,r3,r19
 800ba84:	003f7f06 	br	800b884 <__alt_data_end+0xf800b884>
 800ba88:	393f682e 	bgeu	r7,r4,800b82c <__alt_data_end+0xf800b82c>
 800ba8c:	bdffff84 	addi	r23,r23,-2
 800ba90:	3ccf883a 	add	r7,r7,r19
 800ba94:	003f6606 	br	800b830 <__alt_data_end+0xf800b830>
 800ba98:	1825883a 	mov	r18,r3
 800ba9c:	003fd106 	br	800b9e4 <__alt_data_end+0xf800b9e4>
 800baa0:	102f883a 	mov	r23,r2
 800baa4:	003fb906 	br	800b98c <__alt_data_end+0xf800b98c>
 800baa8:	94bfff84 	addi	r18,r18,-2
 800baac:	3c0f883a 	add	r7,r7,r16
 800bab0:	003f0906 	br	800b6d8 <__alt_data_end+0xf800b6d8>
 800bab4:	94bfff84 	addi	r18,r18,-2
 800bab8:	1c07883a 	add	r3,r3,r16
 800babc:	003ea806 	br	800b560 <__alt_data_end+0xf800b560>

0800bac0 <__umoddi3>:
 800bac0:	defff304 	addi	sp,sp,-52
 800bac4:	dd000715 	stw	r20,28(sp)
 800bac8:	dc800515 	stw	r18,20(sp)
 800bacc:	dc400415 	stw	r17,16(sp)
 800bad0:	dfc00c15 	stw	ra,48(sp)
 800bad4:	df000b15 	stw	fp,44(sp)
 800bad8:	ddc00a15 	stw	r23,40(sp)
 800badc:	dd800915 	stw	r22,36(sp)
 800bae0:	dd400815 	stw	r21,32(sp)
 800bae4:	dcc00615 	stw	r19,24(sp)
 800bae8:	dc000315 	stw	r16,12(sp)
 800baec:	2025883a 	mov	r18,r4
 800baf0:	2823883a 	mov	r17,r5
 800baf4:	2829883a 	mov	r20,r5
 800baf8:	38003d1e 	bne	r7,zero,800bbf0 <__umoddi3+0x130>
 800bafc:	3021883a 	mov	r16,r6
 800bb00:	2027883a 	mov	r19,r4
 800bb04:	2980532e 	bgeu	r5,r6,800bc54 <__umoddi3+0x194>
 800bb08:	00bfffd4 	movui	r2,65535
 800bb0c:	1180a636 	bltu	r2,r6,800bda8 <__umoddi3+0x2e8>
 800bb10:	00803fc4 	movi	r2,255
 800bb14:	11816336 	bltu	r2,r6,800c0a4 <__umoddi3+0x5e4>
 800bb18:	0005883a 	mov	r2,zero
 800bb1c:	0009883a 	mov	r4,zero
 800bb20:	3084d83a 	srl	r2,r6,r2
 800bb24:	00c20074 	movhi	r3,2049
 800bb28:	18c6be04 	addi	r3,r3,6904
 800bb2c:	1885883a 	add	r2,r3,r2
 800bb30:	10800003 	ldbu	r2,0(r2)
 800bb34:	1109883a 	add	r4,r2,r4
 800bb38:	00800804 	movi	r2,32
 800bb3c:	1105c83a 	sub	r2,r2,r4
 800bb40:	10011026 	beq	r2,zero,800bf84 <__umoddi3+0x4c4>
 800bb44:	9108d83a 	srl	r4,r18,r4
 800bb48:	88a2983a 	sll	r17,r17,r2
 800bb4c:	30a0983a 	sll	r16,r6,r2
 800bb50:	90a6983a 	sll	r19,r18,r2
 800bb54:	8928b03a 	or	r20,r17,r4
 800bb58:	1025883a 	mov	r18,r2
 800bb5c:	8022d43a 	srli	r17,r16,16
 800bb60:	a009883a 	mov	r4,r20
 800bb64:	857fffcc 	andi	r21,r16,65535
 800bb68:	880b883a 	mov	r5,r17
 800bb6c:	800c2000 	call	800c200 <__umodsi3>
 800bb70:	a009883a 	mov	r4,r20
 800bb74:	880b883a 	mov	r5,r17
 800bb78:	102d883a 	mov	r22,r2
 800bb7c:	800c1f80 	call	800c1f8 <__udivsi3>
 800bb80:	1009883a 	mov	r4,r2
 800bb84:	a80b883a 	mov	r5,r21
 800bb88:	800c2080 	call	800c208 <__mulsi3>
 800bb8c:	1009883a 	mov	r4,r2
 800bb90:	b006943a 	slli	r3,r22,16
 800bb94:	9804d43a 	srli	r2,r19,16
 800bb98:	1886b03a 	or	r3,r3,r2
 800bb9c:	1900042e 	bgeu	r3,r4,800bbb0 <__umoddi3+0xf0>
 800bba0:	1c07883a 	add	r3,r3,r16
 800bba4:	1c000236 	bltu	r3,r16,800bbb0 <__umoddi3+0xf0>
 800bba8:	1900012e 	bgeu	r3,r4,800bbb0 <__umoddi3+0xf0>
 800bbac:	1c07883a 	add	r3,r3,r16
 800bbb0:	1929c83a 	sub	r20,r3,r4
 800bbb4:	a009883a 	mov	r4,r20
 800bbb8:	880b883a 	mov	r5,r17
 800bbbc:	800c2000 	call	800c200 <__umodsi3>
 800bbc0:	102d883a 	mov	r22,r2
 800bbc4:	a009883a 	mov	r4,r20
 800bbc8:	880b883a 	mov	r5,r17
 800bbcc:	b02c943a 	slli	r22,r22,16
 800bbd0:	800c1f80 	call	800c1f8 <__udivsi3>
 800bbd4:	1009883a 	mov	r4,r2
 800bbd8:	a80b883a 	mov	r5,r21
 800bbdc:	9cffffcc 	andi	r19,r19,65535
 800bbe0:	800c2080 	call	800c208 <__mulsi3>
 800bbe4:	b4e6b03a 	or	r19,r22,r19
 800bbe8:	9880582e 	bgeu	r19,r2,800bd4c <__umoddi3+0x28c>
 800bbec:	00005306 	br	800bd3c <__umoddi3+0x27c>
 800bbf0:	29c05a36 	bltu	r5,r7,800bd5c <__umoddi3+0x29c>
 800bbf4:	00bfffd4 	movui	r2,65535
 800bbf8:	11c0662e 	bgeu	r2,r7,800bd94 <__umoddi3+0x2d4>
 800bbfc:	00804034 	movhi	r2,256
 800bc00:	10bfffc4 	addi	r2,r2,-1
 800bc04:	11c11b36 	bltu	r2,r7,800c074 <__umoddi3+0x5b4>
 800bc08:	00c00404 	movi	r3,16
 800bc0c:	1827883a 	mov	r19,r3
 800bc10:	38c6d83a 	srl	r3,r7,r3
 800bc14:	01020074 	movhi	r4,2049
 800bc18:	2106be04 	addi	r4,r4,6904
 800bc1c:	04000804 	movi	r16,32
 800bc20:	20c7883a 	add	r3,r4,r3
 800bc24:	18800003 	ldbu	r2,0(r3)
 800bc28:	14e7883a 	add	r19,r2,r19
 800bc2c:	84e1c83a 	sub	r16,r16,r19
 800bc30:	8000681e 	bne	r16,zero,800bdd4 <__umoddi3+0x314>
 800bc34:	3c400136 	bltu	r7,r17,800bc3c <__umoddi3+0x17c>
 800bc38:	91812736 	bltu	r18,r6,800c0d8 <__umoddi3+0x618>
 800bc3c:	9185c83a 	sub	r2,r18,r6
 800bc40:	89e3c83a 	sub	r17,r17,r7
 800bc44:	90a5803a 	cmpltu	r18,r18,r2
 800bc48:	8ca9c83a 	sub	r20,r17,r18
 800bc4c:	a007883a 	mov	r3,r20
 800bc50:	00004406 	br	800bd64 <__umoddi3+0x2a4>
 800bc54:	3000041e 	bne	r6,zero,800bc68 <__umoddi3+0x1a8>
 800bc58:	01000044 	movi	r4,1
 800bc5c:	000b883a 	mov	r5,zero
 800bc60:	800c1f80 	call	800c1f8 <__udivsi3>
 800bc64:	1021883a 	mov	r16,r2
 800bc68:	00bfffd4 	movui	r2,65535
 800bc6c:	1400542e 	bgeu	r2,r16,800bdc0 <__umoddi3+0x300>
 800bc70:	00804034 	movhi	r2,256
 800bc74:	10bfffc4 	addi	r2,r2,-1
 800bc78:	14010736 	bltu	r2,r16,800c098 <__umoddi3+0x5d8>
 800bc7c:	00800404 	movi	r2,16
 800bc80:	1007883a 	mov	r3,r2
 800bc84:	8084d83a 	srl	r2,r16,r2
 800bc88:	01020074 	movhi	r4,2049
 800bc8c:	2106be04 	addi	r4,r4,6904
 800bc90:	05400804 	movi	r21,32
 800bc94:	2085883a 	add	r2,r4,r2
 800bc98:	10800003 	ldbu	r2,0(r2)
 800bc9c:	10c7883a 	add	r3,r2,r3
 800bca0:	a8ebc83a 	sub	r21,r21,r3
 800bca4:	a800b91e 	bne	r21,zero,800bf8c <__umoddi3+0x4cc>
 800bca8:	8028d43a 	srli	r20,r16,16
 800bcac:	8c23c83a 	sub	r17,r17,r16
 800bcb0:	85bfffcc 	andi	r22,r16,65535
 800bcb4:	0025883a 	mov	r18,zero
 800bcb8:	8809883a 	mov	r4,r17
 800bcbc:	a00b883a 	mov	r5,r20
 800bcc0:	800c2000 	call	800c200 <__umodsi3>
 800bcc4:	8809883a 	mov	r4,r17
 800bcc8:	a00b883a 	mov	r5,r20
 800bccc:	102b883a 	mov	r21,r2
 800bcd0:	800c1f80 	call	800c1f8 <__udivsi3>
 800bcd4:	1009883a 	mov	r4,r2
 800bcd8:	b00b883a 	mov	r5,r22
 800bcdc:	800c2080 	call	800c208 <__mulsi3>
 800bce0:	1009883a 	mov	r4,r2
 800bce4:	a806943a 	slli	r3,r21,16
 800bce8:	9804d43a 	srli	r2,r19,16
 800bcec:	1886b03a 	or	r3,r3,r2
 800bcf0:	1900032e 	bgeu	r3,r4,800bd00 <__umoddi3+0x240>
 800bcf4:	1c07883a 	add	r3,r3,r16
 800bcf8:	1c000136 	bltu	r3,r16,800bd00 <__umoddi3+0x240>
 800bcfc:	1900f436 	bltu	r3,r4,800c0d0 <__umoddi3+0x610>
 800bd00:	1923c83a 	sub	r17,r3,r4
 800bd04:	8809883a 	mov	r4,r17
 800bd08:	a00b883a 	mov	r5,r20
 800bd0c:	800c2000 	call	800c200 <__umodsi3>
 800bd10:	102b883a 	mov	r21,r2
 800bd14:	8809883a 	mov	r4,r17
 800bd18:	a00b883a 	mov	r5,r20
 800bd1c:	a82a943a 	slli	r21,r21,16
 800bd20:	800c1f80 	call	800c1f8 <__udivsi3>
 800bd24:	1009883a 	mov	r4,r2
 800bd28:	b00b883a 	mov	r5,r22
 800bd2c:	9cffffcc 	andi	r19,r19,65535
 800bd30:	800c2080 	call	800c208 <__mulsi3>
 800bd34:	ace6b03a 	or	r19,r21,r19
 800bd38:	9880042e 	bgeu	r19,r2,800bd4c <__umoddi3+0x28c>
 800bd3c:	9c27883a 	add	r19,r19,r16
 800bd40:	9c000236 	bltu	r19,r16,800bd4c <__umoddi3+0x28c>
 800bd44:	9880012e 	bgeu	r19,r2,800bd4c <__umoddi3+0x28c>
 800bd48:	9c27883a 	add	r19,r19,r16
 800bd4c:	9885c83a 	sub	r2,r19,r2
 800bd50:	1484d83a 	srl	r2,r2,r18
 800bd54:	0007883a 	mov	r3,zero
 800bd58:	00000206 	br	800bd64 <__umoddi3+0x2a4>
 800bd5c:	2005883a 	mov	r2,r4
 800bd60:	2807883a 	mov	r3,r5
 800bd64:	dfc00c17 	ldw	ra,48(sp)
 800bd68:	df000b17 	ldw	fp,44(sp)
 800bd6c:	ddc00a17 	ldw	r23,40(sp)
 800bd70:	dd800917 	ldw	r22,36(sp)
 800bd74:	dd400817 	ldw	r21,32(sp)
 800bd78:	dd000717 	ldw	r20,28(sp)
 800bd7c:	dcc00617 	ldw	r19,24(sp)
 800bd80:	dc800517 	ldw	r18,20(sp)
 800bd84:	dc400417 	ldw	r17,16(sp)
 800bd88:	dc000317 	ldw	r16,12(sp)
 800bd8c:	dec00d04 	addi	sp,sp,52
 800bd90:	f800283a 	ret
 800bd94:	00803fc4 	movi	r2,255
 800bd98:	11c0b336 	bltu	r2,r7,800c068 <__umoddi3+0x5a8>
 800bd9c:	0007883a 	mov	r3,zero
 800bda0:	0027883a 	mov	r19,zero
 800bda4:	003f9a06 	br	800bc10 <__alt_data_end+0xf800bc10>
 800bda8:	00804034 	movhi	r2,256
 800bdac:	10bfffc4 	addi	r2,r2,-1
 800bdb0:	1180b336 	bltu	r2,r6,800c080 <__umoddi3+0x5c0>
 800bdb4:	00800404 	movi	r2,16
 800bdb8:	1009883a 	mov	r4,r2
 800bdbc:	003f5806 	br	800bb20 <__alt_data_end+0xf800bb20>
 800bdc0:	00803fc4 	movi	r2,255
 800bdc4:	1400b136 	bltu	r2,r16,800c08c <__umoddi3+0x5cc>
 800bdc8:	0005883a 	mov	r2,zero
 800bdcc:	0007883a 	mov	r3,zero
 800bdd0:	003fac06 	br	800bc84 <__alt_data_end+0xf800bc84>
 800bdd4:	34c4d83a 	srl	r2,r6,r19
 800bdd8:	3c0e983a 	sll	r7,r7,r16
 800bddc:	8cf8d83a 	srl	fp,r17,r19
 800bde0:	8c22983a 	sll	r17,r17,r16
 800bde4:	38a8b03a 	or	r20,r7,r2
 800bde8:	a02ad43a 	srli	r21,r20,16
 800bdec:	94c4d83a 	srl	r2,r18,r19
 800bdf0:	e009883a 	mov	r4,fp
 800bdf4:	a80b883a 	mov	r5,r21
 800bdf8:	342c983a 	sll	r22,r6,r16
 800bdfc:	88a2b03a 	or	r17,r17,r2
 800be00:	800c2000 	call	800c200 <__umodsi3>
 800be04:	e009883a 	mov	r4,fp
 800be08:	a80b883a 	mov	r5,r21
 800be0c:	a5ffffcc 	andi	r23,r20,65535
 800be10:	d8800215 	stw	r2,8(sp)
 800be14:	800c1f80 	call	800c1f8 <__udivsi3>
 800be18:	1009883a 	mov	r4,r2
 800be1c:	b80b883a 	mov	r5,r23
 800be20:	1039883a 	mov	fp,r2
 800be24:	800c2080 	call	800c208 <__mulsi3>
 800be28:	d8c00217 	ldw	r3,8(sp)
 800be2c:	1009883a 	mov	r4,r2
 800be30:	8804d43a 	srli	r2,r17,16
 800be34:	1806943a 	slli	r3,r3,16
 800be38:	9424983a 	sll	r18,r18,r16
 800be3c:	1886b03a 	or	r3,r3,r2
 800be40:	1900042e 	bgeu	r3,r4,800be54 <__umoddi3+0x394>
 800be44:	1d07883a 	add	r3,r3,r20
 800be48:	e0bfffc4 	addi	r2,fp,-1
 800be4c:	1d009c2e 	bgeu	r3,r20,800c0c0 <__umoddi3+0x600>
 800be50:	1039883a 	mov	fp,r2
 800be54:	1907c83a 	sub	r3,r3,r4
 800be58:	1809883a 	mov	r4,r3
 800be5c:	a80b883a 	mov	r5,r21
 800be60:	d8c00215 	stw	r3,8(sp)
 800be64:	800c2000 	call	800c200 <__umodsi3>
 800be68:	d8c00217 	ldw	r3,8(sp)
 800be6c:	a80b883a 	mov	r5,r21
 800be70:	d8800015 	stw	r2,0(sp)
 800be74:	1809883a 	mov	r4,r3
 800be78:	800c1f80 	call	800c1f8 <__udivsi3>
 800be7c:	1009883a 	mov	r4,r2
 800be80:	b80b883a 	mov	r5,r23
 800be84:	102b883a 	mov	r21,r2
 800be88:	800c2080 	call	800c208 <__mulsi3>
 800be8c:	d9c00017 	ldw	r7,0(sp)
 800be90:	8c7fffcc 	andi	r17,r17,65535
 800be94:	380e943a 	slli	r7,r7,16
 800be98:	3c4eb03a 	or	r7,r7,r17
 800be9c:	3880042e 	bgeu	r7,r2,800beb0 <__umoddi3+0x3f0>
 800bea0:	3d0f883a 	add	r7,r7,r20
 800bea4:	a8ffffc4 	addi	r3,r21,-1
 800bea8:	3d00812e 	bgeu	r7,r20,800c0b0 <__umoddi3+0x5f0>
 800beac:	182b883a 	mov	r21,r3
 800beb0:	e038943a 	slli	fp,fp,16
 800beb4:	b010d43a 	srli	r8,r22,16
 800beb8:	b1bfffcc 	andi	r6,r22,65535
 800bebc:	af2ab03a 	or	r21,r21,fp
 800bec0:	a82ed43a 	srli	r23,r21,16
 800bec4:	ad7fffcc 	andi	r21,r21,65535
 800bec8:	300b883a 	mov	r5,r6
 800becc:	a809883a 	mov	r4,r21
 800bed0:	38a3c83a 	sub	r17,r7,r2
 800bed4:	d9800115 	stw	r6,4(sp)
 800bed8:	da000015 	stw	r8,0(sp)
 800bedc:	800c2080 	call	800c208 <__mulsi3>
 800bee0:	da000017 	ldw	r8,0(sp)
 800bee4:	a809883a 	mov	r4,r21
 800bee8:	1039883a 	mov	fp,r2
 800beec:	400b883a 	mov	r5,r8
 800bef0:	da000215 	stw	r8,8(sp)
 800bef4:	800c2080 	call	800c208 <__mulsi3>
 800bef8:	d9800117 	ldw	r6,4(sp)
 800befc:	b809883a 	mov	r4,r23
 800bf00:	d8800015 	stw	r2,0(sp)
 800bf04:	300b883a 	mov	r5,r6
 800bf08:	800c2080 	call	800c208 <__mulsi3>
 800bf0c:	d8c00217 	ldw	r3,8(sp)
 800bf10:	b809883a 	mov	r4,r23
 800bf14:	102b883a 	mov	r21,r2
 800bf18:	180b883a 	mov	r5,r3
 800bf1c:	800c2080 	call	800c208 <__mulsi3>
 800bf20:	d9c00017 	ldw	r7,0(sp)
 800bf24:	1007883a 	mov	r3,r2
 800bf28:	e004d43a 	srli	r2,fp,16
 800bf2c:	a9c9883a 	add	r4,r21,r7
 800bf30:	2089883a 	add	r4,r4,r2
 800bf34:	2540022e 	bgeu	r4,r21,800bf40 <__umoddi3+0x480>
 800bf38:	00800074 	movhi	r2,1
 800bf3c:	1887883a 	add	r3,r3,r2
 800bf40:	2004d43a 	srli	r2,r4,16
 800bf44:	2008943a 	slli	r4,r4,16
 800bf48:	e73fffcc 	andi	fp,fp,65535
 800bf4c:	1887883a 	add	r3,r3,r2
 800bf50:	2709883a 	add	r4,r4,fp
 800bf54:	88c03e36 	bltu	r17,r3,800c050 <__umoddi3+0x590>
 800bf58:	88c06226 	beq	r17,r3,800c0e4 <__umoddi3+0x624>
 800bf5c:	88c7c83a 	sub	r3,r17,r3
 800bf60:	202d883a 	mov	r22,r4
 800bf64:	95adc83a 	sub	r22,r18,r22
 800bf68:	95a5803a 	cmpltu	r18,r18,r22
 800bf6c:	1c87c83a 	sub	r3,r3,r18
 800bf70:	1cc4983a 	sll	r2,r3,r19
 800bf74:	b42cd83a 	srl	r22,r22,r16
 800bf78:	1c06d83a 	srl	r3,r3,r16
 800bf7c:	1584b03a 	or	r2,r2,r22
 800bf80:	003f7806 	br	800bd64 <__alt_data_end+0xf800bd64>
 800bf84:	0025883a 	mov	r18,zero
 800bf88:	003ef406 	br	800bb5c <__alt_data_end+0xf800bb5c>
 800bf8c:	8560983a 	sll	r16,r16,r21
 800bf90:	88e6d83a 	srl	r19,r17,r3
 800bf94:	90c6d83a 	srl	r3,r18,r3
 800bf98:	8028d43a 	srli	r20,r16,16
 800bf9c:	8d62983a 	sll	r17,r17,r21
 800bfa0:	9809883a 	mov	r4,r19
 800bfa4:	a00b883a 	mov	r5,r20
 800bfa8:	88eeb03a 	or	r23,r17,r3
 800bfac:	800c2000 	call	800c200 <__umodsi3>
 800bfb0:	9809883a 	mov	r4,r19
 800bfb4:	a00b883a 	mov	r5,r20
 800bfb8:	1023883a 	mov	r17,r2
 800bfbc:	85bfffcc 	andi	r22,r16,65535
 800bfc0:	800c1f80 	call	800c1f8 <__udivsi3>
 800bfc4:	1009883a 	mov	r4,r2
 800bfc8:	b00b883a 	mov	r5,r22
 800bfcc:	800c2080 	call	800c208 <__mulsi3>
 800bfd0:	1007883a 	mov	r3,r2
 800bfd4:	8808943a 	slli	r4,r17,16
 800bfd8:	b804d43a 	srli	r2,r23,16
 800bfdc:	9566983a 	sll	r19,r18,r21
 800bfe0:	2088b03a 	or	r4,r4,r2
 800bfe4:	20c0042e 	bgeu	r4,r3,800bff8 <__umoddi3+0x538>
 800bfe8:	2409883a 	add	r4,r4,r16
 800bfec:	24000236 	bltu	r4,r16,800bff8 <__umoddi3+0x538>
 800bff0:	20c0012e 	bgeu	r4,r3,800bff8 <__umoddi3+0x538>
 800bff4:	2409883a 	add	r4,r4,r16
 800bff8:	20e5c83a 	sub	r18,r4,r3
 800bffc:	9009883a 	mov	r4,r18
 800c000:	a00b883a 	mov	r5,r20
 800c004:	800c2000 	call	800c200 <__umodsi3>
 800c008:	1023883a 	mov	r17,r2
 800c00c:	9009883a 	mov	r4,r18
 800c010:	a00b883a 	mov	r5,r20
 800c014:	8822943a 	slli	r17,r17,16
 800c018:	800c1f80 	call	800c1f8 <__udivsi3>
 800c01c:	1009883a 	mov	r4,r2
 800c020:	b00b883a 	mov	r5,r22
 800c024:	bdffffcc 	andi	r23,r23,65535
 800c028:	800c2080 	call	800c208 <__mulsi3>
 800c02c:	8de2b03a 	or	r17,r17,r23
 800c030:	8880042e 	bgeu	r17,r2,800c044 <__umoddi3+0x584>
 800c034:	8c23883a 	add	r17,r17,r16
 800c038:	8c000236 	bltu	r17,r16,800c044 <__umoddi3+0x584>
 800c03c:	8880012e 	bgeu	r17,r2,800c044 <__umoddi3+0x584>
 800c040:	8c23883a 	add	r17,r17,r16
 800c044:	88a3c83a 	sub	r17,r17,r2
 800c048:	a825883a 	mov	r18,r21
 800c04c:	003f1a06 	br	800bcb8 <__alt_data_end+0xf800bcb8>
 800c050:	25adc83a 	sub	r22,r4,r22
 800c054:	1d07c83a 	sub	r3,r3,r20
 800c058:	2589803a 	cmpltu	r4,r4,r22
 800c05c:	1907c83a 	sub	r3,r3,r4
 800c060:	88c7c83a 	sub	r3,r17,r3
 800c064:	003fbf06 	br	800bf64 <__alt_data_end+0xf800bf64>
 800c068:	00c00204 	movi	r3,8
 800c06c:	1827883a 	mov	r19,r3
 800c070:	003ee706 	br	800bc10 <__alt_data_end+0xf800bc10>
 800c074:	00c00604 	movi	r3,24
 800c078:	1827883a 	mov	r19,r3
 800c07c:	003ee406 	br	800bc10 <__alt_data_end+0xf800bc10>
 800c080:	00800604 	movi	r2,24
 800c084:	1009883a 	mov	r4,r2
 800c088:	003ea506 	br	800bb20 <__alt_data_end+0xf800bb20>
 800c08c:	00800204 	movi	r2,8
 800c090:	1007883a 	mov	r3,r2
 800c094:	003efb06 	br	800bc84 <__alt_data_end+0xf800bc84>
 800c098:	00800604 	movi	r2,24
 800c09c:	1007883a 	mov	r3,r2
 800c0a0:	003ef806 	br	800bc84 <__alt_data_end+0xf800bc84>
 800c0a4:	00800204 	movi	r2,8
 800c0a8:	1009883a 	mov	r4,r2
 800c0ac:	003e9c06 	br	800bb20 <__alt_data_end+0xf800bb20>
 800c0b0:	38bf7e2e 	bgeu	r7,r2,800beac <__alt_data_end+0xf800beac>
 800c0b4:	ad7fff84 	addi	r21,r21,-2
 800c0b8:	3d0f883a 	add	r7,r7,r20
 800c0bc:	003f7c06 	br	800beb0 <__alt_data_end+0xf800beb0>
 800c0c0:	193f632e 	bgeu	r3,r4,800be50 <__alt_data_end+0xf800be50>
 800c0c4:	e73fff84 	addi	fp,fp,-2
 800c0c8:	1d07883a 	add	r3,r3,r20
 800c0cc:	003f6106 	br	800be54 <__alt_data_end+0xf800be54>
 800c0d0:	1c07883a 	add	r3,r3,r16
 800c0d4:	003f0a06 	br	800bd00 <__alt_data_end+0xf800bd00>
 800c0d8:	9005883a 	mov	r2,r18
 800c0dc:	a007883a 	mov	r3,r20
 800c0e0:	003f2006 	br	800bd64 <__alt_data_end+0xf800bd64>
 800c0e4:	913fda36 	bltu	r18,r4,800c050 <__alt_data_end+0xf800c050>
 800c0e8:	202d883a 	mov	r22,r4
 800c0ec:	0007883a 	mov	r3,zero
 800c0f0:	003f9c06 	br	800bf64 <__alt_data_end+0xf800bf64>

0800c0f4 <udivmodsi4>:
 800c0f4:	2900182e 	bgeu	r5,r4,800c158 <udivmodsi4+0x64>
 800c0f8:	28001716 	blt	r5,zero,800c158 <udivmodsi4+0x64>
 800c0fc:	00800804 	movi	r2,32
 800c100:	00c00044 	movi	r3,1
 800c104:	00000206 	br	800c110 <udivmodsi4+0x1c>
 800c108:	10001126 	beq	r2,zero,800c150 <udivmodsi4+0x5c>
 800c10c:	28000516 	blt	r5,zero,800c124 <udivmodsi4+0x30>
 800c110:	294b883a 	add	r5,r5,r5
 800c114:	10bfffc4 	addi	r2,r2,-1
 800c118:	18c7883a 	add	r3,r3,r3
 800c11c:	293ffa36 	bltu	r5,r4,800c108 <__alt_data_end+0xf800c108>
 800c120:	18000b26 	beq	r3,zero,800c150 <udivmodsi4+0x5c>
 800c124:	0005883a 	mov	r2,zero
 800c128:	21400236 	bltu	r4,r5,800c134 <udivmodsi4+0x40>
 800c12c:	2149c83a 	sub	r4,r4,r5
 800c130:	10c4b03a 	or	r2,r2,r3
 800c134:	1806d07a 	srli	r3,r3,1
 800c138:	280ad07a 	srli	r5,r5,1
 800c13c:	183ffa1e 	bne	r3,zero,800c128 <__alt_data_end+0xf800c128>
 800c140:	3000011e 	bne	r6,zero,800c148 <udivmodsi4+0x54>
 800c144:	f800283a 	ret
 800c148:	2005883a 	mov	r2,r4
 800c14c:	f800283a 	ret
 800c150:	0005883a 	mov	r2,zero
 800c154:	003ffa06 	br	800c140 <__alt_data_end+0xf800c140>
 800c158:	00c00044 	movi	r3,1
 800c15c:	0005883a 	mov	r2,zero
 800c160:	003ff106 	br	800c128 <__alt_data_end+0xf800c128>

0800c164 <__divsi3>:
 800c164:	deffff04 	addi	sp,sp,-4
 800c168:	dfc00015 	stw	ra,0(sp)
 800c16c:	20000916 	blt	r4,zero,800c194 <__divsi3+0x30>
 800c170:	000f883a 	mov	r7,zero
 800c174:	28000a16 	blt	r5,zero,800c1a0 <__divsi3+0x3c>
 800c178:	000d883a 	mov	r6,zero
 800c17c:	800c0f40 	call	800c0f4 <udivmodsi4>
 800c180:	38000126 	beq	r7,zero,800c188 <__divsi3+0x24>
 800c184:	0085c83a 	sub	r2,zero,r2
 800c188:	dfc00017 	ldw	ra,0(sp)
 800c18c:	dec00104 	addi	sp,sp,4
 800c190:	f800283a 	ret
 800c194:	0109c83a 	sub	r4,zero,r4
 800c198:	01c00044 	movi	r7,1
 800c19c:	283ff60e 	bge	r5,zero,800c178 <__alt_data_end+0xf800c178>
 800c1a0:	014bc83a 	sub	r5,zero,r5
 800c1a4:	39c0005c 	xori	r7,r7,1
 800c1a8:	003ff306 	br	800c178 <__alt_data_end+0xf800c178>

0800c1ac <__modsi3>:
 800c1ac:	20000316 	blt	r4,zero,800c1bc <__modsi3+0x10>
 800c1b0:	28000c16 	blt	r5,zero,800c1e4 <__modsi3+0x38>
 800c1b4:	01800044 	movi	r6,1
 800c1b8:	800c0f41 	jmpi	800c0f4 <udivmodsi4>
 800c1bc:	deffff04 	addi	sp,sp,-4
 800c1c0:	dfc00015 	stw	ra,0(sp)
 800c1c4:	0109c83a 	sub	r4,zero,r4
 800c1c8:	28000916 	blt	r5,zero,800c1f0 <__modsi3+0x44>
 800c1cc:	01800044 	movi	r6,1
 800c1d0:	800c0f40 	call	800c0f4 <udivmodsi4>
 800c1d4:	0085c83a 	sub	r2,zero,r2
 800c1d8:	dfc00017 	ldw	ra,0(sp)
 800c1dc:	dec00104 	addi	sp,sp,4
 800c1e0:	f800283a 	ret
 800c1e4:	014bc83a 	sub	r5,zero,r5
 800c1e8:	01800044 	movi	r6,1
 800c1ec:	800c0f41 	jmpi	800c0f4 <udivmodsi4>
 800c1f0:	014bc83a 	sub	r5,zero,r5
 800c1f4:	003ff506 	br	800c1cc <__alt_data_end+0xf800c1cc>

0800c1f8 <__udivsi3>:
 800c1f8:	000d883a 	mov	r6,zero
 800c1fc:	800c0f41 	jmpi	800c0f4 <udivmodsi4>

0800c200 <__umodsi3>:
 800c200:	01800044 	movi	r6,1
 800c204:	800c0f41 	jmpi	800c0f4 <udivmodsi4>

0800c208 <__mulsi3>:
 800c208:	0005883a 	mov	r2,zero
 800c20c:	20000726 	beq	r4,zero,800c22c <__mulsi3+0x24>
 800c210:	20c0004c 	andi	r3,r4,1
 800c214:	2008d07a 	srli	r4,r4,1
 800c218:	18000126 	beq	r3,zero,800c220 <__mulsi3+0x18>
 800c21c:	1145883a 	add	r2,r2,r5
 800c220:	294b883a 	add	r5,r5,r5
 800c224:	203ffa1e 	bne	r4,zero,800c210 <__alt_data_end+0xf800c210>
 800c228:	f800283a 	ret
 800c22c:	f800283a 	ret

0800c230 <__adddf3>:
 800c230:	00800434 	movhi	r2,16
 800c234:	10bfffc4 	addi	r2,r2,-1
 800c238:	defffb04 	addi	sp,sp,-20
 800c23c:	2890703a 	and	r8,r5,r2
 800c240:	2806d7fa 	srli	r3,r5,31
 800c244:	3884703a 	and	r2,r7,r2
 800c248:	2014d77a 	srli	r10,r4,29
 800c24c:	3812d53a 	srli	r9,r7,20
 800c250:	dc400115 	stw	r17,4(sp)
 800c254:	100490fa 	slli	r2,r2,3
 800c258:	2822d53a 	srli	r17,r5,20
 800c25c:	380ed7fa 	srli	r7,r7,31
 800c260:	400a90fa 	slli	r5,r8,3
 800c264:	3010d77a 	srli	r8,r6,29
 800c268:	dc800215 	stw	r18,8(sp)
 800c26c:	dc000015 	stw	r16,0(sp)
 800c270:	dfc00415 	stw	ra,16(sp)
 800c274:	dcc00315 	stw	r19,12(sp)
 800c278:	1c803fcc 	andi	r18,r3,255
 800c27c:	202090fa 	slli	r16,r4,3
 800c280:	8c41ffcc 	andi	r17,r17,2047
 800c284:	2a8ab03a 	or	r5,r5,r10
 800c288:	4901ffcc 	andi	r4,r9,2047
 800c28c:	1204b03a 	or	r2,r2,r8
 800c290:	300c90fa 	slli	r6,r6,3
 800c294:	91c07126 	beq	r18,r7,800c45c <__adddf3+0x22c>
 800c298:	8907c83a 	sub	r3,r17,r4
 800c29c:	00c0a00e 	bge	zero,r3,800c520 <__adddf3+0x2f0>
 800c2a0:	2000291e 	bne	r4,zero,800c348 <__adddf3+0x118>
 800c2a4:	1188b03a 	or	r4,r2,r6
 800c2a8:	20008b1e 	bne	r4,zero,800c4d8 <__adddf3+0x2a8>
 800c2ac:	808001cc 	andi	r2,r16,7
 800c2b0:	10005a26 	beq	r2,zero,800c41c <__adddf3+0x1ec>
 800c2b4:	80c003cc 	andi	r3,r16,15
 800c2b8:	00800104 	movi	r2,4
 800c2bc:	18805726 	beq	r3,r2,800c41c <__adddf3+0x1ec>
 800c2c0:	81000104 	addi	r4,r16,4
 800c2c4:	2421803a 	cmpltu	r16,r4,r16
 800c2c8:	2c0b883a 	add	r5,r5,r16
 800c2cc:	2880202c 	andhi	r2,r5,128
 800c2d0:	9007883a 	mov	r3,r18
 800c2d4:	2021883a 	mov	r16,r4
 800c2d8:	10005326 	beq	r2,zero,800c428 <__adddf3+0x1f8>
 800c2dc:	8c400044 	addi	r17,r17,1
 800c2e0:	0081ffc4 	movi	r2,2047
 800c2e4:	8880ae26 	beq	r17,r2,800c5a0 <__adddf3+0x370>
 800c2e8:	00bfe034 	movhi	r2,65408
 800c2ec:	10bfffc4 	addi	r2,r2,-1
 800c2f0:	288a703a 	and	r5,r5,r2
 800c2f4:	2804977a 	slli	r2,r5,29
 800c2f8:	280a927a 	slli	r5,r5,9
 800c2fc:	8020d0fa 	srli	r16,r16,3
 800c300:	280ad33a 	srli	r5,r5,12
 800c304:	1404b03a 	or	r2,r2,r16
 800c308:	8c41ffcc 	andi	r17,r17,2047
 800c30c:	8822953a 	slli	r17,r17,20
 800c310:	18c03fcc 	andi	r3,r3,255
 800c314:	180897fa 	slli	r4,r3,31
 800c318:	00c00434 	movhi	r3,16
 800c31c:	18ffffc4 	addi	r3,r3,-1
 800c320:	28c6703a 	and	r3,r5,r3
 800c324:	1c46b03a 	or	r3,r3,r17
 800c328:	1906b03a 	or	r3,r3,r4
 800c32c:	dfc00417 	ldw	ra,16(sp)
 800c330:	dcc00317 	ldw	r19,12(sp)
 800c334:	dc800217 	ldw	r18,8(sp)
 800c338:	dc400117 	ldw	r17,4(sp)
 800c33c:	dc000017 	ldw	r16,0(sp)
 800c340:	dec00504 	addi	sp,sp,20
 800c344:	f800283a 	ret
 800c348:	0101ffc4 	movi	r4,2047
 800c34c:	893fd726 	beq	r17,r4,800c2ac <__alt_data_end+0xf800c2ac>
 800c350:	10802034 	orhi	r2,r2,128
 800c354:	01000e04 	movi	r4,56
 800c358:	20c09416 	blt	r4,r3,800c5ac <__adddf3+0x37c>
 800c35c:	010007c4 	movi	r4,31
 800c360:	20c0b716 	blt	r4,r3,800c640 <__adddf3+0x410>
 800c364:	01000804 	movi	r4,32
 800c368:	20c9c83a 	sub	r4,r4,r3
 800c36c:	30ced83a 	srl	r7,r6,r3
 800c370:	1110983a 	sll	r8,r2,r4
 800c374:	3108983a 	sll	r4,r6,r4
 800c378:	10c6d83a 	srl	r3,r2,r3
 800c37c:	41c4b03a 	or	r2,r8,r7
 800c380:	2008c03a 	cmpne	r4,r4,zero
 800c384:	110cb03a 	or	r6,r2,r4
 800c388:	818dc83a 	sub	r6,r16,r6
 800c38c:	81a1803a 	cmpltu	r16,r16,r6
 800c390:	28cbc83a 	sub	r5,r5,r3
 800c394:	2c0bc83a 	sub	r5,r5,r16
 800c398:	3021883a 	mov	r16,r6
 800c39c:	2880202c 	andhi	r2,r5,128
 800c3a0:	103fc226 	beq	r2,zero,800c2ac <__alt_data_end+0xf800c2ac>
 800c3a4:	04c02034 	movhi	r19,128
 800c3a8:	9cffffc4 	addi	r19,r19,-1
 800c3ac:	2ce6703a 	and	r19,r5,r19
 800c3b0:	98006c26 	beq	r19,zero,800c564 <__adddf3+0x334>
 800c3b4:	9809883a 	mov	r4,r19
 800c3b8:	800e9080 	call	800e908 <__clzsi2>
 800c3bc:	10fffe04 	addi	r3,r2,-8
 800c3c0:	010007c4 	movi	r4,31
 800c3c4:	20c06d16 	blt	r4,r3,800c57c <__adddf3+0x34c>
 800c3c8:	01000a04 	movi	r4,40
 800c3cc:	2085c83a 	sub	r2,r4,r2
 800c3d0:	8084d83a 	srl	r2,r16,r2
 800c3d4:	98e6983a 	sll	r19,r19,r3
 800c3d8:	80e0983a 	sll	r16,r16,r3
 800c3dc:	14c4b03a 	or	r2,r2,r19
 800c3e0:	1c406a16 	blt	r3,r17,800c58c <__adddf3+0x35c>
 800c3e4:	1c63c83a 	sub	r17,r3,r17
 800c3e8:	89400044 	addi	r5,r17,1
 800c3ec:	00c007c4 	movi	r3,31
 800c3f0:	19408616 	blt	r3,r5,800c60c <__adddf3+0x3dc>
 800c3f4:	1c47c83a 	sub	r3,r3,r17
 800c3f8:	8148d83a 	srl	r4,r16,r5
 800c3fc:	80e0983a 	sll	r16,r16,r3
 800c400:	10c6983a 	sll	r3,r2,r3
 800c404:	114ad83a 	srl	r5,r2,r5
 800c408:	8004c03a 	cmpne	r2,r16,zero
 800c40c:	20e0b03a 	or	r16,r4,r3
 800c410:	80a0b03a 	or	r16,r16,r2
 800c414:	0023883a 	mov	r17,zero
 800c418:	003fa406 	br	800c2ac <__alt_data_end+0xf800c2ac>
 800c41c:	2880202c 	andhi	r2,r5,128
 800c420:	9007883a 	mov	r3,r18
 800c424:	103fad1e 	bne	r2,zero,800c2dc <__alt_data_end+0xf800c2dc>
 800c428:	2804977a 	slli	r2,r5,29
 800c42c:	8020d0fa 	srli	r16,r16,3
 800c430:	0101ffc4 	movi	r4,2047
 800c434:	280ad0fa 	srli	r5,r5,3
 800c438:	1404b03a 	or	r2,r2,r16
 800c43c:	8900031e 	bne	r17,r4,800c44c <__adddf3+0x21c>
 800c440:	1148b03a 	or	r4,r2,r5
 800c444:	20005626 	beq	r4,zero,800c5a0 <__adddf3+0x370>
 800c448:	29400234 	orhi	r5,r5,8
 800c44c:	01000434 	movhi	r4,16
 800c450:	213fffc4 	addi	r4,r4,-1
 800c454:	290a703a 	and	r5,r5,r4
 800c458:	003fab06 	br	800c308 <__alt_data_end+0xf800c308>
 800c45c:	890fc83a 	sub	r7,r17,r4
 800c460:	01c0560e 	bge	zero,r7,800c5bc <__adddf3+0x38c>
 800c464:	20002426 	beq	r4,zero,800c4f8 <__adddf3+0x2c8>
 800c468:	0101ffc4 	movi	r4,2047
 800c46c:	893f8f26 	beq	r17,r4,800c2ac <__alt_data_end+0xf800c2ac>
 800c470:	10802034 	orhi	r2,r2,128
 800c474:	01000e04 	movi	r4,56
 800c478:	21c09d0e 	bge	r4,r7,800c6f0 <__adddf3+0x4c0>
 800c47c:	118cb03a 	or	r6,r2,r6
 800c480:	300cc03a 	cmpne	r6,r6,zero
 800c484:	000f883a 	mov	r7,zero
 800c488:	340d883a 	add	r6,r6,r16
 800c48c:	3421803a 	cmpltu	r16,r6,r16
 800c490:	394b883a 	add	r5,r7,r5
 800c494:	2c0b883a 	add	r5,r5,r16
 800c498:	3021883a 	mov	r16,r6
 800c49c:	2880202c 	andhi	r2,r5,128
 800c4a0:	103f8226 	beq	r2,zero,800c2ac <__alt_data_end+0xf800c2ac>
 800c4a4:	8c400044 	addi	r17,r17,1
 800c4a8:	0081ffc4 	movi	r2,2047
 800c4ac:	8880cb26 	beq	r17,r2,800c7dc <__adddf3+0x5ac>
 800c4b0:	00bfe034 	movhi	r2,65408
 800c4b4:	10bfffc4 	addi	r2,r2,-1
 800c4b8:	288a703a 	and	r5,r5,r2
 800c4bc:	8006d07a 	srli	r3,r16,1
 800c4c0:	280497fa 	slli	r2,r5,31
 800c4c4:	8400004c 	andi	r16,r16,1
 800c4c8:	80e0b03a 	or	r16,r16,r3
 800c4cc:	80a0b03a 	or	r16,r16,r2
 800c4d0:	280ad07a 	srli	r5,r5,1
 800c4d4:	003f7506 	br	800c2ac <__alt_data_end+0xf800c2ac>
 800c4d8:	18ffffc4 	addi	r3,r3,-1
 800c4dc:	1800481e 	bne	r3,zero,800c600 <__adddf3+0x3d0>
 800c4e0:	818dc83a 	sub	r6,r16,r6
 800c4e4:	81a1803a 	cmpltu	r16,r16,r6
 800c4e8:	288bc83a 	sub	r5,r5,r2
 800c4ec:	2c0bc83a 	sub	r5,r5,r16
 800c4f0:	3021883a 	mov	r16,r6
 800c4f4:	003fa906 	br	800c39c <__alt_data_end+0xf800c39c>
 800c4f8:	1188b03a 	or	r4,r2,r6
 800c4fc:	203f6b26 	beq	r4,zero,800c2ac <__alt_data_end+0xf800c2ac>
 800c500:	39ffffc4 	addi	r7,r7,-1
 800c504:	3800931e 	bne	r7,zero,800c754 <__adddf3+0x524>
 800c508:	340d883a 	add	r6,r6,r16
 800c50c:	3421803a 	cmpltu	r16,r6,r16
 800c510:	114b883a 	add	r5,r2,r5
 800c514:	2c0b883a 	add	r5,r5,r16
 800c518:	3021883a 	mov	r16,r6
 800c51c:	003fdf06 	br	800c49c <__alt_data_end+0xf800c49c>
 800c520:	1800531e 	bne	r3,zero,800c670 <__adddf3+0x440>
 800c524:	88c00044 	addi	r3,r17,1
 800c528:	18c1ffcc 	andi	r3,r3,2047
 800c52c:	01000044 	movi	r4,1
 800c530:	20c0a00e 	bge	r4,r3,800c7b4 <__adddf3+0x584>
 800c534:	8187c83a 	sub	r3,r16,r6
 800c538:	80c9803a 	cmpltu	r4,r16,r3
 800c53c:	28a7c83a 	sub	r19,r5,r2
 800c540:	9927c83a 	sub	r19,r19,r4
 800c544:	9900202c 	andhi	r4,r19,128
 800c548:	20006226 	beq	r4,zero,800c6d4 <__adddf3+0x4a4>
 800c54c:	3421c83a 	sub	r16,r6,r16
 800c550:	1145c83a 	sub	r2,r2,r5
 800c554:	340d803a 	cmpltu	r6,r6,r16
 800c558:	11a7c83a 	sub	r19,r2,r6
 800c55c:	3825883a 	mov	r18,r7
 800c560:	983f941e 	bne	r19,zero,800c3b4 <__alt_data_end+0xf800c3b4>
 800c564:	8009883a 	mov	r4,r16
 800c568:	800e9080 	call	800e908 <__clzsi2>
 800c56c:	10800804 	addi	r2,r2,32
 800c570:	10fffe04 	addi	r3,r2,-8
 800c574:	010007c4 	movi	r4,31
 800c578:	20ff930e 	bge	r4,r3,800c3c8 <__alt_data_end+0xf800c3c8>
 800c57c:	10bff604 	addi	r2,r2,-40
 800c580:	8084983a 	sll	r2,r16,r2
 800c584:	0021883a 	mov	r16,zero
 800c588:	1c7f960e 	bge	r3,r17,800c3e4 <__alt_data_end+0xf800c3e4>
 800c58c:	017fe034 	movhi	r5,65408
 800c590:	297fffc4 	addi	r5,r5,-1
 800c594:	88e3c83a 	sub	r17,r17,r3
 800c598:	114a703a 	and	r5,r2,r5
 800c59c:	003f4306 	br	800c2ac <__alt_data_end+0xf800c2ac>
 800c5a0:	000b883a 	mov	r5,zero
 800c5a4:	0005883a 	mov	r2,zero
 800c5a8:	003f5706 	br	800c308 <__alt_data_end+0xf800c308>
 800c5ac:	118cb03a 	or	r6,r2,r6
 800c5b0:	300cc03a 	cmpne	r6,r6,zero
 800c5b4:	0007883a 	mov	r3,zero
 800c5b8:	003f7306 	br	800c388 <__alt_data_end+0xf800c388>
 800c5bc:	3800961e 	bne	r7,zero,800c818 <__adddf3+0x5e8>
 800c5c0:	89000044 	addi	r4,r17,1
 800c5c4:	2201ffcc 	andi	r8,r4,2047
 800c5c8:	01c00044 	movi	r7,1
 800c5cc:	3a00680e 	bge	r7,r8,800c770 <__adddf3+0x540>
 800c5d0:	01c1ffc4 	movi	r7,2047
 800c5d4:	21c0a726 	beq	r4,r7,800c874 <__adddf3+0x644>
 800c5d8:	340d883a 	add	r6,r6,r16
 800c5dc:	3421803a 	cmpltu	r16,r6,r16
 800c5e0:	114b883a 	add	r5,r2,r5
 800c5e4:	2c0b883a 	add	r5,r5,r16
 800c5e8:	282097fa 	slli	r16,r5,31
 800c5ec:	300cd07a 	srli	r6,r6,1
 800c5f0:	280ad07a 	srli	r5,r5,1
 800c5f4:	2023883a 	mov	r17,r4
 800c5f8:	81a0b03a 	or	r16,r16,r6
 800c5fc:	003f2b06 	br	800c2ac <__alt_data_end+0xf800c2ac>
 800c600:	0101ffc4 	movi	r4,2047
 800c604:	893f531e 	bne	r17,r4,800c354 <__alt_data_end+0xf800c354>
 800c608:	003f2806 	br	800c2ac <__alt_data_end+0xf800c2ac>
 800c60c:	893ff844 	addi	r4,r17,-31
 800c610:	00c00804 	movi	r3,32
 800c614:	1108d83a 	srl	r4,r2,r4
 800c618:	28c05126 	beq	r5,r3,800c760 <__adddf3+0x530>
 800c61c:	00c00fc4 	movi	r3,63
 800c620:	1c63c83a 	sub	r17,r3,r17
 800c624:	1444983a 	sll	r2,r2,r17
 800c628:	1420b03a 	or	r16,r2,r16
 800c62c:	8020c03a 	cmpne	r16,r16,zero
 800c630:	8120b03a 	or	r16,r16,r4
 800c634:	000b883a 	mov	r5,zero
 800c638:	0023883a 	mov	r17,zero
 800c63c:	003f1b06 	br	800c2ac <__alt_data_end+0xf800c2ac>
 800c640:	193ff804 	addi	r4,r3,-32
 800c644:	01c00804 	movi	r7,32
 800c648:	1108d83a 	srl	r4,r2,r4
 800c64c:	19c04626 	beq	r3,r7,800c768 <__adddf3+0x538>
 800c650:	01c01004 	movi	r7,64
 800c654:	38c7c83a 	sub	r3,r7,r3
 800c658:	10c4983a 	sll	r2,r2,r3
 800c65c:	118cb03a 	or	r6,r2,r6
 800c660:	300cc03a 	cmpne	r6,r6,zero
 800c664:	310cb03a 	or	r6,r6,r4
 800c668:	0007883a 	mov	r3,zero
 800c66c:	003f4606 	br	800c388 <__alt_data_end+0xf800c388>
 800c670:	88002b26 	beq	r17,zero,800c720 <__adddf3+0x4f0>
 800c674:	0201ffc4 	movi	r8,2047
 800c678:	22002f26 	beq	r4,r8,800c738 <__adddf3+0x508>
 800c67c:	00c7c83a 	sub	r3,zero,r3
 800c680:	29402034 	orhi	r5,r5,128
 800c684:	02000e04 	movi	r8,56
 800c688:	40c07616 	blt	r8,r3,800c864 <__adddf3+0x634>
 800c68c:	020007c4 	movi	r8,31
 800c690:	40c0d216 	blt	r8,r3,800c9dc <__adddf3+0x7ac>
 800c694:	02000804 	movi	r8,32
 800c698:	40d1c83a 	sub	r8,r8,r3
 800c69c:	2a14983a 	sll	r10,r5,r8
 800c6a0:	80d2d83a 	srl	r9,r16,r3
 800c6a4:	8210983a 	sll	r8,r16,r8
 800c6a8:	28cad83a 	srl	r5,r5,r3
 800c6ac:	5252b03a 	or	r9,r10,r9
 800c6b0:	4006c03a 	cmpne	r3,r8,zero
 800c6b4:	48e0b03a 	or	r16,r9,r3
 800c6b8:	3421c83a 	sub	r16,r6,r16
 800c6bc:	114bc83a 	sub	r5,r2,r5
 800c6c0:	340d803a 	cmpltu	r6,r6,r16
 800c6c4:	298bc83a 	sub	r5,r5,r6
 800c6c8:	2023883a 	mov	r17,r4
 800c6cc:	3825883a 	mov	r18,r7
 800c6d0:	003f3206 	br	800c39c <__alt_data_end+0xf800c39c>
 800c6d4:	98c4b03a 	or	r2,r19,r3
 800c6d8:	10001c1e 	bne	r2,zero,800c74c <__adddf3+0x51c>
 800c6dc:	0007883a 	mov	r3,zero
 800c6e0:	000b883a 	mov	r5,zero
 800c6e4:	0021883a 	mov	r16,zero
 800c6e8:	0023883a 	mov	r17,zero
 800c6ec:	003f4e06 	br	800c428 <__alt_data_end+0xf800c428>
 800c6f0:	010007c4 	movi	r4,31
 800c6f4:	21c03c16 	blt	r4,r7,800c7e8 <__adddf3+0x5b8>
 800c6f8:	01000804 	movi	r4,32
 800c6fc:	21c9c83a 	sub	r4,r4,r7
 800c700:	31d0d83a 	srl	r8,r6,r7
 800c704:	1112983a 	sll	r9,r2,r4
 800c708:	3108983a 	sll	r4,r6,r4
 800c70c:	11ced83a 	srl	r7,r2,r7
 800c710:	4a04b03a 	or	r2,r9,r8
 800c714:	2008c03a 	cmpne	r4,r4,zero
 800c718:	110cb03a 	or	r6,r2,r4
 800c71c:	003f5a06 	br	800c488 <__alt_data_end+0xf800c488>
 800c720:	2c10b03a 	or	r8,r5,r16
 800c724:	40000426 	beq	r8,zero,800c738 <__adddf3+0x508>
 800c728:	00c6303a 	nor	r3,zero,r3
 800c72c:	183fe226 	beq	r3,zero,800c6b8 <__alt_data_end+0xf800c6b8>
 800c730:	0201ffc4 	movi	r8,2047
 800c734:	223fd31e 	bne	r4,r8,800c684 <__alt_data_end+0xf800c684>
 800c738:	100b883a 	mov	r5,r2
 800c73c:	3021883a 	mov	r16,r6
 800c740:	2023883a 	mov	r17,r4
 800c744:	3825883a 	mov	r18,r7
 800c748:	003ed806 	br	800c2ac <__alt_data_end+0xf800c2ac>
 800c74c:	1821883a 	mov	r16,r3
 800c750:	003f1706 	br	800c3b0 <__alt_data_end+0xf800c3b0>
 800c754:	0101ffc4 	movi	r4,2047
 800c758:	893f461e 	bne	r17,r4,800c474 <__alt_data_end+0xf800c474>
 800c75c:	003ed306 	br	800c2ac <__alt_data_end+0xf800c2ac>
 800c760:	0005883a 	mov	r2,zero
 800c764:	003fb006 	br	800c628 <__alt_data_end+0xf800c628>
 800c768:	0005883a 	mov	r2,zero
 800c76c:	003fbb06 	br	800c65c <__alt_data_end+0xf800c65c>
 800c770:	2c06b03a 	or	r3,r5,r16
 800c774:	8800841e 	bne	r17,zero,800c988 <__adddf3+0x758>
 800c778:	1800b226 	beq	r3,zero,800ca44 <__adddf3+0x814>
 800c77c:	1186b03a 	or	r3,r2,r6
 800c780:	183eca26 	beq	r3,zero,800c2ac <__alt_data_end+0xf800c2ac>
 800c784:	340d883a 	add	r6,r6,r16
 800c788:	114b883a 	add	r5,r2,r5
 800c78c:	3421803a 	cmpltu	r16,r6,r16
 800c790:	2c0b883a 	add	r5,r5,r16
 800c794:	2880202c 	andhi	r2,r5,128
 800c798:	1000c026 	beq	r2,zero,800ca9c <__adddf3+0x86c>
 800c79c:	00bfe034 	movhi	r2,65408
 800c7a0:	10bfffc4 	addi	r2,r2,-1
 800c7a4:	288a703a 	and	r5,r5,r2
 800c7a8:	3021883a 	mov	r16,r6
 800c7ac:	3823883a 	mov	r17,r7
 800c7b0:	003ebe06 	br	800c2ac <__alt_data_end+0xf800c2ac>
 800c7b4:	2c06b03a 	or	r3,r5,r16
 800c7b8:	8800221e 	bne	r17,zero,800c844 <__adddf3+0x614>
 800c7bc:	1800481e 	bne	r3,zero,800c8e0 <__adddf3+0x6b0>
 800c7c0:	1186b03a 	or	r3,r2,r6
 800c7c4:	18000426 	beq	r3,zero,800c7d8 <__adddf3+0x5a8>
 800c7c8:	100b883a 	mov	r5,r2
 800c7cc:	3021883a 	mov	r16,r6
 800c7d0:	3825883a 	mov	r18,r7
 800c7d4:	003eb506 	br	800c2ac <__alt_data_end+0xf800c2ac>
 800c7d8:	0007883a 	mov	r3,zero
 800c7dc:	000b883a 	mov	r5,zero
 800c7e0:	0021883a 	mov	r16,zero
 800c7e4:	003f1006 	br	800c428 <__alt_data_end+0xf800c428>
 800c7e8:	393ff804 	addi	r4,r7,-32
 800c7ec:	02000804 	movi	r8,32
 800c7f0:	1108d83a 	srl	r4,r2,r4
 800c7f4:	3a007726 	beq	r7,r8,800c9d4 <__adddf3+0x7a4>
 800c7f8:	02001004 	movi	r8,64
 800c7fc:	41cfc83a 	sub	r7,r8,r7
 800c800:	11c4983a 	sll	r2,r2,r7
 800c804:	118cb03a 	or	r6,r2,r6
 800c808:	300cc03a 	cmpne	r6,r6,zero
 800c80c:	310cb03a 	or	r6,r6,r4
 800c810:	000f883a 	mov	r7,zero
 800c814:	003f1c06 	br	800c488 <__alt_data_end+0xf800c488>
 800c818:	88001a1e 	bne	r17,zero,800c884 <__adddf3+0x654>
 800c81c:	2c10b03a 	or	r8,r5,r16
 800c820:	40005526 	beq	r8,zero,800c978 <__adddf3+0x748>
 800c824:	01ce303a 	nor	r7,zero,r7
 800c828:	3800511e 	bne	r7,zero,800c970 <__adddf3+0x740>
 800c82c:	81a1883a 	add	r16,r16,r6
 800c830:	114b883a 	add	r5,r2,r5
 800c834:	818d803a 	cmpltu	r6,r16,r6
 800c838:	298b883a 	add	r5,r5,r6
 800c83c:	2023883a 	mov	r17,r4
 800c840:	003f1606 	br	800c49c <__alt_data_end+0xf800c49c>
 800c844:	1800341e 	bne	r3,zero,800c918 <__adddf3+0x6e8>
 800c848:	1186b03a 	or	r3,r2,r6
 800c84c:	18006f26 	beq	r3,zero,800ca0c <__adddf3+0x7dc>
 800c850:	100b883a 	mov	r5,r2
 800c854:	3021883a 	mov	r16,r6
 800c858:	3825883a 	mov	r18,r7
 800c85c:	0441ffc4 	movi	r17,2047
 800c860:	003e9206 	br	800c2ac <__alt_data_end+0xf800c2ac>
 800c864:	2c20b03a 	or	r16,r5,r16
 800c868:	8020c03a 	cmpne	r16,r16,zero
 800c86c:	000b883a 	mov	r5,zero
 800c870:	003f9106 	br	800c6b8 <__alt_data_end+0xf800c6b8>
 800c874:	2023883a 	mov	r17,r4
 800c878:	000b883a 	mov	r5,zero
 800c87c:	0021883a 	mov	r16,zero
 800c880:	003ee906 	br	800c428 <__alt_data_end+0xf800c428>
 800c884:	0201ffc4 	movi	r8,2047
 800c888:	22003b26 	beq	r4,r8,800c978 <__adddf3+0x748>
 800c88c:	01cfc83a 	sub	r7,zero,r7
 800c890:	29402034 	orhi	r5,r5,128
 800c894:	02000e04 	movi	r8,56
 800c898:	41c06216 	blt	r8,r7,800ca24 <__adddf3+0x7f4>
 800c89c:	020007c4 	movi	r8,31
 800c8a0:	41c07016 	blt	r8,r7,800ca64 <__adddf3+0x834>
 800c8a4:	02000804 	movi	r8,32
 800c8a8:	41d1c83a 	sub	r8,r8,r7
 800c8ac:	2a14983a 	sll	r10,r5,r8
 800c8b0:	81d2d83a 	srl	r9,r16,r7
 800c8b4:	8210983a 	sll	r8,r16,r8
 800c8b8:	29cad83a 	srl	r5,r5,r7
 800c8bc:	5252b03a 	or	r9,r10,r9
 800c8c0:	400ec03a 	cmpne	r7,r8,zero
 800c8c4:	49e0b03a 	or	r16,r9,r7
 800c8c8:	81a1883a 	add	r16,r16,r6
 800c8cc:	2885883a 	add	r2,r5,r2
 800c8d0:	818d803a 	cmpltu	r6,r16,r6
 800c8d4:	118b883a 	add	r5,r2,r6
 800c8d8:	2023883a 	mov	r17,r4
 800c8dc:	003eef06 	br	800c49c <__alt_data_end+0xf800c49c>
 800c8e0:	1186b03a 	or	r3,r2,r6
 800c8e4:	183e7126 	beq	r3,zero,800c2ac <__alt_data_end+0xf800c2ac>
 800c8e8:	8187c83a 	sub	r3,r16,r6
 800c8ec:	80d1803a 	cmpltu	r8,r16,r3
 800c8f0:	2889c83a 	sub	r4,r5,r2
 800c8f4:	2209c83a 	sub	r4,r4,r8
 800c8f8:	2200202c 	andhi	r8,r4,128
 800c8fc:	40005426 	beq	r8,zero,800ca50 <__adddf3+0x820>
 800c900:	3421c83a 	sub	r16,r6,r16
 800c904:	114bc83a 	sub	r5,r2,r5
 800c908:	340d803a 	cmpltu	r6,r6,r16
 800c90c:	298bc83a 	sub	r5,r5,r6
 800c910:	3825883a 	mov	r18,r7
 800c914:	003e6506 	br	800c2ac <__alt_data_end+0xf800c2ac>
 800c918:	1186b03a 	or	r3,r2,r6
 800c91c:	18002b26 	beq	r3,zero,800c9cc <__adddf3+0x79c>
 800c920:	2806d0fa 	srli	r3,r5,3
 800c924:	8020d0fa 	srli	r16,r16,3
 800c928:	280a977a 	slli	r5,r5,29
 800c92c:	1900022c 	andhi	r4,r3,8
 800c930:	2c20b03a 	or	r16,r5,r16
 800c934:	20000826 	beq	r4,zero,800c958 <__adddf3+0x728>
 800c938:	1008d0fa 	srli	r4,r2,3
 800c93c:	2140022c 	andhi	r5,r4,8
 800c940:	2800051e 	bne	r5,zero,800c958 <__adddf3+0x728>
 800c944:	300cd0fa 	srli	r6,r6,3
 800c948:	1004977a 	slli	r2,r2,29
 800c94c:	2007883a 	mov	r3,r4
 800c950:	3825883a 	mov	r18,r7
 800c954:	11a0b03a 	or	r16,r2,r6
 800c958:	800ad77a 	srli	r5,r16,29
 800c95c:	180690fa 	slli	r3,r3,3
 800c960:	802090fa 	slli	r16,r16,3
 800c964:	0441ffc4 	movi	r17,2047
 800c968:	28cab03a 	or	r5,r5,r3
 800c96c:	003e4f06 	br	800c2ac <__alt_data_end+0xf800c2ac>
 800c970:	0201ffc4 	movi	r8,2047
 800c974:	223fc71e 	bne	r4,r8,800c894 <__alt_data_end+0xf800c894>
 800c978:	100b883a 	mov	r5,r2
 800c97c:	3021883a 	mov	r16,r6
 800c980:	2023883a 	mov	r17,r4
 800c984:	003e4906 	br	800c2ac <__alt_data_end+0xf800c2ac>
 800c988:	18002a26 	beq	r3,zero,800ca34 <__adddf3+0x804>
 800c98c:	1186b03a 	or	r3,r2,r6
 800c990:	18000e26 	beq	r3,zero,800c9cc <__adddf3+0x79c>
 800c994:	2806d0fa 	srli	r3,r5,3
 800c998:	8020d0fa 	srli	r16,r16,3
 800c99c:	280a977a 	slli	r5,r5,29
 800c9a0:	1900022c 	andhi	r4,r3,8
 800c9a4:	2c20b03a 	or	r16,r5,r16
 800c9a8:	203feb26 	beq	r4,zero,800c958 <__alt_data_end+0xf800c958>
 800c9ac:	1008d0fa 	srli	r4,r2,3
 800c9b0:	2140022c 	andhi	r5,r4,8
 800c9b4:	283fe81e 	bne	r5,zero,800c958 <__alt_data_end+0xf800c958>
 800c9b8:	300cd0fa 	srli	r6,r6,3
 800c9bc:	1004977a 	slli	r2,r2,29
 800c9c0:	2007883a 	mov	r3,r4
 800c9c4:	11a0b03a 	or	r16,r2,r6
 800c9c8:	003fe306 	br	800c958 <__alt_data_end+0xf800c958>
 800c9cc:	0441ffc4 	movi	r17,2047
 800c9d0:	003e3606 	br	800c2ac <__alt_data_end+0xf800c2ac>
 800c9d4:	0005883a 	mov	r2,zero
 800c9d8:	003f8a06 	br	800c804 <__alt_data_end+0xf800c804>
 800c9dc:	1a3ff804 	addi	r8,r3,-32
 800c9e0:	02400804 	movi	r9,32
 800c9e4:	2a10d83a 	srl	r8,r5,r8
 800c9e8:	1a402a26 	beq	r3,r9,800ca94 <__adddf3+0x864>
 800c9ec:	02401004 	movi	r9,64
 800c9f0:	48c7c83a 	sub	r3,r9,r3
 800c9f4:	28ca983a 	sll	r5,r5,r3
 800c9f8:	2c20b03a 	or	r16,r5,r16
 800c9fc:	8020c03a 	cmpne	r16,r16,zero
 800ca00:	8220b03a 	or	r16,r16,r8
 800ca04:	000b883a 	mov	r5,zero
 800ca08:	003f2b06 	br	800c6b8 <__alt_data_end+0xf800c6b8>
 800ca0c:	0007883a 	mov	r3,zero
 800ca10:	01402034 	movhi	r5,128
 800ca14:	297fffc4 	addi	r5,r5,-1
 800ca18:	043ffe04 	movi	r16,-8
 800ca1c:	0441ffc4 	movi	r17,2047
 800ca20:	003e8106 	br	800c428 <__alt_data_end+0xf800c428>
 800ca24:	2c20b03a 	or	r16,r5,r16
 800ca28:	8020c03a 	cmpne	r16,r16,zero
 800ca2c:	000b883a 	mov	r5,zero
 800ca30:	003fa506 	br	800c8c8 <__alt_data_end+0xf800c8c8>
 800ca34:	100b883a 	mov	r5,r2
 800ca38:	3021883a 	mov	r16,r6
 800ca3c:	0441ffc4 	movi	r17,2047
 800ca40:	003e1a06 	br	800c2ac <__alt_data_end+0xf800c2ac>
 800ca44:	100b883a 	mov	r5,r2
 800ca48:	3021883a 	mov	r16,r6
 800ca4c:	003e1706 	br	800c2ac <__alt_data_end+0xf800c2ac>
 800ca50:	20c4b03a 	or	r2,r4,r3
 800ca54:	103f6026 	beq	r2,zero,800c7d8 <__alt_data_end+0xf800c7d8>
 800ca58:	200b883a 	mov	r5,r4
 800ca5c:	1821883a 	mov	r16,r3
 800ca60:	003e1206 	br	800c2ac <__alt_data_end+0xf800c2ac>
 800ca64:	3a3ff804 	addi	r8,r7,-32
 800ca68:	02400804 	movi	r9,32
 800ca6c:	2a10d83a 	srl	r8,r5,r8
 800ca70:	3a400c26 	beq	r7,r9,800caa4 <__adddf3+0x874>
 800ca74:	02401004 	movi	r9,64
 800ca78:	49cfc83a 	sub	r7,r9,r7
 800ca7c:	29ca983a 	sll	r5,r5,r7
 800ca80:	2c20b03a 	or	r16,r5,r16
 800ca84:	8020c03a 	cmpne	r16,r16,zero
 800ca88:	8220b03a 	or	r16,r16,r8
 800ca8c:	000b883a 	mov	r5,zero
 800ca90:	003f8d06 	br	800c8c8 <__alt_data_end+0xf800c8c8>
 800ca94:	000b883a 	mov	r5,zero
 800ca98:	003fd706 	br	800c9f8 <__alt_data_end+0xf800c9f8>
 800ca9c:	3021883a 	mov	r16,r6
 800caa0:	003e0206 	br	800c2ac <__alt_data_end+0xf800c2ac>
 800caa4:	000b883a 	mov	r5,zero
 800caa8:	003ff506 	br	800ca80 <__alt_data_end+0xf800ca80>

0800caac <__divdf3>:
 800caac:	defff004 	addi	sp,sp,-64
 800cab0:	dd000a15 	stw	r20,40(sp)
 800cab4:	2828d53a 	srli	r20,r5,20
 800cab8:	dd800c15 	stw	r22,48(sp)
 800cabc:	282cd7fa 	srli	r22,r5,31
 800cac0:	df000e15 	stw	fp,56(sp)
 800cac4:	dcc00915 	stw	r19,36(sp)
 800cac8:	dc800815 	stw	r18,32(sp)
 800cacc:	04c00434 	movhi	r19,16
 800cad0:	9cffffc4 	addi	r19,r19,-1
 800cad4:	dfc00f15 	stw	ra,60(sp)
 800cad8:	ddc00d15 	stw	r23,52(sp)
 800cadc:	dd400b15 	stw	r21,44(sp)
 800cae0:	dc400715 	stw	r17,28(sp)
 800cae4:	dc000615 	stw	r16,24(sp)
 800cae8:	a501ffcc 	andi	r20,r20,2047
 800caec:	2025883a 	mov	r18,r4
 800caf0:	2ce6703a 	and	r19,r5,r19
 800caf4:	b7003fcc 	andi	fp,r22,255
 800caf8:	a0006a26 	beq	r20,zero,800cca4 <__divdf3+0x1f8>
 800cafc:	0081ffc4 	movi	r2,2047
 800cb00:	2021883a 	mov	r16,r4
 800cb04:	a0803726 	beq	r20,r2,800cbe4 <__divdf3+0x138>
 800cb08:	98800434 	orhi	r2,r19,16
 800cb0c:	100490fa 	slli	r2,r2,3
 800cb10:	2026d77a 	srli	r19,r4,29
 800cb14:	202090fa 	slli	r16,r4,3
 800cb18:	a53f0044 	addi	r20,r20,-1023
 800cb1c:	14e6b03a 	or	r19,r2,r19
 800cb20:	002b883a 	mov	r21,zero
 800cb24:	0013883a 	mov	r9,zero
 800cb28:	3804d53a 	srli	r2,r7,20
 800cb2c:	382ed7fa 	srli	r23,r7,31
 800cb30:	04400434 	movhi	r17,16
 800cb34:	8c7fffc4 	addi	r17,r17,-1
 800cb38:	1081ffcc 	andi	r2,r2,2047
 800cb3c:	3025883a 	mov	r18,r6
 800cb40:	3c62703a 	and	r17,r7,r17
 800cb44:	ba803fcc 	andi	r10,r23,255
 800cb48:	10007326 	beq	r2,zero,800cd18 <__divdf3+0x26c>
 800cb4c:	0101ffc4 	movi	r4,2047
 800cb50:	11006b26 	beq	r2,r4,800cd00 <__divdf3+0x254>
 800cb54:	89000434 	orhi	r4,r17,16
 800cb58:	200890fa 	slli	r4,r4,3
 800cb5c:	3022d77a 	srli	r17,r6,29
 800cb60:	302490fa 	slli	r18,r6,3
 800cb64:	10bf0044 	addi	r2,r2,-1023
 800cb68:	2462b03a 	or	r17,r4,r17
 800cb6c:	000f883a 	mov	r7,zero
 800cb70:	b5caf03a 	xor	r5,r22,r23
 800cb74:	3d48b03a 	or	r4,r7,r21
 800cb78:	00c003c4 	movi	r3,15
 800cb7c:	2811883a 	mov	r8,r5
 800cb80:	2d403fcc 	andi	r21,r5,255
 800cb84:	19009436 	bltu	r3,r4,800cdd8 <__divdf3+0x32c>
 800cb88:	2109883a 	add	r4,r4,r4
 800cb8c:	00c20074 	movhi	r3,2049
 800cb90:	18f2e904 	addi	r3,r3,-13404
 800cb94:	2109883a 	add	r4,r4,r4
 800cb98:	20c9883a 	add	r4,r4,r3
 800cb9c:	20c00017 	ldw	r3,0(r4)
 800cba0:	1800683a 	jmp	r3
 800cba4:	0800cdd8 	cmpnei	zero,at,823
 800cba8:	0800cc40 	call	800cc4 <__reset-0x77ff33c>
 800cbac:	0800cdc8 	cmpgei	zero,at,823
 800cbb0:	0800cc10 	cmplti	zero,at,816
 800cbb4:	0800cdc8 	cmpgei	zero,at,823
 800cbb8:	0800cdb0 	cmpltui	zero,at,822
 800cbbc:	0800cdc8 	cmpgei	zero,at,823
 800cbc0:	0800cc10 	cmplti	zero,at,816
 800cbc4:	0800cc40 	call	800cc4 <__reset-0x77ff33c>
 800cbc8:	0800cc40 	call	800cc4 <__reset-0x77ff33c>
 800cbcc:	0800cdb0 	cmpltui	zero,at,822
 800cbd0:	0800cc10 	cmplti	zero,at,816
 800cbd4:	0800cc00 	call	800cc0 <__reset-0x77ff340>
 800cbd8:	0800cc00 	call	800cc0 <__reset-0x77ff340>
 800cbdc:	0800cc00 	call	800cc0 <__reset-0x77ff340>
 800cbe0:	0800d168 	cmpgeui	zero,at,837
 800cbe4:	9904b03a 	or	r2,r19,r4
 800cbe8:	10006e1e 	bne	r2,zero,800cda4 <__divdf3+0x2f8>
 800cbec:	05400204 	movi	r21,8
 800cbf0:	0027883a 	mov	r19,zero
 800cbf4:	0021883a 	mov	r16,zero
 800cbf8:	02400084 	movi	r9,2
 800cbfc:	003fca06 	br	800cb28 <__alt_data_end+0xf800cb28>
 800cc00:	9823883a 	mov	r17,r19
 800cc04:	8025883a 	mov	r18,r16
 800cc08:	e015883a 	mov	r10,fp
 800cc0c:	480f883a 	mov	r7,r9
 800cc10:	00800084 	movi	r2,2
 800cc14:	38800926 	beq	r7,r2,800cc3c <__divdf3+0x190>
 800cc18:	008000c4 	movi	r2,3
 800cc1c:	38820226 	beq	r7,r2,800d428 <__divdf3+0x97c>
 800cc20:	00800044 	movi	r2,1
 800cc24:	3881b81e 	bne	r7,r2,800d308 <__divdf3+0x85c>
 800cc28:	5011883a 	mov	r8,r10
 800cc2c:	0005883a 	mov	r2,zero
 800cc30:	0027883a 	mov	r19,zero
 800cc34:	0021883a 	mov	r16,zero
 800cc38:	00000506 	br	800cc50 <__divdf3+0x1a4>
 800cc3c:	502b883a 	mov	r21,r10
 800cc40:	aa00004c 	andi	r8,r21,1
 800cc44:	0081ffc4 	movi	r2,2047
 800cc48:	0027883a 	mov	r19,zero
 800cc4c:	0021883a 	mov	r16,zero
 800cc50:	1004953a 	slli	r2,r2,20
 800cc54:	42003fcc 	andi	r8,r8,255
 800cc58:	401097fa 	slli	r8,r8,31
 800cc5c:	00c00434 	movhi	r3,16
 800cc60:	18ffffc4 	addi	r3,r3,-1
 800cc64:	98e6703a 	and	r19,r19,r3
 800cc68:	9886b03a 	or	r3,r19,r2
 800cc6c:	1a06b03a 	or	r3,r3,r8
 800cc70:	8005883a 	mov	r2,r16
 800cc74:	dfc00f17 	ldw	ra,60(sp)
 800cc78:	df000e17 	ldw	fp,56(sp)
 800cc7c:	ddc00d17 	ldw	r23,52(sp)
 800cc80:	dd800c17 	ldw	r22,48(sp)
 800cc84:	dd400b17 	ldw	r21,44(sp)
 800cc88:	dd000a17 	ldw	r20,40(sp)
 800cc8c:	dcc00917 	ldw	r19,36(sp)
 800cc90:	dc800817 	ldw	r18,32(sp)
 800cc94:	dc400717 	ldw	r17,28(sp)
 800cc98:	dc000617 	ldw	r16,24(sp)
 800cc9c:	dec01004 	addi	sp,sp,64
 800cca0:	f800283a 	ret
 800cca4:	9904b03a 	or	r2,r19,r4
 800cca8:	10003926 	beq	r2,zero,800cd90 <__divdf3+0x2e4>
 800ccac:	98015326 	beq	r19,zero,800d1fc <__divdf3+0x750>
 800ccb0:	9809883a 	mov	r4,r19
 800ccb4:	d9800215 	stw	r6,8(sp)
 800ccb8:	d9c00515 	stw	r7,20(sp)
 800ccbc:	800e9080 	call	800e908 <__clzsi2>
 800ccc0:	d9800217 	ldw	r6,8(sp)
 800ccc4:	d9c00517 	ldw	r7,20(sp)
 800ccc8:	00c009c4 	movi	r3,39
 800cccc:	18814716 	blt	r3,r2,800d1ec <__divdf3+0x740>
 800ccd0:	01400a04 	movi	r5,40
 800ccd4:	143ffe04 	addi	r16,r2,-8
 800ccd8:	288bc83a 	sub	r5,r5,r2
 800ccdc:	9c26983a 	sll	r19,r19,r16
 800cce0:	914ad83a 	srl	r5,r18,r5
 800cce4:	9420983a 	sll	r16,r18,r16
 800cce8:	2ce6b03a 	or	r19,r5,r19
 800ccec:	053f0344 	movi	r20,-1011
 800ccf0:	a0a9c83a 	sub	r20,r20,r2
 800ccf4:	002b883a 	mov	r21,zero
 800ccf8:	0013883a 	mov	r9,zero
 800ccfc:	003f8a06 	br	800cb28 <__alt_data_end+0xf800cb28>
 800cd00:	8988b03a 	or	r4,r17,r6
 800cd04:	2000201e 	bne	r4,zero,800cd88 <__divdf3+0x2dc>
 800cd08:	0023883a 	mov	r17,zero
 800cd0c:	0025883a 	mov	r18,zero
 800cd10:	01c00084 	movi	r7,2
 800cd14:	003f9606 	br	800cb70 <__alt_data_end+0xf800cb70>
 800cd18:	8988b03a 	or	r4,r17,r6
 800cd1c:	20001626 	beq	r4,zero,800cd78 <__divdf3+0x2cc>
 800cd20:	88012826 	beq	r17,zero,800d1c4 <__divdf3+0x718>
 800cd24:	8809883a 	mov	r4,r17
 800cd28:	d9800215 	stw	r6,8(sp)
 800cd2c:	da400315 	stw	r9,12(sp)
 800cd30:	da800415 	stw	r10,16(sp)
 800cd34:	800e9080 	call	800e908 <__clzsi2>
 800cd38:	d9800217 	ldw	r6,8(sp)
 800cd3c:	da400317 	ldw	r9,12(sp)
 800cd40:	da800417 	ldw	r10,16(sp)
 800cd44:	010009c4 	movi	r4,39
 800cd48:	20811a16 	blt	r4,r2,800d1b4 <__divdf3+0x708>
 800cd4c:	01000a04 	movi	r4,40
 800cd50:	14bffe04 	addi	r18,r2,-8
 800cd54:	2089c83a 	sub	r4,r4,r2
 800cd58:	8ca2983a 	sll	r17,r17,r18
 800cd5c:	3108d83a 	srl	r4,r6,r4
 800cd60:	34a4983a 	sll	r18,r6,r18
 800cd64:	2462b03a 	or	r17,r4,r17
 800cd68:	013f0344 	movi	r4,-1011
 800cd6c:	2085c83a 	sub	r2,r4,r2
 800cd70:	000f883a 	mov	r7,zero
 800cd74:	003f7e06 	br	800cb70 <__alt_data_end+0xf800cb70>
 800cd78:	0023883a 	mov	r17,zero
 800cd7c:	0025883a 	mov	r18,zero
 800cd80:	01c00044 	movi	r7,1
 800cd84:	003f7a06 	br	800cb70 <__alt_data_end+0xf800cb70>
 800cd88:	01c000c4 	movi	r7,3
 800cd8c:	003f7806 	br	800cb70 <__alt_data_end+0xf800cb70>
 800cd90:	05400104 	movi	r21,4
 800cd94:	0027883a 	mov	r19,zero
 800cd98:	0021883a 	mov	r16,zero
 800cd9c:	02400044 	movi	r9,1
 800cda0:	003f6106 	br	800cb28 <__alt_data_end+0xf800cb28>
 800cda4:	05400304 	movi	r21,12
 800cda8:	024000c4 	movi	r9,3
 800cdac:	003f5e06 	br	800cb28 <__alt_data_end+0xf800cb28>
 800cdb0:	0011883a 	mov	r8,zero
 800cdb4:	04c00434 	movhi	r19,16
 800cdb8:	9cffffc4 	addi	r19,r19,-1
 800cdbc:	043fffc4 	movi	r16,-1
 800cdc0:	0081ffc4 	movi	r2,2047
 800cdc4:	003fa206 	br	800cc50 <__alt_data_end+0xf800cc50>
 800cdc8:	0005883a 	mov	r2,zero
 800cdcc:	0027883a 	mov	r19,zero
 800cdd0:	0021883a 	mov	r16,zero
 800cdd4:	003f9e06 	br	800cc50 <__alt_data_end+0xf800cc50>
 800cdd8:	a085c83a 	sub	r2,r20,r2
 800cddc:	d8800115 	stw	r2,4(sp)
 800cde0:	8cc11b36 	bltu	r17,r19,800d250 <__divdf3+0x7a4>
 800cde4:	9c411926 	beq	r19,r17,800d24c <__divdf3+0x7a0>
 800cde8:	d8c00117 	ldw	r3,4(sp)
 800cdec:	002d883a 	mov	r22,zero
 800cdf0:	18ffffc4 	addi	r3,r3,-1
 800cdf4:	d8c00115 	stw	r3,4(sp)
 800cdf8:	9006d63a 	srli	r3,r18,24
 800cdfc:	8822923a 	slli	r17,r17,8
 800ce00:	9024923a 	slli	r18,r18,8
 800ce04:	9809883a 	mov	r4,r19
 800ce08:	1c6eb03a 	or	r23,r3,r17
 800ce0c:	b828d43a 	srli	r20,r23,16
 800ce10:	dc800015 	stw	r18,0(sp)
 800ce14:	bcbfffcc 	andi	r18,r23,65535
 800ce18:	a00b883a 	mov	r5,r20
 800ce1c:	800c1f80 	call	800c1f8 <__udivsi3>
 800ce20:	1009883a 	mov	r4,r2
 800ce24:	900b883a 	mov	r5,r18
 800ce28:	1039883a 	mov	fp,r2
 800ce2c:	800c2080 	call	800c208 <__mulsi3>
 800ce30:	9809883a 	mov	r4,r19
 800ce34:	a00b883a 	mov	r5,r20
 800ce38:	1023883a 	mov	r17,r2
 800ce3c:	800c2000 	call	800c200 <__umodsi3>
 800ce40:	1004943a 	slli	r2,r2,16
 800ce44:	8008d43a 	srli	r4,r16,16
 800ce48:	110ab03a 	or	r5,r2,r4
 800ce4c:	2c40062e 	bgeu	r5,r17,800ce68 <__divdf3+0x3bc>
 800ce50:	2dcb883a 	add	r5,r5,r23
 800ce54:	e0bfffc4 	addi	r2,fp,-1
 800ce58:	2dc11136 	bltu	r5,r23,800d2a0 <__divdf3+0x7f4>
 800ce5c:	2c41102e 	bgeu	r5,r17,800d2a0 <__divdf3+0x7f4>
 800ce60:	e73fff84 	addi	fp,fp,-2
 800ce64:	2dcb883a 	add	r5,r5,r23
 800ce68:	2c67c83a 	sub	r19,r5,r17
 800ce6c:	9809883a 	mov	r4,r19
 800ce70:	a00b883a 	mov	r5,r20
 800ce74:	800c1f80 	call	800c1f8 <__udivsi3>
 800ce78:	1009883a 	mov	r4,r2
 800ce7c:	900b883a 	mov	r5,r18
 800ce80:	1023883a 	mov	r17,r2
 800ce84:	800c2080 	call	800c208 <__mulsi3>
 800ce88:	9809883a 	mov	r4,r19
 800ce8c:	a00b883a 	mov	r5,r20
 800ce90:	d8800215 	stw	r2,8(sp)
 800ce94:	800c2000 	call	800c200 <__umodsi3>
 800ce98:	1004943a 	slli	r2,r2,16
 800ce9c:	da000217 	ldw	r8,8(sp)
 800cea0:	843fffcc 	andi	r16,r16,65535
 800cea4:	140eb03a 	or	r7,r2,r16
 800cea8:	3a00062e 	bgeu	r7,r8,800cec4 <__divdf3+0x418>
 800ceac:	3dcf883a 	add	r7,r7,r23
 800ceb0:	88bfffc4 	addi	r2,r17,-1
 800ceb4:	3dc0f836 	bltu	r7,r23,800d298 <__divdf3+0x7ec>
 800ceb8:	3a00f72e 	bgeu	r7,r8,800d298 <__divdf3+0x7ec>
 800cebc:	8c7fff84 	addi	r17,r17,-2
 800cec0:	3dcf883a 	add	r7,r7,r23
 800cec4:	e004943a 	slli	r2,fp,16
 800cec8:	d8c00017 	ldw	r3,0(sp)
 800cecc:	3a0fc83a 	sub	r7,r7,r8
 800ced0:	88a2b03a 	or	r17,r17,r2
 800ced4:	1f3fffcc 	andi	fp,r3,65535
 800ced8:	8a7fffcc 	andi	r9,r17,65535
 800cedc:	4809883a 	mov	r4,r9
 800cee0:	e00b883a 	mov	r5,fp
 800cee4:	1826d43a 	srli	r19,r3,16
 800cee8:	d9c00515 	stw	r7,20(sp)
 800ceec:	da400315 	stw	r9,12(sp)
 800cef0:	800c2080 	call	800c208 <__mulsi3>
 800cef4:	da400317 	ldw	r9,12(sp)
 800cef8:	8820d43a 	srli	r16,r17,16
 800cefc:	980b883a 	mov	r5,r19
 800cf00:	4809883a 	mov	r4,r9
 800cf04:	d8800215 	stw	r2,8(sp)
 800cf08:	800c2080 	call	800c208 <__mulsi3>
 800cf0c:	8009883a 	mov	r4,r16
 800cf10:	e00b883a 	mov	r5,fp
 800cf14:	d8800415 	stw	r2,16(sp)
 800cf18:	800c2080 	call	800c208 <__mulsi3>
 800cf1c:	8009883a 	mov	r4,r16
 800cf20:	980b883a 	mov	r5,r19
 800cf24:	d8800315 	stw	r2,12(sp)
 800cf28:	800c2080 	call	800c208 <__mulsi3>
 800cf2c:	da000217 	ldw	r8,8(sp)
 800cf30:	da400317 	ldw	r9,12(sp)
 800cf34:	da800417 	ldw	r10,16(sp)
 800cf38:	100b883a 	mov	r5,r2
 800cf3c:	4004d43a 	srli	r2,r8,16
 800cf40:	4a89883a 	add	r4,r9,r10
 800cf44:	d9c00517 	ldw	r7,20(sp)
 800cf48:	2089883a 	add	r4,r4,r2
 800cf4c:	2240022e 	bgeu	r4,r9,800cf58 <__divdf3+0x4ac>
 800cf50:	00800074 	movhi	r2,1
 800cf54:	288b883a 	add	r5,r5,r2
 800cf58:	2004d43a 	srli	r2,r4,16
 800cf5c:	2020943a 	slli	r16,r4,16
 800cf60:	423fffcc 	andi	r8,r8,65535
 800cf64:	288b883a 	add	r5,r5,r2
 800cf68:	8221883a 	add	r16,r16,r8
 800cf6c:	3940ab36 	bltu	r7,r5,800d21c <__divdf3+0x770>
 800cf70:	3940a926 	beq	r7,r5,800d218 <__divdf3+0x76c>
 800cf74:	394bc83a 	sub	r5,r7,r5
 800cf78:	b421c83a 	sub	r16,r22,r16
 800cf7c:	b42d803a 	cmpltu	r22,r22,r16
 800cf80:	2dadc83a 	sub	r22,r5,r22
 800cf84:	b5c0da26 	beq	r22,r23,800d2f0 <__divdf3+0x844>
 800cf88:	b009883a 	mov	r4,r22
 800cf8c:	a00b883a 	mov	r5,r20
 800cf90:	800c1f80 	call	800c1f8 <__udivsi3>
 800cf94:	1009883a 	mov	r4,r2
 800cf98:	900b883a 	mov	r5,r18
 800cf9c:	d8800215 	stw	r2,8(sp)
 800cfa0:	800c2080 	call	800c208 <__mulsi3>
 800cfa4:	b009883a 	mov	r4,r22
 800cfa8:	a00b883a 	mov	r5,r20
 800cfac:	d8800515 	stw	r2,20(sp)
 800cfb0:	800c2000 	call	800c200 <__umodsi3>
 800cfb4:	1004943a 	slli	r2,r2,16
 800cfb8:	8008d43a 	srli	r4,r16,16
 800cfbc:	d9c00517 	ldw	r7,20(sp)
 800cfc0:	da000217 	ldw	r8,8(sp)
 800cfc4:	110ab03a 	or	r5,r2,r4
 800cfc8:	29c0062e 	bgeu	r5,r7,800cfe4 <__divdf3+0x538>
 800cfcc:	2dcb883a 	add	r5,r5,r23
 800cfd0:	40bfffc4 	addi	r2,r8,-1
 800cfd4:	2dc0ca36 	bltu	r5,r23,800d300 <__divdf3+0x854>
 800cfd8:	29c0c92e 	bgeu	r5,r7,800d300 <__divdf3+0x854>
 800cfdc:	423fff84 	addi	r8,r8,-2
 800cfe0:	2dcb883a 	add	r5,r5,r23
 800cfe4:	29cfc83a 	sub	r7,r5,r7
 800cfe8:	3809883a 	mov	r4,r7
 800cfec:	a00b883a 	mov	r5,r20
 800cff0:	da000215 	stw	r8,8(sp)
 800cff4:	d9c00515 	stw	r7,20(sp)
 800cff8:	800c1f80 	call	800c1f8 <__udivsi3>
 800cffc:	900b883a 	mov	r5,r18
 800d000:	1009883a 	mov	r4,r2
 800d004:	102d883a 	mov	r22,r2
 800d008:	800c2080 	call	800c208 <__mulsi3>
 800d00c:	d9c00517 	ldw	r7,20(sp)
 800d010:	a00b883a 	mov	r5,r20
 800d014:	1025883a 	mov	r18,r2
 800d018:	3809883a 	mov	r4,r7
 800d01c:	800c2000 	call	800c200 <__umodsi3>
 800d020:	1004943a 	slli	r2,r2,16
 800d024:	843fffcc 	andi	r16,r16,65535
 800d028:	da000217 	ldw	r8,8(sp)
 800d02c:	140eb03a 	or	r7,r2,r16
 800d030:	3c80062e 	bgeu	r7,r18,800d04c <__divdf3+0x5a0>
 800d034:	3dcf883a 	add	r7,r7,r23
 800d038:	b0bfffc4 	addi	r2,r22,-1
 800d03c:	3dc0ae36 	bltu	r7,r23,800d2f8 <__divdf3+0x84c>
 800d040:	3c80ad2e 	bgeu	r7,r18,800d2f8 <__divdf3+0x84c>
 800d044:	b5bfff84 	addi	r22,r22,-2
 800d048:	3dcf883a 	add	r7,r7,r23
 800d04c:	4010943a 	slli	r8,r8,16
 800d050:	3ca9c83a 	sub	r20,r7,r18
 800d054:	e00b883a 	mov	r5,fp
 800d058:	b224b03a 	or	r18,r22,r8
 800d05c:	91ffffcc 	andi	r7,r18,65535
 800d060:	3809883a 	mov	r4,r7
 800d064:	d9c00515 	stw	r7,20(sp)
 800d068:	800c2080 	call	800c208 <__mulsi3>
 800d06c:	d9c00517 	ldw	r7,20(sp)
 800d070:	9020d43a 	srli	r16,r18,16
 800d074:	980b883a 	mov	r5,r19
 800d078:	3809883a 	mov	r4,r7
 800d07c:	102d883a 	mov	r22,r2
 800d080:	800c2080 	call	800c208 <__mulsi3>
 800d084:	e00b883a 	mov	r5,fp
 800d088:	8009883a 	mov	r4,r16
 800d08c:	d8800515 	stw	r2,20(sp)
 800d090:	800c2080 	call	800c208 <__mulsi3>
 800d094:	8009883a 	mov	r4,r16
 800d098:	980b883a 	mov	r5,r19
 800d09c:	1039883a 	mov	fp,r2
 800d0a0:	800c2080 	call	800c208 <__mulsi3>
 800d0a4:	d9c00517 	ldw	r7,20(sp)
 800d0a8:	100b883a 	mov	r5,r2
 800d0ac:	b004d43a 	srli	r2,r22,16
 800d0b0:	e1c9883a 	add	r4,fp,r7
 800d0b4:	2089883a 	add	r4,r4,r2
 800d0b8:	2700022e 	bgeu	r4,fp,800d0c4 <__divdf3+0x618>
 800d0bc:	00800074 	movhi	r2,1
 800d0c0:	288b883a 	add	r5,r5,r2
 800d0c4:	2004d43a 	srli	r2,r4,16
 800d0c8:	2008943a 	slli	r4,r4,16
 800d0cc:	b5bfffcc 	andi	r22,r22,65535
 800d0d0:	288b883a 	add	r5,r5,r2
 800d0d4:	25ad883a 	add	r22,r4,r22
 800d0d8:	a140632e 	bgeu	r20,r5,800d268 <__divdf3+0x7bc>
 800d0dc:	a5e9883a 	add	r20,r20,r23
 800d0e0:	90bfffc4 	addi	r2,r18,-1
 800d0e4:	a5c0702e 	bgeu	r20,r23,800d2a8 <__divdf3+0x7fc>
 800d0e8:	1025883a 	mov	r18,r2
 800d0ec:	a1406126 	beq	r20,r5,800d274 <__divdf3+0x7c8>
 800d0f0:	94800054 	ori	r18,r18,1
 800d0f4:	d8c00117 	ldw	r3,4(sp)
 800d0f8:	1880ffc4 	addi	r2,r3,1023
 800d0fc:	0080720e 	bge	zero,r2,800d2c8 <__divdf3+0x81c>
 800d100:	90c001cc 	andi	r3,r18,7
 800d104:	18000726 	beq	r3,zero,800d124 <__divdf3+0x678>
 800d108:	910003cc 	andi	r4,r18,15
 800d10c:	00c00104 	movi	r3,4
 800d110:	20c00426 	beq	r4,r3,800d124 <__divdf3+0x678>
 800d114:	90c7883a 	add	r3,r18,r3
 800d118:	1ca5803a 	cmpltu	r18,r3,r18
 800d11c:	8ca3883a 	add	r17,r17,r18
 800d120:	1825883a 	mov	r18,r3
 800d124:	88c0402c 	andhi	r3,r17,256
 800d128:	18000526 	beq	r3,zero,800d140 <__divdf3+0x694>
 800d12c:	d8c00117 	ldw	r3,4(sp)
 800d130:	00bfc034 	movhi	r2,65280
 800d134:	10bfffc4 	addi	r2,r2,-1
 800d138:	88a2703a 	and	r17,r17,r2
 800d13c:	18810004 	addi	r2,r3,1024
 800d140:	00c1ff84 	movi	r3,2046
 800d144:	18bebe16 	blt	r3,r2,800cc40 <__alt_data_end+0xf800cc40>
 800d148:	8820977a 	slli	r16,r17,29
 800d14c:	9024d0fa 	srli	r18,r18,3
 800d150:	8822927a 	slli	r17,r17,9
 800d154:	1081ffcc 	andi	r2,r2,2047
 800d158:	84a0b03a 	or	r16,r16,r18
 800d15c:	8826d33a 	srli	r19,r17,12
 800d160:	aa00004c 	andi	r8,r21,1
 800d164:	003eba06 	br	800cc50 <__alt_data_end+0xf800cc50>
 800d168:	9880022c 	andhi	r2,r19,8
 800d16c:	10000a26 	beq	r2,zero,800d198 <__divdf3+0x6ec>
 800d170:	8880022c 	andhi	r2,r17,8
 800d174:	1000081e 	bne	r2,zero,800d198 <__divdf3+0x6ec>
 800d178:	00800434 	movhi	r2,16
 800d17c:	10bfffc4 	addi	r2,r2,-1
 800d180:	8cc00234 	orhi	r19,r17,8
 800d184:	98a6703a 	and	r19,r19,r2
 800d188:	b811883a 	mov	r8,r23
 800d18c:	9021883a 	mov	r16,r18
 800d190:	0081ffc4 	movi	r2,2047
 800d194:	003eae06 	br	800cc50 <__alt_data_end+0xf800cc50>
 800d198:	00800434 	movhi	r2,16
 800d19c:	10bfffc4 	addi	r2,r2,-1
 800d1a0:	9cc00234 	orhi	r19,r19,8
 800d1a4:	98a6703a 	and	r19,r19,r2
 800d1a8:	b011883a 	mov	r8,r22
 800d1ac:	0081ffc4 	movi	r2,2047
 800d1b0:	003ea706 	br	800cc50 <__alt_data_end+0xf800cc50>
 800d1b4:	147ff604 	addi	r17,r2,-40
 800d1b8:	3462983a 	sll	r17,r6,r17
 800d1bc:	0025883a 	mov	r18,zero
 800d1c0:	003ee906 	br	800cd68 <__alt_data_end+0xf800cd68>
 800d1c4:	3009883a 	mov	r4,r6
 800d1c8:	d9800215 	stw	r6,8(sp)
 800d1cc:	da400315 	stw	r9,12(sp)
 800d1d0:	da800415 	stw	r10,16(sp)
 800d1d4:	800e9080 	call	800e908 <__clzsi2>
 800d1d8:	10800804 	addi	r2,r2,32
 800d1dc:	da800417 	ldw	r10,16(sp)
 800d1e0:	da400317 	ldw	r9,12(sp)
 800d1e4:	d9800217 	ldw	r6,8(sp)
 800d1e8:	003ed606 	br	800cd44 <__alt_data_end+0xf800cd44>
 800d1ec:	14fff604 	addi	r19,r2,-40
 800d1f0:	94e6983a 	sll	r19,r18,r19
 800d1f4:	0021883a 	mov	r16,zero
 800d1f8:	003ebc06 	br	800ccec <__alt_data_end+0xf800ccec>
 800d1fc:	d9800215 	stw	r6,8(sp)
 800d200:	d9c00515 	stw	r7,20(sp)
 800d204:	800e9080 	call	800e908 <__clzsi2>
 800d208:	10800804 	addi	r2,r2,32
 800d20c:	d9c00517 	ldw	r7,20(sp)
 800d210:	d9800217 	ldw	r6,8(sp)
 800d214:	003eac06 	br	800ccc8 <__alt_data_end+0xf800ccc8>
 800d218:	b400292e 	bgeu	r22,r16,800d2c0 <__divdf3+0x814>
 800d21c:	d8c00017 	ldw	r3,0(sp)
 800d220:	b0ed883a 	add	r22,r22,r3
 800d224:	b0c5803a 	cmpltu	r2,r22,r3
 800d228:	15c5883a 	add	r2,r2,r23
 800d22c:	11cf883a 	add	r7,r2,r7
 800d230:	88bfffc4 	addi	r2,r17,-1
 800d234:	b9c0122e 	bgeu	r23,r7,800d280 <__divdf3+0x7d4>
 800d238:	39405036 	bltu	r7,r5,800d37c <__divdf3+0x8d0>
 800d23c:	29c01e26 	beq	r5,r7,800d2b8 <__divdf3+0x80c>
 800d240:	394bc83a 	sub	r5,r7,r5
 800d244:	1023883a 	mov	r17,r2
 800d248:	003f4b06 	br	800cf78 <__alt_data_end+0xf800cf78>
 800d24c:	943ee62e 	bgeu	r18,r16,800cde8 <__alt_data_end+0xf800cde8>
 800d250:	980497fa 	slli	r2,r19,31
 800d254:	8006d07a 	srli	r3,r16,1
 800d258:	802c97fa 	slli	r22,r16,31
 800d25c:	9826d07a 	srli	r19,r19,1
 800d260:	18a0b03a 	or	r16,r3,r2
 800d264:	003ee406 	br	800cdf8 <__alt_data_end+0xf800cdf8>
 800d268:	a17fa11e 	bne	r20,r5,800d0f0 <__alt_data_end+0xf800d0f0>
 800d26c:	b03f9b1e 	bne	r22,zero,800d0dc <__alt_data_end+0xf800d0dc>
 800d270:	d8000015 	stw	zero,0(sp)
 800d274:	d8c00017 	ldw	r3,0(sp)
 800d278:	1dbf9d1e 	bne	r3,r22,800d0f0 <__alt_data_end+0xf800d0f0>
 800d27c:	003f9d06 	br	800d0f4 <__alt_data_end+0xf800d0f4>
 800d280:	3dffef1e 	bne	r7,r23,800d240 <__alt_data_end+0xf800d240>
 800d284:	d8c00017 	ldw	r3,0(sp)
 800d288:	b0ffeb2e 	bgeu	r22,r3,800d238 <__alt_data_end+0xf800d238>
 800d28c:	b94bc83a 	sub	r5,r23,r5
 800d290:	1023883a 	mov	r17,r2
 800d294:	003f3806 	br	800cf78 <__alt_data_end+0xf800cf78>
 800d298:	1023883a 	mov	r17,r2
 800d29c:	003f0906 	br	800cec4 <__alt_data_end+0xf800cec4>
 800d2a0:	1039883a 	mov	fp,r2
 800d2a4:	003ef006 	br	800ce68 <__alt_data_end+0xf800ce68>
 800d2a8:	a1403b36 	bltu	r20,r5,800d398 <__divdf3+0x8ec>
 800d2ac:	2d005826 	beq	r5,r20,800d410 <__divdf3+0x964>
 800d2b0:	1025883a 	mov	r18,r2
 800d2b4:	003f8e06 	br	800d0f0 <__alt_data_end+0xf800d0f0>
 800d2b8:	b4003036 	bltu	r22,r16,800d37c <__divdf3+0x8d0>
 800d2bc:	1023883a 	mov	r17,r2
 800d2c0:	000b883a 	mov	r5,zero
 800d2c4:	003f2c06 	br	800cf78 <__alt_data_end+0xf800cf78>
 800d2c8:	d8c00117 	ldw	r3,4(sp)
 800d2cc:	00bf0084 	movi	r2,-1022
 800d2d0:	10c5c83a 	sub	r2,r2,r3
 800d2d4:	00c00e04 	movi	r3,56
 800d2d8:	18800d0e 	bge	r3,r2,800d310 <__divdf3+0x864>
 800d2dc:	aa00004c 	andi	r8,r21,1
 800d2e0:	0005883a 	mov	r2,zero
 800d2e4:	0027883a 	mov	r19,zero
 800d2e8:	0021883a 	mov	r16,zero
 800d2ec:	003e5806 	br	800cc50 <__alt_data_end+0xf800cc50>
 800d2f0:	04bfffc4 	movi	r18,-1
 800d2f4:	003f7f06 	br	800d0f4 <__alt_data_end+0xf800d0f4>
 800d2f8:	102d883a 	mov	r22,r2
 800d2fc:	003f5306 	br	800d04c <__alt_data_end+0xf800d04c>
 800d300:	1011883a 	mov	r8,r2
 800d304:	003f3706 	br	800cfe4 <__alt_data_end+0xf800cfe4>
 800d308:	502b883a 	mov	r21,r10
 800d30c:	003f7906 	br	800d0f4 <__alt_data_end+0xf800d0f4>
 800d310:	00c007c4 	movi	r3,31
 800d314:	18802816 	blt	r3,r2,800d3b8 <__divdf3+0x90c>
 800d318:	d9000117 	ldw	r4,4(sp)
 800d31c:	908ad83a 	srl	r5,r18,r2
 800d320:	8884d83a 	srl	r2,r17,r2
 800d324:	20c10784 	addi	r3,r4,1054
 800d328:	88c8983a 	sll	r4,r17,r3
 800d32c:	90c6983a 	sll	r3,r18,r3
 800d330:	2908b03a 	or	r4,r5,r4
 800d334:	1806c03a 	cmpne	r3,r3,zero
 800d338:	20c6b03a 	or	r3,r4,r3
 800d33c:	190001cc 	andi	r4,r3,7
 800d340:	20000726 	beq	r4,zero,800d360 <__divdf3+0x8b4>
 800d344:	194003cc 	andi	r5,r3,15
 800d348:	01000104 	movi	r4,4
 800d34c:	29000426 	beq	r5,r4,800d360 <__divdf3+0x8b4>
 800d350:	1909883a 	add	r4,r3,r4
 800d354:	20c7803a 	cmpltu	r3,r4,r3
 800d358:	10c5883a 	add	r2,r2,r3
 800d35c:	2007883a 	mov	r3,r4
 800d360:	1100202c 	andhi	r4,r2,128
 800d364:	20002226 	beq	r4,zero,800d3f0 <__divdf3+0x944>
 800d368:	aa00004c 	andi	r8,r21,1
 800d36c:	00800044 	movi	r2,1
 800d370:	0027883a 	mov	r19,zero
 800d374:	0021883a 	mov	r16,zero
 800d378:	003e3506 	br	800cc50 <__alt_data_end+0xf800cc50>
 800d37c:	d8c00017 	ldw	r3,0(sp)
 800d380:	8c7fff84 	addi	r17,r17,-2
 800d384:	b0ed883a 	add	r22,r22,r3
 800d388:	b0c5803a 	cmpltu	r2,r22,r3
 800d38c:	15c5883a 	add	r2,r2,r23
 800d390:	11cf883a 	add	r7,r2,r7
 800d394:	003ef706 	br	800cf74 <__alt_data_end+0xf800cf74>
 800d398:	d8c00017 	ldw	r3,0(sp)
 800d39c:	18c9883a 	add	r4,r3,r3
 800d3a0:	20c5803a 	cmpltu	r2,r4,r3
 800d3a4:	15c7883a 	add	r3,r2,r23
 800d3a8:	a0e9883a 	add	r20,r20,r3
 800d3ac:	90bfff84 	addi	r2,r18,-2
 800d3b0:	d9000015 	stw	r4,0(sp)
 800d3b4:	003f4c06 	br	800d0e8 <__alt_data_end+0xf800d0e8>
 800d3b8:	d9000117 	ldw	r4,4(sp)
 800d3bc:	00fef884 	movi	r3,-1054
 800d3c0:	1907c83a 	sub	r3,r3,r4
 800d3c4:	01000804 	movi	r4,32
 800d3c8:	88c6d83a 	srl	r3,r17,r3
 800d3cc:	11001426 	beq	r2,r4,800d420 <__divdf3+0x974>
 800d3d0:	d9000117 	ldw	r4,4(sp)
 800d3d4:	20810f84 	addi	r2,r4,1086
 800d3d8:	8884983a 	sll	r2,r17,r2
 800d3dc:	1484b03a 	or	r2,r2,r18
 800d3e0:	1004c03a 	cmpne	r2,r2,zero
 800d3e4:	10c6b03a 	or	r3,r2,r3
 800d3e8:	0005883a 	mov	r2,zero
 800d3ec:	003fd306 	br	800d33c <__alt_data_end+0xf800d33c>
 800d3f0:	1020977a 	slli	r16,r2,29
 800d3f4:	1806d0fa 	srli	r3,r3,3
 800d3f8:	1004927a 	slli	r2,r2,9
 800d3fc:	aa00004c 	andi	r8,r21,1
 800d400:	80e0b03a 	or	r16,r16,r3
 800d404:	1026d33a 	srli	r19,r2,12
 800d408:	0005883a 	mov	r2,zero
 800d40c:	003e1006 	br	800cc50 <__alt_data_end+0xf800cc50>
 800d410:	d8c00017 	ldw	r3,0(sp)
 800d414:	1dbfe036 	bltu	r3,r22,800d398 <__alt_data_end+0xf800d398>
 800d418:	1025883a 	mov	r18,r2
 800d41c:	003f9506 	br	800d274 <__alt_data_end+0xf800d274>
 800d420:	0005883a 	mov	r2,zero
 800d424:	003fed06 	br	800d3dc <__alt_data_end+0xf800d3dc>
 800d428:	00800434 	movhi	r2,16
 800d42c:	10bfffc4 	addi	r2,r2,-1
 800d430:	8cc00234 	orhi	r19,r17,8
 800d434:	98a6703a 	and	r19,r19,r2
 800d438:	5011883a 	mov	r8,r10
 800d43c:	9021883a 	mov	r16,r18
 800d440:	0081ffc4 	movi	r2,2047
 800d444:	003e0206 	br	800cc50 <__alt_data_end+0xf800cc50>

0800d448 <__eqdf2>:
 800d448:	2806d53a 	srli	r3,r5,20
 800d44c:	3810d53a 	srli	r8,r7,20
 800d450:	00800434 	movhi	r2,16
 800d454:	10bfffc4 	addi	r2,r2,-1
 800d458:	18c1ffcc 	andi	r3,r3,2047
 800d45c:	0241ffc4 	movi	r9,2047
 800d460:	2894703a 	and	r10,r5,r2
 800d464:	4201ffcc 	andi	r8,r8,2047
 800d468:	3884703a 	and	r2,r7,r2
 800d46c:	280ad7fa 	srli	r5,r5,31
 800d470:	380ed7fa 	srli	r7,r7,31
 800d474:	1a400f26 	beq	r3,r9,800d4b4 <__eqdf2+0x6c>
 800d478:	0241ffc4 	movi	r9,2047
 800d47c:	42400326 	beq	r8,r9,800d48c <__eqdf2+0x44>
 800d480:	1a000526 	beq	r3,r8,800d498 <__eqdf2+0x50>
 800d484:	00800044 	movi	r2,1
 800d488:	f800283a 	ret
 800d48c:	1192b03a 	or	r9,r2,r6
 800d490:	483ffc1e 	bne	r9,zero,800d484 <__alt_data_end+0xf800d484>
 800d494:	1a3ffb1e 	bne	r3,r8,800d484 <__alt_data_end+0xf800d484>
 800d498:	50bffa1e 	bne	r10,r2,800d484 <__alt_data_end+0xf800d484>
 800d49c:	21bff91e 	bne	r4,r6,800d484 <__alt_data_end+0xf800d484>
 800d4a0:	29c00826 	beq	r5,r7,800d4c4 <__eqdf2+0x7c>
 800d4a4:	183ff71e 	bne	r3,zero,800d484 <__alt_data_end+0xf800d484>
 800d4a8:	5104b03a 	or	r2,r10,r4
 800d4ac:	1004c03a 	cmpne	r2,r2,zero
 800d4b0:	f800283a 	ret
 800d4b4:	5112b03a 	or	r9,r10,r4
 800d4b8:	483fef26 	beq	r9,zero,800d478 <__alt_data_end+0xf800d478>
 800d4bc:	00800044 	movi	r2,1
 800d4c0:	f800283a 	ret
 800d4c4:	0005883a 	mov	r2,zero
 800d4c8:	f800283a 	ret

0800d4cc <__gedf2>:
 800d4cc:	2804d53a 	srli	r2,r5,20
 800d4d0:	3810d53a 	srli	r8,r7,20
 800d4d4:	00c00434 	movhi	r3,16
 800d4d8:	18ffffc4 	addi	r3,r3,-1
 800d4dc:	1081ffcc 	andi	r2,r2,2047
 800d4e0:	0241ffc4 	movi	r9,2047
 800d4e4:	28d4703a 	and	r10,r5,r3
 800d4e8:	4201ffcc 	andi	r8,r8,2047
 800d4ec:	38c6703a 	and	r3,r7,r3
 800d4f0:	280ad7fa 	srli	r5,r5,31
 800d4f4:	380ed7fa 	srli	r7,r7,31
 800d4f8:	12401b26 	beq	r2,r9,800d568 <__gedf2+0x9c>
 800d4fc:	0241ffc4 	movi	r9,2047
 800d500:	42400926 	beq	r8,r9,800d528 <__gedf2+0x5c>
 800d504:	10000c1e 	bne	r2,zero,800d538 <__gedf2+0x6c>
 800d508:	5112b03a 	or	r9,r10,r4
 800d50c:	4813003a 	cmpeq	r9,r9,zero
 800d510:	4817883a 	mov	r11,r9
 800d514:	40000a26 	beq	r8,zero,800d540 <__gedf2+0x74>
 800d518:	48001626 	beq	r9,zero,800d574 <__gedf2+0xa8>
 800d51c:	38000d1e 	bne	r7,zero,800d554 <__gedf2+0x88>
 800d520:	00bfffc4 	movi	r2,-1
 800d524:	f800283a 	ret
 800d528:	1992b03a 	or	r9,r3,r6
 800d52c:	483ff526 	beq	r9,zero,800d504 <__alt_data_end+0xf800d504>
 800d530:	00bfff84 	movi	r2,-2
 800d534:	f800283a 	ret
 800d538:	40000e1e 	bne	r8,zero,800d574 <__gedf2+0xa8>
 800d53c:	0017883a 	mov	r11,zero
 800d540:	1992b03a 	or	r9,r3,r6
 800d544:	4813003a 	cmpeq	r9,r9,zero
 800d548:	5800041e 	bne	r11,zero,800d55c <__gedf2+0x90>
 800d54c:	48000926 	beq	r9,zero,800d574 <__gedf2+0xa8>
 800d550:	283ff31e 	bne	r5,zero,800d520 <__alt_data_end+0xf800d520>
 800d554:	00800044 	movi	r2,1
 800d558:	f800283a 	ret
 800d55c:	483fef26 	beq	r9,zero,800d51c <__alt_data_end+0xf800d51c>
 800d560:	0005883a 	mov	r2,zero
 800d564:	f800283a 	ret
 800d568:	5112b03a 	or	r9,r10,r4
 800d56c:	483fe326 	beq	r9,zero,800d4fc <__alt_data_end+0xf800d4fc>
 800d570:	003fef06 	br	800d530 <__alt_data_end+0xf800d530>
 800d574:	29fff61e 	bne	r5,r7,800d550 <__alt_data_end+0xf800d550>
 800d578:	40bff516 	blt	r8,r2,800d550 <__alt_data_end+0xf800d550>
 800d57c:	12000316 	blt	r2,r8,800d58c <__gedf2+0xc0>
 800d580:	1abff336 	bltu	r3,r10,800d550 <__alt_data_end+0xf800d550>
 800d584:	50c00326 	beq	r10,r3,800d594 <__gedf2+0xc8>
 800d588:	50fff52e 	bgeu	r10,r3,800d560 <__alt_data_end+0xf800d560>
 800d58c:	283fe426 	beq	r5,zero,800d520 <__alt_data_end+0xf800d520>
 800d590:	003ff006 	br	800d554 <__alt_data_end+0xf800d554>
 800d594:	313fee36 	bltu	r6,r4,800d550 <__alt_data_end+0xf800d550>
 800d598:	21bff12e 	bgeu	r4,r6,800d560 <__alt_data_end+0xf800d560>
 800d59c:	283fe026 	beq	r5,zero,800d520 <__alt_data_end+0xf800d520>
 800d5a0:	003fec06 	br	800d554 <__alt_data_end+0xf800d554>

0800d5a4 <__ledf2>:
 800d5a4:	2806d53a 	srli	r3,r5,20
 800d5a8:	3810d53a 	srli	r8,r7,20
 800d5ac:	00800434 	movhi	r2,16
 800d5b0:	10bfffc4 	addi	r2,r2,-1
 800d5b4:	18c1ffcc 	andi	r3,r3,2047
 800d5b8:	0241ffc4 	movi	r9,2047
 800d5bc:	2894703a 	and	r10,r5,r2
 800d5c0:	4201ffcc 	andi	r8,r8,2047
 800d5c4:	3884703a 	and	r2,r7,r2
 800d5c8:	280ad7fa 	srli	r5,r5,31
 800d5cc:	380ed7fa 	srli	r7,r7,31
 800d5d0:	1a402026 	beq	r3,r9,800d654 <__ledf2+0xb0>
 800d5d4:	0241ffc4 	movi	r9,2047
 800d5d8:	42401726 	beq	r8,r9,800d638 <__ledf2+0x94>
 800d5dc:	18000b26 	beq	r3,zero,800d60c <__ledf2+0x68>
 800d5e0:	29403fcc 	andi	r5,r5,255
 800d5e4:	39c03fcc 	andi	r7,r7,255
 800d5e8:	40000f1e 	bne	r8,zero,800d628 <__ledf2+0x84>
 800d5ec:	0017883a 	mov	r11,zero
 800d5f0:	1192b03a 	or	r9,r2,r6
 800d5f4:	4813003a 	cmpeq	r9,r9,zero
 800d5f8:	58001326 	beq	r11,zero,800d648 <__ledf2+0xa4>
 800d5fc:	48001e1e 	bne	r9,zero,800d678 <__ledf2+0xd4>
 800d600:	38000b1e 	bne	r7,zero,800d630 <__ledf2+0x8c>
 800d604:	00bfffc4 	movi	r2,-1
 800d608:	f800283a 	ret
 800d60c:	5112b03a 	or	r9,r10,r4
 800d610:	4813003a 	cmpeq	r9,r9,zero
 800d614:	4817883a 	mov	r11,r9
 800d618:	29403fcc 	andi	r5,r5,255
 800d61c:	39c03fcc 	andi	r7,r7,255
 800d620:	403ff326 	beq	r8,zero,800d5f0 <__alt_data_end+0xf800d5f0>
 800d624:	483ff61e 	bne	r9,zero,800d600 <__alt_data_end+0xf800d600>
 800d628:	29c00e26 	beq	r5,r7,800d664 <__ledf2+0xc0>
 800d62c:	283ff51e 	bne	r5,zero,800d604 <__alt_data_end+0xf800d604>
 800d630:	00800044 	movi	r2,1
 800d634:	f800283a 	ret
 800d638:	1192b03a 	or	r9,r2,r6
 800d63c:	483fe726 	beq	r9,zero,800d5dc <__alt_data_end+0xf800d5dc>
 800d640:	00800084 	movi	r2,2
 800d644:	f800283a 	ret
 800d648:	483ff726 	beq	r9,zero,800d628 <__alt_data_end+0xf800d628>
 800d64c:	283ff826 	beq	r5,zero,800d630 <__alt_data_end+0xf800d630>
 800d650:	003fec06 	br	800d604 <__alt_data_end+0xf800d604>
 800d654:	5112b03a 	or	r9,r10,r4
 800d658:	483fde26 	beq	r9,zero,800d5d4 <__alt_data_end+0xf800d5d4>
 800d65c:	00800084 	movi	r2,2
 800d660:	f800283a 	ret
 800d664:	40fff116 	blt	r8,r3,800d62c <__alt_data_end+0xf800d62c>
 800d668:	1a000716 	blt	r3,r8,800d688 <__ledf2+0xe4>
 800d66c:	12bfef36 	bltu	r2,r10,800d62c <__alt_data_end+0xf800d62c>
 800d670:	50800326 	beq	r10,r2,800d680 <__ledf2+0xdc>
 800d674:	50800436 	bltu	r10,r2,800d688 <__ledf2+0xe4>
 800d678:	0005883a 	mov	r2,zero
 800d67c:	f800283a 	ret
 800d680:	313fea36 	bltu	r6,r4,800d62c <__alt_data_end+0xf800d62c>
 800d684:	21bffc2e 	bgeu	r4,r6,800d678 <__alt_data_end+0xf800d678>
 800d688:	283fde26 	beq	r5,zero,800d604 <__alt_data_end+0xf800d604>
 800d68c:	003fe806 	br	800d630 <__alt_data_end+0xf800d630>

0800d690 <__muldf3>:
 800d690:	deffee04 	addi	sp,sp,-72
 800d694:	dc400915 	stw	r17,36(sp)
 800d698:	2822d53a 	srli	r17,r5,20
 800d69c:	dc000815 	stw	r16,32(sp)
 800d6a0:	2820d7fa 	srli	r16,r5,31
 800d6a4:	df001015 	stw	fp,64(sp)
 800d6a8:	dd000c15 	stw	r20,48(sp)
 800d6ac:	dcc00b15 	stw	r19,44(sp)
 800d6b0:	dfc01115 	stw	ra,68(sp)
 800d6b4:	04c00434 	movhi	r19,16
 800d6b8:	9cffffc4 	addi	r19,r19,-1
 800d6bc:	ddc00f15 	stw	r23,60(sp)
 800d6c0:	dd800e15 	stw	r22,56(sp)
 800d6c4:	dd400d15 	stw	r21,52(sp)
 800d6c8:	dc800a15 	stw	r18,40(sp)
 800d6cc:	8c41ffcc 	andi	r17,r17,2047
 800d6d0:	2029883a 	mov	r20,r4
 800d6d4:	2ce6703a 	and	r19,r5,r19
 800d6d8:	8039883a 	mov	fp,r16
 800d6dc:	82003fcc 	andi	r8,r16,255
 800d6e0:	88005d26 	beq	r17,zero,800d858 <__muldf3+0x1c8>
 800d6e4:	0081ffc4 	movi	r2,2047
 800d6e8:	202f883a 	mov	r23,r4
 800d6ec:	88803326 	beq	r17,r2,800d7bc <__muldf3+0x12c>
 800d6f0:	98800434 	orhi	r2,r19,16
 800d6f4:	100490fa 	slli	r2,r2,3
 800d6f8:	2026d77a 	srli	r19,r4,29
 800d6fc:	202e90fa 	slli	r23,r4,3
 800d700:	8c7f0044 	addi	r17,r17,-1023
 800d704:	14e6b03a 	or	r19,r2,r19
 800d708:	002d883a 	mov	r22,zero
 800d70c:	000b883a 	mov	r5,zero
 800d710:	3804d53a 	srli	r2,r7,20
 800d714:	3828d7fa 	srli	r20,r7,31
 800d718:	04800434 	movhi	r18,16
 800d71c:	94bfffc4 	addi	r18,r18,-1
 800d720:	1081ffcc 	andi	r2,r2,2047
 800d724:	302b883a 	mov	r21,r6
 800d728:	3ca4703a 	and	r18,r7,r18
 800d72c:	a2403fcc 	andi	r9,r20,255
 800d730:	10006826 	beq	r2,zero,800d8d4 <__muldf3+0x244>
 800d734:	00c1ffc4 	movi	r3,2047
 800d738:	10c06026 	beq	r2,r3,800d8bc <__muldf3+0x22c>
 800d73c:	90c00434 	orhi	r3,r18,16
 800d740:	180690fa 	slli	r3,r3,3
 800d744:	3024d77a 	srli	r18,r6,29
 800d748:	302a90fa 	slli	r21,r6,3
 800d74c:	10bf0044 	addi	r2,r2,-1023
 800d750:	1ca4b03a 	or	r18,r3,r18
 800d754:	0007883a 	mov	r3,zero
 800d758:	1d88b03a 	or	r4,r3,r22
 800d75c:	2109883a 	add	r4,r4,r4
 800d760:	2109883a 	add	r4,r4,r4
 800d764:	01820074 	movhi	r6,2049
 800d768:	31b5df04 	addi	r6,r6,-10372
 800d76c:	2189883a 	add	r4,r4,r6
 800d770:	21000017 	ldw	r4,0(r4)
 800d774:	852cf03a 	xor	r22,r16,r20
 800d778:	2000683a 	jmp	r4
 800d77c:	0800d9c4 	addi	zero,at,871
 800d780:	0800d9b4 	orhi	zero,at,870
 800d784:	0800d9b4 	orhi	zero,at,870
 800d788:	0800d9a0 	cmpeqi	zero,at,870
 800d78c:	0800d7dc 	xori	zero,at,863
 800d790:	0800d7dc 	xori	zero,at,863
 800d794:	0800d988 	cmpgei	zero,at,870
 800d798:	0800d9a0 	cmpeqi	zero,at,870
 800d79c:	0800d7dc 	xori	zero,at,863
 800d7a0:	0800d988 	cmpgei	zero,at,870
 800d7a4:	0800d7dc 	xori	zero,at,863
 800d7a8:	0800d9a0 	cmpeqi	zero,at,870
 800d7ac:	0800d7d8 	cmpnei	zero,at,863
 800d7b0:	0800d7d8 	cmpnei	zero,at,863
 800d7b4:	0800d7d8 	cmpnei	zero,at,863
 800d7b8:	0800dcdc 	xori	zero,at,883
 800d7bc:	9904b03a 	or	r2,r19,r4
 800d7c0:	10006e1e 	bne	r2,zero,800d97c <__muldf3+0x2ec>
 800d7c4:	05800204 	movi	r22,8
 800d7c8:	0027883a 	mov	r19,zero
 800d7cc:	002f883a 	mov	r23,zero
 800d7d0:	01400084 	movi	r5,2
 800d7d4:	003fce06 	br	800d710 <__alt_data_end+0xf800d710>
 800d7d8:	402d883a 	mov	r22,r8
 800d7dc:	00800084 	movi	r2,2
 800d7e0:	28805626 	beq	r5,r2,800d93c <__muldf3+0x2ac>
 800d7e4:	008000c4 	movi	r2,3
 800d7e8:	2881a226 	beq	r5,r2,800de74 <__muldf3+0x7e4>
 800d7ec:	00800044 	movi	r2,1
 800d7f0:	28811d1e 	bne	r5,r2,800dc68 <__muldf3+0x5d8>
 800d7f4:	b039883a 	mov	fp,r22
 800d7f8:	0005883a 	mov	r2,zero
 800d7fc:	0027883a 	mov	r19,zero
 800d800:	002f883a 	mov	r23,zero
 800d804:	1004953a 	slli	r2,r2,20
 800d808:	e7003fcc 	andi	fp,fp,255
 800d80c:	e03897fa 	slli	fp,fp,31
 800d810:	00c00434 	movhi	r3,16
 800d814:	18ffffc4 	addi	r3,r3,-1
 800d818:	98e6703a 	and	r19,r19,r3
 800d81c:	9886b03a 	or	r3,r19,r2
 800d820:	1f06b03a 	or	r3,r3,fp
 800d824:	b805883a 	mov	r2,r23
 800d828:	dfc01117 	ldw	ra,68(sp)
 800d82c:	df001017 	ldw	fp,64(sp)
 800d830:	ddc00f17 	ldw	r23,60(sp)
 800d834:	dd800e17 	ldw	r22,56(sp)
 800d838:	dd400d17 	ldw	r21,52(sp)
 800d83c:	dd000c17 	ldw	r20,48(sp)
 800d840:	dcc00b17 	ldw	r19,44(sp)
 800d844:	dc800a17 	ldw	r18,40(sp)
 800d848:	dc400917 	ldw	r17,36(sp)
 800d84c:	dc000817 	ldw	r16,32(sp)
 800d850:	dec01204 	addi	sp,sp,72
 800d854:	f800283a 	ret
 800d858:	9904b03a 	or	r2,r19,r4
 800d85c:	10004226 	beq	r2,zero,800d968 <__muldf3+0x2d8>
 800d860:	98013426 	beq	r19,zero,800dd34 <__muldf3+0x6a4>
 800d864:	9809883a 	mov	r4,r19
 800d868:	d9800515 	stw	r6,20(sp)
 800d86c:	d9c00415 	stw	r7,16(sp)
 800d870:	da000615 	stw	r8,24(sp)
 800d874:	800e9080 	call	800e908 <__clzsi2>
 800d878:	d9800517 	ldw	r6,20(sp)
 800d87c:	d9c00417 	ldw	r7,16(sp)
 800d880:	da000617 	ldw	r8,24(sp)
 800d884:	00c009c4 	movi	r3,39
 800d888:	18812616 	blt	r3,r2,800dd24 <__muldf3+0x694>
 800d88c:	00c00a04 	movi	r3,40
 800d890:	15fffe04 	addi	r23,r2,-8
 800d894:	1887c83a 	sub	r3,r3,r2
 800d898:	9de6983a 	sll	r19,r19,r23
 800d89c:	a0c6d83a 	srl	r3,r20,r3
 800d8a0:	a5ee983a 	sll	r23,r20,r23
 800d8a4:	1ce6b03a 	or	r19,r3,r19
 800d8a8:	047f0344 	movi	r17,-1011
 800d8ac:	88a3c83a 	sub	r17,r17,r2
 800d8b0:	002d883a 	mov	r22,zero
 800d8b4:	000b883a 	mov	r5,zero
 800d8b8:	003f9506 	br	800d710 <__alt_data_end+0xf800d710>
 800d8bc:	9186b03a 	or	r3,r18,r6
 800d8c0:	1800271e 	bne	r3,zero,800d960 <__muldf3+0x2d0>
 800d8c4:	0025883a 	mov	r18,zero
 800d8c8:	002b883a 	mov	r21,zero
 800d8cc:	00c00084 	movi	r3,2
 800d8d0:	003fa106 	br	800d758 <__alt_data_end+0xf800d758>
 800d8d4:	9186b03a 	or	r3,r18,r6
 800d8d8:	18001d26 	beq	r3,zero,800d950 <__muldf3+0x2c0>
 800d8dc:	90012226 	beq	r18,zero,800dd68 <__muldf3+0x6d8>
 800d8e0:	9009883a 	mov	r4,r18
 800d8e4:	d9400415 	stw	r5,16(sp)
 800d8e8:	d9800515 	stw	r6,20(sp)
 800d8ec:	da000615 	stw	r8,24(sp)
 800d8f0:	da400715 	stw	r9,28(sp)
 800d8f4:	800e9080 	call	800e908 <__clzsi2>
 800d8f8:	d9400417 	ldw	r5,16(sp)
 800d8fc:	d9800517 	ldw	r6,20(sp)
 800d900:	da000617 	ldw	r8,24(sp)
 800d904:	da400717 	ldw	r9,28(sp)
 800d908:	00c009c4 	movi	r3,39
 800d90c:	18811216 	blt	r3,r2,800dd58 <__muldf3+0x6c8>
 800d910:	01c00a04 	movi	r7,40
 800d914:	157ffe04 	addi	r21,r2,-8
 800d918:	388fc83a 	sub	r7,r7,r2
 800d91c:	9564983a 	sll	r18,r18,r21
 800d920:	31ced83a 	srl	r7,r6,r7
 800d924:	356a983a 	sll	r21,r6,r21
 800d928:	3ca4b03a 	or	r18,r7,r18
 800d92c:	00ff0344 	movi	r3,-1011
 800d930:	1885c83a 	sub	r2,r3,r2
 800d934:	0007883a 	mov	r3,zero
 800d938:	003f8706 	br	800d758 <__alt_data_end+0xf800d758>
 800d93c:	b039883a 	mov	fp,r22
 800d940:	0081ffc4 	movi	r2,2047
 800d944:	0027883a 	mov	r19,zero
 800d948:	002f883a 	mov	r23,zero
 800d94c:	003fad06 	br	800d804 <__alt_data_end+0xf800d804>
 800d950:	0025883a 	mov	r18,zero
 800d954:	002b883a 	mov	r21,zero
 800d958:	00c00044 	movi	r3,1
 800d95c:	003f7e06 	br	800d758 <__alt_data_end+0xf800d758>
 800d960:	00c000c4 	movi	r3,3
 800d964:	003f7c06 	br	800d758 <__alt_data_end+0xf800d758>
 800d968:	05800104 	movi	r22,4
 800d96c:	0027883a 	mov	r19,zero
 800d970:	002f883a 	mov	r23,zero
 800d974:	01400044 	movi	r5,1
 800d978:	003f6506 	br	800d710 <__alt_data_end+0xf800d710>
 800d97c:	05800304 	movi	r22,12
 800d980:	014000c4 	movi	r5,3
 800d984:	003f6206 	br	800d710 <__alt_data_end+0xf800d710>
 800d988:	0039883a 	mov	fp,zero
 800d98c:	04c00434 	movhi	r19,16
 800d990:	9cffffc4 	addi	r19,r19,-1
 800d994:	05ffffc4 	movi	r23,-1
 800d998:	0081ffc4 	movi	r2,2047
 800d99c:	003f9906 	br	800d804 <__alt_data_end+0xf800d804>
 800d9a0:	9027883a 	mov	r19,r18
 800d9a4:	a82f883a 	mov	r23,r21
 800d9a8:	482d883a 	mov	r22,r9
 800d9ac:	180b883a 	mov	r5,r3
 800d9b0:	003f8a06 	br	800d7dc <__alt_data_end+0xf800d7dc>
 800d9b4:	9027883a 	mov	r19,r18
 800d9b8:	a82f883a 	mov	r23,r21
 800d9bc:	180b883a 	mov	r5,r3
 800d9c0:	003f8606 	br	800d7dc <__alt_data_end+0xf800d7dc>
 800d9c4:	a828d43a 	srli	r20,r21,16
 800d9c8:	b820d43a 	srli	r16,r23,16
 800d9cc:	ad7fffcc 	andi	r21,r21,65535
 800d9d0:	bdffffcc 	andi	r23,r23,65535
 800d9d4:	8885883a 	add	r2,r17,r2
 800d9d8:	a809883a 	mov	r4,r21
 800d9dc:	b80b883a 	mov	r5,r23
 800d9e0:	d8800015 	stw	r2,0(sp)
 800d9e4:	800c2080 	call	800c208 <__mulsi3>
 800d9e8:	a009883a 	mov	r4,r20
 800d9ec:	b80b883a 	mov	r5,r23
 800d9f0:	d8800415 	stw	r2,16(sp)
 800d9f4:	800c2080 	call	800c208 <__mulsi3>
 800d9f8:	a809883a 	mov	r4,r21
 800d9fc:	800b883a 	mov	r5,r16
 800da00:	d8800615 	stw	r2,24(sp)
 800da04:	800c2080 	call	800c208 <__mulsi3>
 800da08:	a009883a 	mov	r4,r20
 800da0c:	800b883a 	mov	r5,r16
 800da10:	1023883a 	mov	r17,r2
 800da14:	800c2080 	call	800c208 <__mulsi3>
 800da18:	d9c00417 	ldw	r7,16(sp)
 800da1c:	da000617 	ldw	r8,24(sp)
 800da20:	1039883a 	mov	fp,r2
 800da24:	3804d43a 	srli	r2,r7,16
 800da28:	8a07883a 	add	r3,r17,r8
 800da2c:	1887883a 	add	r3,r3,r2
 800da30:	1c40022e 	bgeu	r3,r17,800da3c <__muldf3+0x3ac>
 800da34:	00800074 	movhi	r2,1
 800da38:	e0b9883a 	add	fp,fp,r2
 800da3c:	1804943a 	slli	r2,r3,16
 800da40:	1806d43a 	srli	r3,r3,16
 800da44:	9022d43a 	srli	r17,r18,16
 800da48:	39ffffcc 	andi	r7,r7,65535
 800da4c:	94bfffcc 	andi	r18,r18,65535
 800da50:	11cf883a 	add	r7,r2,r7
 800da54:	b80b883a 	mov	r5,r23
 800da58:	9009883a 	mov	r4,r18
 800da5c:	d8c00215 	stw	r3,8(sp)
 800da60:	d9c00315 	stw	r7,12(sp)
 800da64:	800c2080 	call	800c208 <__mulsi3>
 800da68:	b80b883a 	mov	r5,r23
 800da6c:	8809883a 	mov	r4,r17
 800da70:	d8800415 	stw	r2,16(sp)
 800da74:	800c2080 	call	800c208 <__mulsi3>
 800da78:	9009883a 	mov	r4,r18
 800da7c:	800b883a 	mov	r5,r16
 800da80:	d8800715 	stw	r2,28(sp)
 800da84:	800c2080 	call	800c208 <__mulsi3>
 800da88:	8809883a 	mov	r4,r17
 800da8c:	800b883a 	mov	r5,r16
 800da90:	102f883a 	mov	r23,r2
 800da94:	800c2080 	call	800c208 <__mulsi3>
 800da98:	d9c00417 	ldw	r7,16(sp)
 800da9c:	da400717 	ldw	r9,28(sp)
 800daa0:	1011883a 	mov	r8,r2
 800daa4:	3804d43a 	srli	r2,r7,16
 800daa8:	ba47883a 	add	r3,r23,r9
 800daac:	1887883a 	add	r3,r3,r2
 800dab0:	1dc0022e 	bgeu	r3,r23,800dabc <__muldf3+0x42c>
 800dab4:	00800074 	movhi	r2,1
 800dab8:	4091883a 	add	r8,r8,r2
 800dabc:	1804d43a 	srli	r2,r3,16
 800dac0:	182e943a 	slli	r23,r3,16
 800dac4:	9820d43a 	srli	r16,r19,16
 800dac8:	9cffffcc 	andi	r19,r19,65535
 800dacc:	39ffffcc 	andi	r7,r7,65535
 800dad0:	4085883a 	add	r2,r8,r2
 800dad4:	a809883a 	mov	r4,r21
 800dad8:	980b883a 	mov	r5,r19
 800dadc:	b9ef883a 	add	r23,r23,r7
 800dae0:	d8800115 	stw	r2,4(sp)
 800dae4:	800c2080 	call	800c208 <__mulsi3>
 800dae8:	a009883a 	mov	r4,r20
 800daec:	980b883a 	mov	r5,r19
 800daf0:	d8800415 	stw	r2,16(sp)
 800daf4:	800c2080 	call	800c208 <__mulsi3>
 800daf8:	a809883a 	mov	r4,r21
 800dafc:	800b883a 	mov	r5,r16
 800db00:	d8800715 	stw	r2,28(sp)
 800db04:	800c2080 	call	800c208 <__mulsi3>
 800db08:	a009883a 	mov	r4,r20
 800db0c:	800b883a 	mov	r5,r16
 800db10:	102b883a 	mov	r21,r2
 800db14:	800c2080 	call	800c208 <__mulsi3>
 800db18:	d9c00417 	ldw	r7,16(sp)
 800db1c:	da400717 	ldw	r9,28(sp)
 800db20:	1011883a 	mov	r8,r2
 800db24:	3804d43a 	srli	r2,r7,16
 800db28:	aa47883a 	add	r3,r21,r9
 800db2c:	1887883a 	add	r3,r3,r2
 800db30:	1d40022e 	bgeu	r3,r21,800db3c <__muldf3+0x4ac>
 800db34:	00800074 	movhi	r2,1
 800db38:	4091883a 	add	r8,r8,r2
 800db3c:	1828d43a 	srli	r20,r3,16
 800db40:	1806943a 	slli	r3,r3,16
 800db44:	39ffffcc 	andi	r7,r7,65535
 800db48:	9009883a 	mov	r4,r18
 800db4c:	980b883a 	mov	r5,r19
 800db50:	19eb883a 	add	r21,r3,r7
 800db54:	4529883a 	add	r20,r8,r20
 800db58:	800c2080 	call	800c208 <__mulsi3>
 800db5c:	980b883a 	mov	r5,r19
 800db60:	8809883a 	mov	r4,r17
 800db64:	d8800415 	stw	r2,16(sp)
 800db68:	800c2080 	call	800c208 <__mulsi3>
 800db6c:	9009883a 	mov	r4,r18
 800db70:	800b883a 	mov	r5,r16
 800db74:	1027883a 	mov	r19,r2
 800db78:	800c2080 	call	800c208 <__mulsi3>
 800db7c:	8809883a 	mov	r4,r17
 800db80:	800b883a 	mov	r5,r16
 800db84:	1025883a 	mov	r18,r2
 800db88:	800c2080 	call	800c208 <__mulsi3>
 800db8c:	d9c00417 	ldw	r7,16(sp)
 800db90:	1011883a 	mov	r8,r2
 800db94:	94c7883a 	add	r3,r18,r19
 800db98:	3804d43a 	srli	r2,r7,16
 800db9c:	1887883a 	add	r3,r3,r2
 800dba0:	1c80022e 	bgeu	r3,r18,800dbac <__muldf3+0x51c>
 800dba4:	00800074 	movhi	r2,1
 800dba8:	4091883a 	add	r8,r8,r2
 800dbac:	1804943a 	slli	r2,r3,16
 800dbb0:	d9400217 	ldw	r5,8(sp)
 800dbb4:	39ffffcc 	andi	r7,r7,65535
 800dbb8:	11cf883a 	add	r7,r2,r7
 800dbbc:	d8800117 	ldw	r2,4(sp)
 800dbc0:	b949883a 	add	r4,r23,r5
 800dbc4:	2739883a 	add	fp,r4,fp
 800dbc8:	e5ef803a 	cmpltu	r23,fp,r23
 800dbcc:	388f883a 	add	r7,r7,r2
 800dbd0:	3dcb883a 	add	r5,r7,r23
 800dbd4:	a149883a 	add	r4,r20,r5
 800dbd8:	2def803a 	cmpltu	r23,r5,r23
 800dbdc:	d9400117 	ldw	r5,4(sp)
 800dbe0:	e579883a 	add	fp,fp,r21
 800dbe4:	e56b803a 	cmpltu	r21,fp,r21
 800dbe8:	1804d43a 	srli	r2,r3,16
 800dbec:	394f803a 	cmpltu	r7,r7,r5
 800dbf0:	2547883a 	add	r3,r4,r21
 800dbf4:	b9e6b03a 	or	r19,r23,r7
 800dbf8:	1d6b803a 	cmpltu	r21,r3,r21
 800dbfc:	2529803a 	cmpltu	r20,r4,r20
 800dc00:	98a7883a 	add	r19,r19,r2
 800dc04:	ad2ab03a 	or	r21,r21,r20
 800dc08:	9d67883a 	add	r19,r19,r21
 800dc0c:	e02e927a 	slli	r23,fp,9
 800dc10:	9a27883a 	add	r19,r19,r8
 800dc14:	d9000317 	ldw	r4,12(sp)
 800dc18:	1804d5fa 	srli	r2,r3,23
 800dc1c:	9826927a 	slli	r19,r19,9
 800dc20:	e038d5fa 	srli	fp,fp,23
 800dc24:	b92eb03a 	or	r23,r23,r4
 800dc28:	1806927a 	slli	r3,r3,9
 800dc2c:	98a6b03a 	or	r19,r19,r2
 800dc30:	b82ec03a 	cmpne	r23,r23,zero
 800dc34:	bf2eb03a 	or	r23,r23,fp
 800dc38:	9880402c 	andhi	r2,r19,256
 800dc3c:	b8eeb03a 	or	r23,r23,r3
 800dc40:	10000926 	beq	r2,zero,800dc68 <__muldf3+0x5d8>
 800dc44:	b806d07a 	srli	r3,r23,1
 800dc48:	bdc0004c 	andi	r23,r23,1
 800dc4c:	980497fa 	slli	r2,r19,31
 800dc50:	b8eeb03a 	or	r23,r23,r3
 800dc54:	d8c00017 	ldw	r3,0(sp)
 800dc58:	9826d07a 	srli	r19,r19,1
 800dc5c:	b8aeb03a 	or	r23,r23,r2
 800dc60:	18c00044 	addi	r3,r3,1
 800dc64:	d8c00015 	stw	r3,0(sp)
 800dc68:	d8c00017 	ldw	r3,0(sp)
 800dc6c:	1880ffc4 	addi	r2,r3,1023
 800dc70:	0080490e 	bge	zero,r2,800dd98 <__muldf3+0x708>
 800dc74:	b8c001cc 	andi	r3,r23,7
 800dc78:	18000726 	beq	r3,zero,800dc98 <__muldf3+0x608>
 800dc7c:	b90003cc 	andi	r4,r23,15
 800dc80:	00c00104 	movi	r3,4
 800dc84:	20c00426 	beq	r4,r3,800dc98 <__muldf3+0x608>
 800dc88:	b8c7883a 	add	r3,r23,r3
 800dc8c:	1def803a 	cmpltu	r23,r3,r23
 800dc90:	9de7883a 	add	r19,r19,r23
 800dc94:	182f883a 	mov	r23,r3
 800dc98:	98c0402c 	andhi	r3,r19,256
 800dc9c:	18000526 	beq	r3,zero,800dcb4 <__muldf3+0x624>
 800dca0:	d8c00017 	ldw	r3,0(sp)
 800dca4:	00bfc034 	movhi	r2,65280
 800dca8:	10bfffc4 	addi	r2,r2,-1
 800dcac:	98a6703a 	and	r19,r19,r2
 800dcb0:	18810004 	addi	r2,r3,1024
 800dcb4:	00c1ff84 	movi	r3,2046
 800dcb8:	18bf2016 	blt	r3,r2,800d93c <__alt_data_end+0xf800d93c>
 800dcbc:	9806977a 	slli	r3,r19,29
 800dcc0:	b82ed0fa 	srli	r23,r23,3
 800dcc4:	9826927a 	slli	r19,r19,9
 800dcc8:	1081ffcc 	andi	r2,r2,2047
 800dccc:	1deeb03a 	or	r23,r3,r23
 800dcd0:	9826d33a 	srli	r19,r19,12
 800dcd4:	b039883a 	mov	fp,r22
 800dcd8:	003eca06 	br	800d804 <__alt_data_end+0xf800d804>
 800dcdc:	9880022c 	andhi	r2,r19,8
 800dce0:	10000a26 	beq	r2,zero,800dd0c <__muldf3+0x67c>
 800dce4:	9080022c 	andhi	r2,r18,8
 800dce8:	1000081e 	bne	r2,zero,800dd0c <__muldf3+0x67c>
 800dcec:	00800434 	movhi	r2,16
 800dcf0:	10bfffc4 	addi	r2,r2,-1
 800dcf4:	94c00234 	orhi	r19,r18,8
 800dcf8:	98a6703a 	and	r19,r19,r2
 800dcfc:	a039883a 	mov	fp,r20
 800dd00:	a82f883a 	mov	r23,r21
 800dd04:	0081ffc4 	movi	r2,2047
 800dd08:	003ebe06 	br	800d804 <__alt_data_end+0xf800d804>
 800dd0c:	00800434 	movhi	r2,16
 800dd10:	10bfffc4 	addi	r2,r2,-1
 800dd14:	9cc00234 	orhi	r19,r19,8
 800dd18:	98a6703a 	and	r19,r19,r2
 800dd1c:	0081ffc4 	movi	r2,2047
 800dd20:	003eb806 	br	800d804 <__alt_data_end+0xf800d804>
 800dd24:	14fff604 	addi	r19,r2,-40
 800dd28:	a4e6983a 	sll	r19,r20,r19
 800dd2c:	002f883a 	mov	r23,zero
 800dd30:	003edd06 	br	800d8a8 <__alt_data_end+0xf800d8a8>
 800dd34:	d9800515 	stw	r6,20(sp)
 800dd38:	d9c00415 	stw	r7,16(sp)
 800dd3c:	da000615 	stw	r8,24(sp)
 800dd40:	800e9080 	call	800e908 <__clzsi2>
 800dd44:	10800804 	addi	r2,r2,32
 800dd48:	da000617 	ldw	r8,24(sp)
 800dd4c:	d9c00417 	ldw	r7,16(sp)
 800dd50:	d9800517 	ldw	r6,20(sp)
 800dd54:	003ecb06 	br	800d884 <__alt_data_end+0xf800d884>
 800dd58:	14bff604 	addi	r18,r2,-40
 800dd5c:	34a4983a 	sll	r18,r6,r18
 800dd60:	002b883a 	mov	r21,zero
 800dd64:	003ef106 	br	800d92c <__alt_data_end+0xf800d92c>
 800dd68:	3009883a 	mov	r4,r6
 800dd6c:	d9400415 	stw	r5,16(sp)
 800dd70:	d9800515 	stw	r6,20(sp)
 800dd74:	da000615 	stw	r8,24(sp)
 800dd78:	da400715 	stw	r9,28(sp)
 800dd7c:	800e9080 	call	800e908 <__clzsi2>
 800dd80:	10800804 	addi	r2,r2,32
 800dd84:	da400717 	ldw	r9,28(sp)
 800dd88:	da000617 	ldw	r8,24(sp)
 800dd8c:	d9800517 	ldw	r6,20(sp)
 800dd90:	d9400417 	ldw	r5,16(sp)
 800dd94:	003edc06 	br	800d908 <__alt_data_end+0xf800d908>
 800dd98:	d8c00017 	ldw	r3,0(sp)
 800dd9c:	00bf0084 	movi	r2,-1022
 800dda0:	10c5c83a 	sub	r2,r2,r3
 800dda4:	00c00e04 	movi	r3,56
 800dda8:	18be9216 	blt	r3,r2,800d7f4 <__alt_data_end+0xf800d7f4>
 800ddac:	00c007c4 	movi	r3,31
 800ddb0:	18801916 	blt	r3,r2,800de18 <__muldf3+0x788>
 800ddb4:	d9000017 	ldw	r4,0(sp)
 800ddb8:	b88ad83a 	srl	r5,r23,r2
 800ddbc:	9884d83a 	srl	r2,r19,r2
 800ddc0:	20c10784 	addi	r3,r4,1054
 800ddc4:	98c8983a 	sll	r4,r19,r3
 800ddc8:	b8c6983a 	sll	r3,r23,r3
 800ddcc:	2908b03a 	or	r4,r5,r4
 800ddd0:	1806c03a 	cmpne	r3,r3,zero
 800ddd4:	20c6b03a 	or	r3,r4,r3
 800ddd8:	190001cc 	andi	r4,r3,7
 800dddc:	20000726 	beq	r4,zero,800ddfc <__muldf3+0x76c>
 800dde0:	194003cc 	andi	r5,r3,15
 800dde4:	01000104 	movi	r4,4
 800dde8:	29000426 	beq	r5,r4,800ddfc <__muldf3+0x76c>
 800ddec:	1909883a 	add	r4,r3,r4
 800ddf0:	20c7803a 	cmpltu	r3,r4,r3
 800ddf4:	10c5883a 	add	r2,r2,r3
 800ddf8:	2007883a 	mov	r3,r4
 800ddfc:	1100202c 	andhi	r4,r2,128
 800de00:	20001226 	beq	r4,zero,800de4c <__muldf3+0x7bc>
 800de04:	b039883a 	mov	fp,r22
 800de08:	00800044 	movi	r2,1
 800de0c:	0027883a 	mov	r19,zero
 800de10:	002f883a 	mov	r23,zero
 800de14:	003e7b06 	br	800d804 <__alt_data_end+0xf800d804>
 800de18:	d9400017 	ldw	r5,0(sp)
 800de1c:	00fef884 	movi	r3,-1054
 800de20:	01000804 	movi	r4,32
 800de24:	1947c83a 	sub	r3,r3,r5
 800de28:	98c6d83a 	srl	r3,r19,r3
 800de2c:	11000f26 	beq	r2,r4,800de6c <__muldf3+0x7dc>
 800de30:	28810f84 	addi	r2,r5,1086
 800de34:	9884983a 	sll	r2,r19,r2
 800de38:	15c4b03a 	or	r2,r2,r23
 800de3c:	1004c03a 	cmpne	r2,r2,zero
 800de40:	10c6b03a 	or	r3,r2,r3
 800de44:	0005883a 	mov	r2,zero
 800de48:	003fe306 	br	800ddd8 <__alt_data_end+0xf800ddd8>
 800de4c:	102e977a 	slli	r23,r2,29
 800de50:	1806d0fa 	srli	r3,r3,3
 800de54:	1004927a 	slli	r2,r2,9
 800de58:	b039883a 	mov	fp,r22
 800de5c:	b8eeb03a 	or	r23,r23,r3
 800de60:	1026d33a 	srli	r19,r2,12
 800de64:	0005883a 	mov	r2,zero
 800de68:	003e6606 	br	800d804 <__alt_data_end+0xf800d804>
 800de6c:	0005883a 	mov	r2,zero
 800de70:	003ff106 	br	800de38 <__alt_data_end+0xf800de38>
 800de74:	00800434 	movhi	r2,16
 800de78:	10bfffc4 	addi	r2,r2,-1
 800de7c:	9cc00234 	orhi	r19,r19,8
 800de80:	98a6703a 	and	r19,r19,r2
 800de84:	b039883a 	mov	fp,r22
 800de88:	0081ffc4 	movi	r2,2047
 800de8c:	003e5d06 	br	800d804 <__alt_data_end+0xf800d804>

0800de90 <__subdf3>:
 800de90:	02000434 	movhi	r8,16
 800de94:	423fffc4 	addi	r8,r8,-1
 800de98:	defffb04 	addi	sp,sp,-20
 800de9c:	2a06703a 	and	r3,r5,r8
 800dea0:	3a10703a 	and	r8,r7,r8
 800dea4:	3804d53a 	srli	r2,r7,20
 800dea8:	dc800215 	stw	r18,8(sp)
 800deac:	dc400115 	stw	r17,4(sp)
 800deb0:	2824d7fa 	srli	r18,r5,31
 800deb4:	2822d53a 	srli	r17,r5,20
 800deb8:	401090fa 	slli	r8,r8,3
 800debc:	180a90fa 	slli	r5,r3,3
 800dec0:	3006d77a 	srli	r3,r6,29
 800dec4:	2014d77a 	srli	r10,r4,29
 800dec8:	dc000015 	stw	r16,0(sp)
 800decc:	40d0b03a 	or	r8,r8,r3
 800ded0:	dfc00415 	stw	ra,16(sp)
 800ded4:	dcc00315 	stw	r19,12(sp)
 800ded8:	1081ffcc 	andi	r2,r2,2047
 800dedc:	00c1ffc4 	movi	r3,2047
 800dee0:	9013883a 	mov	r9,r18
 800dee4:	8c41ffcc 	andi	r17,r17,2047
 800dee8:	94803fcc 	andi	r18,r18,255
 800deec:	2a8ab03a 	or	r5,r5,r10
 800def0:	202090fa 	slli	r16,r4,3
 800def4:	380ed7fa 	srli	r7,r7,31
 800def8:	300c90fa 	slli	r6,r6,3
 800defc:	10c02e26 	beq	r2,r3,800dfb8 <__subdf3+0x128>
 800df00:	39c0005c 	xori	r7,r7,1
 800df04:	8887c83a 	sub	r3,r17,r2
 800df08:	91c03026 	beq	r18,r7,800dfcc <__subdf3+0x13c>
 800df0c:	00c0a40e 	bge	zero,r3,800e1a0 <__subdf3+0x310>
 800df10:	10004c1e 	bne	r2,zero,800e044 <__subdf3+0x1b4>
 800df14:	4184b03a 	or	r2,r8,r6
 800df18:	10008f1e 	bne	r2,zero,800e158 <__subdf3+0x2c8>
 800df1c:	808001cc 	andi	r2,r16,7
 800df20:	10007d26 	beq	r2,zero,800e118 <__subdf3+0x288>
 800df24:	80c003cc 	andi	r3,r16,15
 800df28:	00800104 	movi	r2,4
 800df2c:	18807a26 	beq	r3,r2,800e118 <__subdf3+0x288>
 800df30:	80c00104 	addi	r3,r16,4
 800df34:	1c21803a 	cmpltu	r16,r3,r16
 800df38:	2c0b883a 	add	r5,r5,r16
 800df3c:	2880202c 	andhi	r2,r5,128
 800df40:	9240004c 	andi	r9,r18,1
 800df44:	1821883a 	mov	r16,r3
 800df48:	10007626 	beq	r2,zero,800e124 <__subdf3+0x294>
 800df4c:	8c400044 	addi	r17,r17,1
 800df50:	0081ffc4 	movi	r2,2047
 800df54:	8880b226 	beq	r17,r2,800e220 <__subdf3+0x390>
 800df58:	00bfe034 	movhi	r2,65408
 800df5c:	10bfffc4 	addi	r2,r2,-1
 800df60:	288a703a 	and	r5,r5,r2
 800df64:	2804977a 	slli	r2,r5,29
 800df68:	280a927a 	slli	r5,r5,9
 800df6c:	8020d0fa 	srli	r16,r16,3
 800df70:	280ad33a 	srli	r5,r5,12
 800df74:	1404b03a 	or	r2,r2,r16
 800df78:	8c41ffcc 	andi	r17,r17,2047
 800df7c:	8822953a 	slli	r17,r17,20
 800df80:	4a403fcc 	andi	r9,r9,255
 800df84:	481297fa 	slli	r9,r9,31
 800df88:	00c00434 	movhi	r3,16
 800df8c:	18ffffc4 	addi	r3,r3,-1
 800df90:	28c6703a 	and	r3,r5,r3
 800df94:	1c46b03a 	or	r3,r3,r17
 800df98:	1a46b03a 	or	r3,r3,r9
 800df9c:	dfc00417 	ldw	ra,16(sp)
 800dfa0:	dcc00317 	ldw	r19,12(sp)
 800dfa4:	dc800217 	ldw	r18,8(sp)
 800dfa8:	dc400117 	ldw	r17,4(sp)
 800dfac:	dc000017 	ldw	r16,0(sp)
 800dfb0:	dec00504 	addi	sp,sp,20
 800dfb4:	f800283a 	ret
 800dfb8:	4186b03a 	or	r3,r8,r6
 800dfbc:	183fd026 	beq	r3,zero,800df00 <__alt_data_end+0xf800df00>
 800dfc0:	39c03fcc 	andi	r7,r7,255
 800dfc4:	8887c83a 	sub	r3,r17,r2
 800dfc8:	91ffd01e 	bne	r18,r7,800df0c <__alt_data_end+0xf800df0c>
 800dfcc:	00c09b0e 	bge	zero,r3,800e23c <__subdf3+0x3ac>
 800dfd0:	10006926 	beq	r2,zero,800e178 <__subdf3+0x2e8>
 800dfd4:	0081ffc4 	movi	r2,2047
 800dfd8:	88bfd026 	beq	r17,r2,800df1c <__alt_data_end+0xf800df1c>
 800dfdc:	42002034 	orhi	r8,r8,128
 800dfe0:	00800e04 	movi	r2,56
 800dfe4:	10c0e20e 	bge	r2,r3,800e370 <__subdf3+0x4e0>
 800dfe8:	418cb03a 	or	r6,r8,r6
 800dfec:	300cc03a 	cmpne	r6,r6,zero
 800dff0:	0007883a 	mov	r3,zero
 800dff4:	340d883a 	add	r6,r6,r16
 800dff8:	3421803a 	cmpltu	r16,r6,r16
 800dffc:	194b883a 	add	r5,r3,r5
 800e000:	2c0b883a 	add	r5,r5,r16
 800e004:	3021883a 	mov	r16,r6
 800e008:	2880202c 	andhi	r2,r5,128
 800e00c:	103fc326 	beq	r2,zero,800df1c <__alt_data_end+0xf800df1c>
 800e010:	8c400044 	addi	r17,r17,1
 800e014:	0081ffc4 	movi	r2,2047
 800e018:	88811026 	beq	r17,r2,800e45c <__subdf3+0x5cc>
 800e01c:	00bfe034 	movhi	r2,65408
 800e020:	10bfffc4 	addi	r2,r2,-1
 800e024:	288a703a 	and	r5,r5,r2
 800e028:	8006d07a 	srli	r3,r16,1
 800e02c:	280497fa 	slli	r2,r5,31
 800e030:	8400004c 	andi	r16,r16,1
 800e034:	80e0b03a 	or	r16,r16,r3
 800e038:	80a0b03a 	or	r16,r16,r2
 800e03c:	280ad07a 	srli	r5,r5,1
 800e040:	003fb606 	br	800df1c <__alt_data_end+0xf800df1c>
 800e044:	0081ffc4 	movi	r2,2047
 800e048:	88bfb426 	beq	r17,r2,800df1c <__alt_data_end+0xf800df1c>
 800e04c:	42002034 	orhi	r8,r8,128
 800e050:	00800e04 	movi	r2,56
 800e054:	10c07516 	blt	r2,r3,800e22c <__subdf3+0x39c>
 800e058:	008007c4 	movi	r2,31
 800e05c:	10c09816 	blt	r2,r3,800e2c0 <__subdf3+0x430>
 800e060:	00800804 	movi	r2,32
 800e064:	10c5c83a 	sub	r2,r2,r3
 800e068:	30c8d83a 	srl	r4,r6,r3
 800e06c:	408e983a 	sll	r7,r8,r2
 800e070:	3084983a 	sll	r2,r6,r2
 800e074:	40c6d83a 	srl	r3,r8,r3
 800e078:	3908b03a 	or	r4,r7,r4
 800e07c:	1004c03a 	cmpne	r2,r2,zero
 800e080:	208cb03a 	or	r6,r4,r2
 800e084:	818dc83a 	sub	r6,r16,r6
 800e088:	81a1803a 	cmpltu	r16,r16,r6
 800e08c:	28cbc83a 	sub	r5,r5,r3
 800e090:	2c0bc83a 	sub	r5,r5,r16
 800e094:	3021883a 	mov	r16,r6
 800e098:	2880202c 	andhi	r2,r5,128
 800e09c:	103f9f26 	beq	r2,zero,800df1c <__alt_data_end+0xf800df1c>
 800e0a0:	04c02034 	movhi	r19,128
 800e0a4:	9cffffc4 	addi	r19,r19,-1
 800e0a8:	2ce6703a 	and	r19,r5,r19
 800e0ac:	98004d26 	beq	r19,zero,800e1e4 <__subdf3+0x354>
 800e0b0:	9809883a 	mov	r4,r19
 800e0b4:	800e9080 	call	800e908 <__clzsi2>
 800e0b8:	10fffe04 	addi	r3,r2,-8
 800e0bc:	010007c4 	movi	r4,31
 800e0c0:	20c04e16 	blt	r4,r3,800e1fc <__subdf3+0x36c>
 800e0c4:	01000a04 	movi	r4,40
 800e0c8:	2085c83a 	sub	r2,r4,r2
 800e0cc:	8084d83a 	srl	r2,r16,r2
 800e0d0:	98e6983a 	sll	r19,r19,r3
 800e0d4:	80e0983a 	sll	r16,r16,r3
 800e0d8:	14c4b03a 	or	r2,r2,r19
 800e0dc:	1c404b16 	blt	r3,r17,800e20c <__subdf3+0x37c>
 800e0e0:	1c63c83a 	sub	r17,r3,r17
 800e0e4:	89400044 	addi	r5,r17,1
 800e0e8:	00c007c4 	movi	r3,31
 800e0ec:	19406716 	blt	r3,r5,800e28c <__subdf3+0x3fc>
 800e0f0:	1c47c83a 	sub	r3,r3,r17
 800e0f4:	8148d83a 	srl	r4,r16,r5
 800e0f8:	80e0983a 	sll	r16,r16,r3
 800e0fc:	10c6983a 	sll	r3,r2,r3
 800e100:	114ad83a 	srl	r5,r2,r5
 800e104:	8004c03a 	cmpne	r2,r16,zero
 800e108:	20e0b03a 	or	r16,r4,r3
 800e10c:	80a0b03a 	or	r16,r16,r2
 800e110:	0023883a 	mov	r17,zero
 800e114:	003f8106 	br	800df1c <__alt_data_end+0xf800df1c>
 800e118:	2880202c 	andhi	r2,r5,128
 800e11c:	9240004c 	andi	r9,r18,1
 800e120:	103f8a1e 	bne	r2,zero,800df4c <__alt_data_end+0xf800df4c>
 800e124:	2804977a 	slli	r2,r5,29
 800e128:	8020d0fa 	srli	r16,r16,3
 800e12c:	00c1ffc4 	movi	r3,2047
 800e130:	280ad0fa 	srli	r5,r5,3
 800e134:	1404b03a 	or	r2,r2,r16
 800e138:	88c0031e 	bne	r17,r3,800e148 <__subdf3+0x2b8>
 800e13c:	1146b03a 	or	r3,r2,r5
 800e140:	18003726 	beq	r3,zero,800e220 <__subdf3+0x390>
 800e144:	29400234 	orhi	r5,r5,8
 800e148:	00c00434 	movhi	r3,16
 800e14c:	18ffffc4 	addi	r3,r3,-1
 800e150:	28ca703a 	and	r5,r5,r3
 800e154:	003f8806 	br	800df78 <__alt_data_end+0xf800df78>
 800e158:	18ffffc4 	addi	r3,r3,-1
 800e15c:	1800481e 	bne	r3,zero,800e280 <__subdf3+0x3f0>
 800e160:	818dc83a 	sub	r6,r16,r6
 800e164:	81a1803a 	cmpltu	r16,r16,r6
 800e168:	2a0bc83a 	sub	r5,r5,r8
 800e16c:	2c0bc83a 	sub	r5,r5,r16
 800e170:	3021883a 	mov	r16,r6
 800e174:	003fc806 	br	800e098 <__alt_data_end+0xf800e098>
 800e178:	4184b03a 	or	r2,r8,r6
 800e17c:	103f6726 	beq	r2,zero,800df1c <__alt_data_end+0xf800df1c>
 800e180:	18ffffc4 	addi	r3,r3,-1
 800e184:	1800931e 	bne	r3,zero,800e3d4 <__subdf3+0x544>
 800e188:	340d883a 	add	r6,r6,r16
 800e18c:	3421803a 	cmpltu	r16,r6,r16
 800e190:	414b883a 	add	r5,r8,r5
 800e194:	2c0b883a 	add	r5,r5,r16
 800e198:	3021883a 	mov	r16,r6
 800e19c:	003f9a06 	br	800e008 <__alt_data_end+0xf800e008>
 800e1a0:	1800531e 	bne	r3,zero,800e2f0 <__subdf3+0x460>
 800e1a4:	88800044 	addi	r2,r17,1
 800e1a8:	1081ffcc 	andi	r2,r2,2047
 800e1ac:	00c00044 	movi	r3,1
 800e1b0:	1880a00e 	bge	r3,r2,800e434 <__subdf3+0x5a4>
 800e1b4:	8185c83a 	sub	r2,r16,r6
 800e1b8:	8087803a 	cmpltu	r3,r16,r2
 800e1bc:	2a27c83a 	sub	r19,r5,r8
 800e1c0:	98e7c83a 	sub	r19,r19,r3
 800e1c4:	98c0202c 	andhi	r3,r19,128
 800e1c8:	18006226 	beq	r3,zero,800e354 <__subdf3+0x4c4>
 800e1cc:	3421c83a 	sub	r16,r6,r16
 800e1d0:	414bc83a 	sub	r5,r8,r5
 800e1d4:	340d803a 	cmpltu	r6,r6,r16
 800e1d8:	29a7c83a 	sub	r19,r5,r6
 800e1dc:	3825883a 	mov	r18,r7
 800e1e0:	983fb31e 	bne	r19,zero,800e0b0 <__alt_data_end+0xf800e0b0>
 800e1e4:	8009883a 	mov	r4,r16
 800e1e8:	800e9080 	call	800e908 <__clzsi2>
 800e1ec:	10800804 	addi	r2,r2,32
 800e1f0:	10fffe04 	addi	r3,r2,-8
 800e1f4:	010007c4 	movi	r4,31
 800e1f8:	20ffb20e 	bge	r4,r3,800e0c4 <__alt_data_end+0xf800e0c4>
 800e1fc:	10bff604 	addi	r2,r2,-40
 800e200:	8084983a 	sll	r2,r16,r2
 800e204:	0021883a 	mov	r16,zero
 800e208:	1c7fb50e 	bge	r3,r17,800e0e0 <__alt_data_end+0xf800e0e0>
 800e20c:	017fe034 	movhi	r5,65408
 800e210:	297fffc4 	addi	r5,r5,-1
 800e214:	88e3c83a 	sub	r17,r17,r3
 800e218:	114a703a 	and	r5,r2,r5
 800e21c:	003f3f06 	br	800df1c <__alt_data_end+0xf800df1c>
 800e220:	000b883a 	mov	r5,zero
 800e224:	0005883a 	mov	r2,zero
 800e228:	003f5306 	br	800df78 <__alt_data_end+0xf800df78>
 800e22c:	418cb03a 	or	r6,r8,r6
 800e230:	300cc03a 	cmpne	r6,r6,zero
 800e234:	0007883a 	mov	r3,zero
 800e238:	003f9206 	br	800e084 <__alt_data_end+0xf800e084>
 800e23c:	1800961e 	bne	r3,zero,800e498 <__subdf3+0x608>
 800e240:	88800044 	addi	r2,r17,1
 800e244:	1101ffcc 	andi	r4,r2,2047
 800e248:	00c00044 	movi	r3,1
 800e24c:	1900680e 	bge	r3,r4,800e3f0 <__subdf3+0x560>
 800e250:	00c1ffc4 	movi	r3,2047
 800e254:	10c0b626 	beq	r2,r3,800e530 <__subdf3+0x6a0>
 800e258:	340d883a 	add	r6,r6,r16
 800e25c:	3421803a 	cmpltu	r16,r6,r16
 800e260:	414b883a 	add	r5,r8,r5
 800e264:	2c0b883a 	add	r5,r5,r16
 800e268:	282097fa 	slli	r16,r5,31
 800e26c:	300cd07a 	srli	r6,r6,1
 800e270:	280ad07a 	srli	r5,r5,1
 800e274:	1023883a 	mov	r17,r2
 800e278:	81a0b03a 	or	r16,r16,r6
 800e27c:	003f2706 	br	800df1c <__alt_data_end+0xf800df1c>
 800e280:	0081ffc4 	movi	r2,2047
 800e284:	88bf721e 	bne	r17,r2,800e050 <__alt_data_end+0xf800e050>
 800e288:	003f2406 	br	800df1c <__alt_data_end+0xf800df1c>
 800e28c:	893ff844 	addi	r4,r17,-31
 800e290:	00c00804 	movi	r3,32
 800e294:	1108d83a 	srl	r4,r2,r4
 800e298:	28c05126 	beq	r5,r3,800e3e0 <__subdf3+0x550>
 800e29c:	00c00fc4 	movi	r3,63
 800e2a0:	1c63c83a 	sub	r17,r3,r17
 800e2a4:	1444983a 	sll	r2,r2,r17
 800e2a8:	1420b03a 	or	r16,r2,r16
 800e2ac:	8020c03a 	cmpne	r16,r16,zero
 800e2b0:	8120b03a 	or	r16,r16,r4
 800e2b4:	000b883a 	mov	r5,zero
 800e2b8:	0023883a 	mov	r17,zero
 800e2bc:	003f1706 	br	800df1c <__alt_data_end+0xf800df1c>
 800e2c0:	18bff804 	addi	r2,r3,-32
 800e2c4:	01000804 	movi	r4,32
 800e2c8:	4084d83a 	srl	r2,r8,r2
 800e2cc:	19004626 	beq	r3,r4,800e3e8 <__subdf3+0x558>
 800e2d0:	01001004 	movi	r4,64
 800e2d4:	20c7c83a 	sub	r3,r4,r3
 800e2d8:	40d0983a 	sll	r8,r8,r3
 800e2dc:	418cb03a 	or	r6,r8,r6
 800e2e0:	300cc03a 	cmpne	r6,r6,zero
 800e2e4:	308cb03a 	or	r6,r6,r2
 800e2e8:	0007883a 	mov	r3,zero
 800e2ec:	003f6506 	br	800e084 <__alt_data_end+0xf800e084>
 800e2f0:	88002b26 	beq	r17,zero,800e3a0 <__subdf3+0x510>
 800e2f4:	0101ffc4 	movi	r4,2047
 800e2f8:	11002f26 	beq	r2,r4,800e3b8 <__subdf3+0x528>
 800e2fc:	00c7c83a 	sub	r3,zero,r3
 800e300:	29402034 	orhi	r5,r5,128
 800e304:	01000e04 	movi	r4,56
 800e308:	20c08516 	blt	r4,r3,800e520 <__subdf3+0x690>
 800e30c:	010007c4 	movi	r4,31
 800e310:	20c0cd16 	blt	r4,r3,800e648 <__subdf3+0x7b8>
 800e314:	01000804 	movi	r4,32
 800e318:	20c9c83a 	sub	r4,r4,r3
 800e31c:	2914983a 	sll	r10,r5,r4
 800e320:	80d2d83a 	srl	r9,r16,r3
 800e324:	8108983a 	sll	r4,r16,r4
 800e328:	28cad83a 	srl	r5,r5,r3
 800e32c:	5252b03a 	or	r9,r10,r9
 800e330:	2006c03a 	cmpne	r3,r4,zero
 800e334:	48e0b03a 	or	r16,r9,r3
 800e338:	3421c83a 	sub	r16,r6,r16
 800e33c:	414bc83a 	sub	r5,r8,r5
 800e340:	340d803a 	cmpltu	r6,r6,r16
 800e344:	298bc83a 	sub	r5,r5,r6
 800e348:	1023883a 	mov	r17,r2
 800e34c:	3825883a 	mov	r18,r7
 800e350:	003f5106 	br	800e098 <__alt_data_end+0xf800e098>
 800e354:	9886b03a 	or	r3,r19,r2
 800e358:	18001c1e 	bne	r3,zero,800e3cc <__subdf3+0x53c>
 800e35c:	0013883a 	mov	r9,zero
 800e360:	000b883a 	mov	r5,zero
 800e364:	0021883a 	mov	r16,zero
 800e368:	0023883a 	mov	r17,zero
 800e36c:	003f6d06 	br	800e124 <__alt_data_end+0xf800e124>
 800e370:	008007c4 	movi	r2,31
 800e374:	10c03c16 	blt	r2,r3,800e468 <__subdf3+0x5d8>
 800e378:	00800804 	movi	r2,32
 800e37c:	10c5c83a 	sub	r2,r2,r3
 800e380:	30c8d83a 	srl	r4,r6,r3
 800e384:	408e983a 	sll	r7,r8,r2
 800e388:	3084983a 	sll	r2,r6,r2
 800e38c:	40c6d83a 	srl	r3,r8,r3
 800e390:	3908b03a 	or	r4,r7,r4
 800e394:	1004c03a 	cmpne	r2,r2,zero
 800e398:	208cb03a 	or	r6,r4,r2
 800e39c:	003f1506 	br	800dff4 <__alt_data_end+0xf800dff4>
 800e3a0:	2c08b03a 	or	r4,r5,r16
 800e3a4:	20000426 	beq	r4,zero,800e3b8 <__subdf3+0x528>
 800e3a8:	00c6303a 	nor	r3,zero,r3
 800e3ac:	183fe226 	beq	r3,zero,800e338 <__alt_data_end+0xf800e338>
 800e3b0:	0101ffc4 	movi	r4,2047
 800e3b4:	113fd31e 	bne	r2,r4,800e304 <__alt_data_end+0xf800e304>
 800e3b8:	400b883a 	mov	r5,r8
 800e3bc:	3021883a 	mov	r16,r6
 800e3c0:	1023883a 	mov	r17,r2
 800e3c4:	3825883a 	mov	r18,r7
 800e3c8:	003ed406 	br	800df1c <__alt_data_end+0xf800df1c>
 800e3cc:	1021883a 	mov	r16,r2
 800e3d0:	003f3606 	br	800e0ac <__alt_data_end+0xf800e0ac>
 800e3d4:	0081ffc4 	movi	r2,2047
 800e3d8:	88bf011e 	bne	r17,r2,800dfe0 <__alt_data_end+0xf800dfe0>
 800e3dc:	003ecf06 	br	800df1c <__alt_data_end+0xf800df1c>
 800e3e0:	0005883a 	mov	r2,zero
 800e3e4:	003fb006 	br	800e2a8 <__alt_data_end+0xf800e2a8>
 800e3e8:	0011883a 	mov	r8,zero
 800e3ec:	003fbb06 	br	800e2dc <__alt_data_end+0xf800e2dc>
 800e3f0:	2c04b03a 	or	r2,r5,r16
 800e3f4:	88007f1e 	bne	r17,zero,800e5f4 <__subdf3+0x764>
 800e3f8:	1000a926 	beq	r2,zero,800e6a0 <__subdf3+0x810>
 800e3fc:	4184b03a 	or	r2,r8,r6
 800e400:	103ec626 	beq	r2,zero,800df1c <__alt_data_end+0xf800df1c>
 800e404:	340d883a 	add	r6,r6,r16
 800e408:	414b883a 	add	r5,r8,r5
 800e40c:	3421803a 	cmpltu	r16,r6,r16
 800e410:	2c0b883a 	add	r5,r5,r16
 800e414:	2880202c 	andhi	r2,r5,128
 800e418:	1000bb26 	beq	r2,zero,800e708 <__subdf3+0x878>
 800e41c:	00bfe034 	movhi	r2,65408
 800e420:	10bfffc4 	addi	r2,r2,-1
 800e424:	288a703a 	and	r5,r5,r2
 800e428:	3021883a 	mov	r16,r6
 800e42c:	1823883a 	mov	r17,r3
 800e430:	003eba06 	br	800df1c <__alt_data_end+0xf800df1c>
 800e434:	2c04b03a 	or	r2,r5,r16
 800e438:	8800311e 	bne	r17,zero,800e500 <__subdf3+0x670>
 800e43c:	1000451e 	bne	r2,zero,800e554 <__subdf3+0x6c4>
 800e440:	4184b03a 	or	r2,r8,r6
 800e444:	10000426 	beq	r2,zero,800e458 <__subdf3+0x5c8>
 800e448:	400b883a 	mov	r5,r8
 800e44c:	3021883a 	mov	r16,r6
 800e450:	3825883a 	mov	r18,r7
 800e454:	003eb106 	br	800df1c <__alt_data_end+0xf800df1c>
 800e458:	0013883a 	mov	r9,zero
 800e45c:	000b883a 	mov	r5,zero
 800e460:	0021883a 	mov	r16,zero
 800e464:	003f2f06 	br	800e124 <__alt_data_end+0xf800e124>
 800e468:	18bff804 	addi	r2,r3,-32
 800e46c:	01000804 	movi	r4,32
 800e470:	4084d83a 	srl	r2,r8,r2
 800e474:	19007226 	beq	r3,r4,800e640 <__subdf3+0x7b0>
 800e478:	01001004 	movi	r4,64
 800e47c:	20c7c83a 	sub	r3,r4,r3
 800e480:	40d0983a 	sll	r8,r8,r3
 800e484:	418cb03a 	or	r6,r8,r6
 800e488:	300cc03a 	cmpne	r6,r6,zero
 800e48c:	308cb03a 	or	r6,r6,r2
 800e490:	0007883a 	mov	r3,zero
 800e494:	003ed706 	br	800dff4 <__alt_data_end+0xf800dff4>
 800e498:	8800291e 	bne	r17,zero,800e540 <__subdf3+0x6b0>
 800e49c:	2c08b03a 	or	r4,r5,r16
 800e4a0:	20005026 	beq	r4,zero,800e5e4 <__subdf3+0x754>
 800e4a4:	00c6303a 	nor	r3,zero,r3
 800e4a8:	18000f26 	beq	r3,zero,800e4e8 <__subdf3+0x658>
 800e4ac:	0101ffc4 	movi	r4,2047
 800e4b0:	11004c26 	beq	r2,r4,800e5e4 <__subdf3+0x754>
 800e4b4:	01000e04 	movi	r4,56
 800e4b8:	20c07516 	blt	r4,r3,800e690 <__subdf3+0x800>
 800e4bc:	010007c4 	movi	r4,31
 800e4c0:	20c08316 	blt	r4,r3,800e6d0 <__subdf3+0x840>
 800e4c4:	01000804 	movi	r4,32
 800e4c8:	20c9c83a 	sub	r4,r4,r3
 800e4cc:	2914983a 	sll	r10,r5,r4
 800e4d0:	80ced83a 	srl	r7,r16,r3
 800e4d4:	8108983a 	sll	r4,r16,r4
 800e4d8:	28cad83a 	srl	r5,r5,r3
 800e4dc:	51ceb03a 	or	r7,r10,r7
 800e4e0:	2006c03a 	cmpne	r3,r4,zero
 800e4e4:	38e0b03a 	or	r16,r7,r3
 800e4e8:	81a1883a 	add	r16,r16,r6
 800e4ec:	2a0b883a 	add	r5,r5,r8
 800e4f0:	818d803a 	cmpltu	r6,r16,r6
 800e4f4:	298b883a 	add	r5,r5,r6
 800e4f8:	1023883a 	mov	r17,r2
 800e4fc:	003ec206 	br	800e008 <__alt_data_end+0xf800e008>
 800e500:	1000221e 	bne	r2,zero,800e58c <__subdf3+0x6fc>
 800e504:	4184b03a 	or	r2,r8,r6
 800e508:	10005b26 	beq	r2,zero,800e678 <__subdf3+0x7e8>
 800e50c:	400b883a 	mov	r5,r8
 800e510:	3021883a 	mov	r16,r6
 800e514:	3825883a 	mov	r18,r7
 800e518:	0441ffc4 	movi	r17,2047
 800e51c:	003e7f06 	br	800df1c <__alt_data_end+0xf800df1c>
 800e520:	2c20b03a 	or	r16,r5,r16
 800e524:	8020c03a 	cmpne	r16,r16,zero
 800e528:	000b883a 	mov	r5,zero
 800e52c:	003f8206 	br	800e338 <__alt_data_end+0xf800e338>
 800e530:	1023883a 	mov	r17,r2
 800e534:	000b883a 	mov	r5,zero
 800e538:	0021883a 	mov	r16,zero
 800e53c:	003ef906 	br	800e124 <__alt_data_end+0xf800e124>
 800e540:	0101ffc4 	movi	r4,2047
 800e544:	11002726 	beq	r2,r4,800e5e4 <__subdf3+0x754>
 800e548:	00c7c83a 	sub	r3,zero,r3
 800e54c:	29402034 	orhi	r5,r5,128
 800e550:	003fd806 	br	800e4b4 <__alt_data_end+0xf800e4b4>
 800e554:	4184b03a 	or	r2,r8,r6
 800e558:	103e7026 	beq	r2,zero,800df1c <__alt_data_end+0xf800df1c>
 800e55c:	8185c83a 	sub	r2,r16,r6
 800e560:	8089803a 	cmpltu	r4,r16,r2
 800e564:	2a07c83a 	sub	r3,r5,r8
 800e568:	1907c83a 	sub	r3,r3,r4
 800e56c:	1900202c 	andhi	r4,r3,128
 800e570:	20005226 	beq	r4,zero,800e6bc <__subdf3+0x82c>
 800e574:	3421c83a 	sub	r16,r6,r16
 800e578:	414bc83a 	sub	r5,r8,r5
 800e57c:	340d803a 	cmpltu	r6,r6,r16
 800e580:	298bc83a 	sub	r5,r5,r6
 800e584:	3825883a 	mov	r18,r7
 800e588:	003e6406 	br	800df1c <__alt_data_end+0xf800df1c>
 800e58c:	4184b03a 	or	r2,r8,r6
 800e590:	10002926 	beq	r2,zero,800e638 <__subdf3+0x7a8>
 800e594:	2804d0fa 	srli	r2,r5,3
 800e598:	8020d0fa 	srli	r16,r16,3
 800e59c:	280a977a 	slli	r5,r5,29
 800e5a0:	10c0022c 	andhi	r3,r2,8
 800e5a4:	2c20b03a 	or	r16,r5,r16
 800e5a8:	18000826 	beq	r3,zero,800e5cc <__subdf3+0x73c>
 800e5ac:	4006d0fa 	srli	r3,r8,3
 800e5b0:	1900022c 	andhi	r4,r3,8
 800e5b4:	2000051e 	bne	r4,zero,800e5cc <__subdf3+0x73c>
 800e5b8:	300cd0fa 	srli	r6,r6,3
 800e5bc:	4010977a 	slli	r8,r8,29
 800e5c0:	1805883a 	mov	r2,r3
 800e5c4:	3825883a 	mov	r18,r7
 800e5c8:	41a0b03a 	or	r16,r8,r6
 800e5cc:	800ad77a 	srli	r5,r16,29
 800e5d0:	100490fa 	slli	r2,r2,3
 800e5d4:	802090fa 	slli	r16,r16,3
 800e5d8:	0441ffc4 	movi	r17,2047
 800e5dc:	288ab03a 	or	r5,r5,r2
 800e5e0:	003e4e06 	br	800df1c <__alt_data_end+0xf800df1c>
 800e5e4:	400b883a 	mov	r5,r8
 800e5e8:	3021883a 	mov	r16,r6
 800e5ec:	1023883a 	mov	r17,r2
 800e5f0:	003e4a06 	br	800df1c <__alt_data_end+0xf800df1c>
 800e5f4:	10002d26 	beq	r2,zero,800e6ac <__subdf3+0x81c>
 800e5f8:	4184b03a 	or	r2,r8,r6
 800e5fc:	10000e26 	beq	r2,zero,800e638 <__subdf3+0x7a8>
 800e600:	2804d0fa 	srli	r2,r5,3
 800e604:	8020d0fa 	srli	r16,r16,3
 800e608:	280a977a 	slli	r5,r5,29
 800e60c:	10c0022c 	andhi	r3,r2,8
 800e610:	2c20b03a 	or	r16,r5,r16
 800e614:	183fed26 	beq	r3,zero,800e5cc <__alt_data_end+0xf800e5cc>
 800e618:	4006d0fa 	srli	r3,r8,3
 800e61c:	1900022c 	andhi	r4,r3,8
 800e620:	203fea1e 	bne	r4,zero,800e5cc <__alt_data_end+0xf800e5cc>
 800e624:	300cd0fa 	srli	r6,r6,3
 800e628:	4010977a 	slli	r8,r8,29
 800e62c:	1805883a 	mov	r2,r3
 800e630:	41a0b03a 	or	r16,r8,r6
 800e634:	003fe506 	br	800e5cc <__alt_data_end+0xf800e5cc>
 800e638:	0441ffc4 	movi	r17,2047
 800e63c:	003e3706 	br	800df1c <__alt_data_end+0xf800df1c>
 800e640:	0011883a 	mov	r8,zero
 800e644:	003f8f06 	br	800e484 <__alt_data_end+0xf800e484>
 800e648:	193ff804 	addi	r4,r3,-32
 800e64c:	02400804 	movi	r9,32
 800e650:	2908d83a 	srl	r4,r5,r4
 800e654:	1a402a26 	beq	r3,r9,800e700 <__subdf3+0x870>
 800e658:	02401004 	movi	r9,64
 800e65c:	48c7c83a 	sub	r3,r9,r3
 800e660:	28ca983a 	sll	r5,r5,r3
 800e664:	2c20b03a 	or	r16,r5,r16
 800e668:	8020c03a 	cmpne	r16,r16,zero
 800e66c:	8120b03a 	or	r16,r16,r4
 800e670:	000b883a 	mov	r5,zero
 800e674:	003f3006 	br	800e338 <__alt_data_end+0xf800e338>
 800e678:	0013883a 	mov	r9,zero
 800e67c:	01402034 	movhi	r5,128
 800e680:	297fffc4 	addi	r5,r5,-1
 800e684:	043ffe04 	movi	r16,-8
 800e688:	0441ffc4 	movi	r17,2047
 800e68c:	003ea506 	br	800e124 <__alt_data_end+0xf800e124>
 800e690:	2c20b03a 	or	r16,r5,r16
 800e694:	8020c03a 	cmpne	r16,r16,zero
 800e698:	000b883a 	mov	r5,zero
 800e69c:	003f9206 	br	800e4e8 <__alt_data_end+0xf800e4e8>
 800e6a0:	400b883a 	mov	r5,r8
 800e6a4:	3021883a 	mov	r16,r6
 800e6a8:	003e1c06 	br	800df1c <__alt_data_end+0xf800df1c>
 800e6ac:	400b883a 	mov	r5,r8
 800e6b0:	3021883a 	mov	r16,r6
 800e6b4:	0441ffc4 	movi	r17,2047
 800e6b8:	003e1806 	br	800df1c <__alt_data_end+0xf800df1c>
 800e6bc:	1888b03a 	or	r4,r3,r2
 800e6c0:	203f6526 	beq	r4,zero,800e458 <__alt_data_end+0xf800e458>
 800e6c4:	180b883a 	mov	r5,r3
 800e6c8:	1021883a 	mov	r16,r2
 800e6cc:	003e1306 	br	800df1c <__alt_data_end+0xf800df1c>
 800e6d0:	193ff804 	addi	r4,r3,-32
 800e6d4:	01c00804 	movi	r7,32
 800e6d8:	2908d83a 	srl	r4,r5,r4
 800e6dc:	19c00c26 	beq	r3,r7,800e710 <__subdf3+0x880>
 800e6e0:	01c01004 	movi	r7,64
 800e6e4:	38c7c83a 	sub	r3,r7,r3
 800e6e8:	28ca983a 	sll	r5,r5,r3
 800e6ec:	2c20b03a 	or	r16,r5,r16
 800e6f0:	8020c03a 	cmpne	r16,r16,zero
 800e6f4:	8120b03a 	or	r16,r16,r4
 800e6f8:	000b883a 	mov	r5,zero
 800e6fc:	003f7a06 	br	800e4e8 <__alt_data_end+0xf800e4e8>
 800e700:	000b883a 	mov	r5,zero
 800e704:	003fd706 	br	800e664 <__alt_data_end+0xf800e664>
 800e708:	3021883a 	mov	r16,r6
 800e70c:	003e0306 	br	800df1c <__alt_data_end+0xf800df1c>
 800e710:	000b883a 	mov	r5,zero
 800e714:	003ff506 	br	800e6ec <__alt_data_end+0xf800e6ec>

0800e718 <__fixdfsi>:
 800e718:	2806d53a 	srli	r3,r5,20
 800e71c:	00800434 	movhi	r2,16
 800e720:	10bfffc4 	addi	r2,r2,-1
 800e724:	0180ff84 	movi	r6,1022
 800e728:	18c1ffcc 	andi	r3,r3,2047
 800e72c:	2884703a 	and	r2,r5,r2
 800e730:	280ad7fa 	srli	r5,r5,31
 800e734:	30c0120e 	bge	r6,r3,800e780 <__fixdfsi+0x68>
 800e738:	01810744 	movi	r6,1053
 800e73c:	30c00c16 	blt	r6,r3,800e770 <__fixdfsi+0x58>
 800e740:	01810cc4 	movi	r6,1075
 800e744:	30cdc83a 	sub	r6,r6,r3
 800e748:	01c007c4 	movi	r7,31
 800e74c:	10800434 	orhi	r2,r2,16
 800e750:	39800d16 	blt	r7,r6,800e788 <__fixdfsi+0x70>
 800e754:	18fefb44 	addi	r3,r3,-1043
 800e758:	2188d83a 	srl	r4,r4,r6
 800e75c:	10c4983a 	sll	r2,r2,r3
 800e760:	2084b03a 	or	r2,r4,r2
 800e764:	28000726 	beq	r5,zero,800e784 <__fixdfsi+0x6c>
 800e768:	0085c83a 	sub	r2,zero,r2
 800e76c:	f800283a 	ret
 800e770:	00a00034 	movhi	r2,32768
 800e774:	10bfffc4 	addi	r2,r2,-1
 800e778:	2885883a 	add	r2,r5,r2
 800e77c:	f800283a 	ret
 800e780:	0005883a 	mov	r2,zero
 800e784:	f800283a 	ret
 800e788:	010104c4 	movi	r4,1043
 800e78c:	20c7c83a 	sub	r3,r4,r3
 800e790:	10c4d83a 	srl	r2,r2,r3
 800e794:	003ff306 	br	800e764 <__alt_data_end+0xf800e764>

0800e798 <__floatsidf>:
 800e798:	defffd04 	addi	sp,sp,-12
 800e79c:	dc000015 	stw	r16,0(sp)
 800e7a0:	dfc00215 	stw	ra,8(sp)
 800e7a4:	dc400115 	stw	r17,4(sp)
 800e7a8:	2021883a 	mov	r16,r4
 800e7ac:	20002926 	beq	r4,zero,800e854 <__floatsidf+0xbc>
 800e7b0:	2022d7fa 	srli	r17,r4,31
 800e7b4:	88000126 	beq	r17,zero,800e7bc <__floatsidf+0x24>
 800e7b8:	0121c83a 	sub	r16,zero,r4
 800e7bc:	8009883a 	mov	r4,r16
 800e7c0:	800e9080 	call	800e908 <__clzsi2>
 800e7c4:	01810784 	movi	r6,1054
 800e7c8:	00c00284 	movi	r3,10
 800e7cc:	308dc83a 	sub	r6,r6,r2
 800e7d0:	1880150e 	bge	r3,r2,800e828 <__floatsidf+0x90>
 800e7d4:	113ffd44 	addi	r4,r2,-11
 800e7d8:	8108983a 	sll	r4,r16,r4
 800e7dc:	00800434 	movhi	r2,16
 800e7e0:	10bfffc4 	addi	r2,r2,-1
 800e7e4:	3181ffcc 	andi	r6,r6,2047
 800e7e8:	2088703a 	and	r4,r4,r2
 800e7ec:	880b883a 	mov	r5,r17
 800e7f0:	0005883a 	mov	r2,zero
 800e7f4:	300c953a 	slli	r6,r6,20
 800e7f8:	29403fcc 	andi	r5,r5,255
 800e7fc:	280a97fa 	slli	r5,r5,31
 800e800:	00c00434 	movhi	r3,16
 800e804:	18ffffc4 	addi	r3,r3,-1
 800e808:	20c8703a 	and	r4,r4,r3
 800e80c:	2186b03a 	or	r3,r4,r6
 800e810:	1946b03a 	or	r3,r3,r5
 800e814:	dfc00217 	ldw	ra,8(sp)
 800e818:	dc400117 	ldw	r17,4(sp)
 800e81c:	dc000017 	ldw	r16,0(sp)
 800e820:	dec00304 	addi	sp,sp,12
 800e824:	f800283a 	ret
 800e828:	010002c4 	movi	r4,11
 800e82c:	2089c83a 	sub	r4,r4,r2
 800e830:	8108d83a 	srl	r4,r16,r4
 800e834:	10800544 	addi	r2,r2,21
 800e838:	00c00434 	movhi	r3,16
 800e83c:	18ffffc4 	addi	r3,r3,-1
 800e840:	8084983a 	sll	r2,r16,r2
 800e844:	20c8703a 	and	r4,r4,r3
 800e848:	3181ffcc 	andi	r6,r6,2047
 800e84c:	880b883a 	mov	r5,r17
 800e850:	003fe806 	br	800e7f4 <__alt_data_end+0xf800e7f4>
 800e854:	000b883a 	mov	r5,zero
 800e858:	000d883a 	mov	r6,zero
 800e85c:	0009883a 	mov	r4,zero
 800e860:	0005883a 	mov	r2,zero
 800e864:	003fe306 	br	800e7f4 <__alt_data_end+0xf800e7f4>

0800e868 <__floatunsidf>:
 800e868:	defffe04 	addi	sp,sp,-8
 800e86c:	dc000015 	stw	r16,0(sp)
 800e870:	dfc00115 	stw	ra,4(sp)
 800e874:	2021883a 	mov	r16,r4
 800e878:	20001f26 	beq	r4,zero,800e8f8 <__floatunsidf+0x90>
 800e87c:	800e9080 	call	800e908 <__clzsi2>
 800e880:	01010784 	movi	r4,1054
 800e884:	00c00284 	movi	r3,10
 800e888:	2089c83a 	sub	r4,r4,r2
 800e88c:	1880100e 	bge	r3,r2,800e8d0 <__floatunsidf+0x68>
 800e890:	117ffd44 	addi	r5,r2,-11
 800e894:	814a983a 	sll	r5,r16,r5
 800e898:	00800434 	movhi	r2,16
 800e89c:	10bfffc4 	addi	r2,r2,-1
 800e8a0:	2101ffcc 	andi	r4,r4,2047
 800e8a4:	288a703a 	and	r5,r5,r2
 800e8a8:	0005883a 	mov	r2,zero
 800e8ac:	2008953a 	slli	r4,r4,20
 800e8b0:	00c00434 	movhi	r3,16
 800e8b4:	18ffffc4 	addi	r3,r3,-1
 800e8b8:	28c6703a 	and	r3,r5,r3
 800e8bc:	1906b03a 	or	r3,r3,r4
 800e8c0:	dfc00117 	ldw	ra,4(sp)
 800e8c4:	dc000017 	ldw	r16,0(sp)
 800e8c8:	dec00204 	addi	sp,sp,8
 800e8cc:	f800283a 	ret
 800e8d0:	014002c4 	movi	r5,11
 800e8d4:	288bc83a 	sub	r5,r5,r2
 800e8d8:	814ad83a 	srl	r5,r16,r5
 800e8dc:	10800544 	addi	r2,r2,21
 800e8e0:	00c00434 	movhi	r3,16
 800e8e4:	18ffffc4 	addi	r3,r3,-1
 800e8e8:	8084983a 	sll	r2,r16,r2
 800e8ec:	28ca703a 	and	r5,r5,r3
 800e8f0:	2101ffcc 	andi	r4,r4,2047
 800e8f4:	003fed06 	br	800e8ac <__alt_data_end+0xf800e8ac>
 800e8f8:	0009883a 	mov	r4,zero
 800e8fc:	000b883a 	mov	r5,zero
 800e900:	0005883a 	mov	r2,zero
 800e904:	003fe906 	br	800e8ac <__alt_data_end+0xf800e8ac>

0800e908 <__clzsi2>:
 800e908:	00bfffd4 	movui	r2,65535
 800e90c:	11000b36 	bltu	r2,r4,800e93c <__clzsi2+0x34>
 800e910:	00803fc4 	movi	r2,255
 800e914:	11001e2e 	bgeu	r2,r4,800e990 <__clzsi2+0x88>
 800e918:	00c00204 	movi	r3,8
 800e91c:	20c8d83a 	srl	r4,r4,r3
 800e920:	00c20074 	movhi	r3,2049
 800e924:	18c6be04 	addi	r3,r3,6904
 800e928:	00800604 	movi	r2,24
 800e92c:	1909883a 	add	r4,r3,r4
 800e930:	20c00003 	ldbu	r3,0(r4)
 800e934:	10c5c83a 	sub	r2,r2,r3
 800e938:	f800283a 	ret
 800e93c:	00804034 	movhi	r2,256
 800e940:	10bfffc4 	addi	r2,r2,-1
 800e944:	11000936 	bltu	r2,r4,800e96c <__clzsi2+0x64>
 800e948:	00800404 	movi	r2,16
 800e94c:	1007883a 	mov	r3,r2
 800e950:	20c8d83a 	srl	r4,r4,r3
 800e954:	00c20074 	movhi	r3,2049
 800e958:	18c6be04 	addi	r3,r3,6904
 800e95c:	1909883a 	add	r4,r3,r4
 800e960:	20c00003 	ldbu	r3,0(r4)
 800e964:	10c5c83a 	sub	r2,r2,r3
 800e968:	f800283a 	ret
 800e96c:	00c00604 	movi	r3,24
 800e970:	20c8d83a 	srl	r4,r4,r3
 800e974:	00c20074 	movhi	r3,2049
 800e978:	18c6be04 	addi	r3,r3,6904
 800e97c:	00800204 	movi	r2,8
 800e980:	1909883a 	add	r4,r3,r4
 800e984:	20c00003 	ldbu	r3,0(r4)
 800e988:	10c5c83a 	sub	r2,r2,r3
 800e98c:	f800283a 	ret
 800e990:	0007883a 	mov	r3,zero
 800e994:	20c8d83a 	srl	r4,r4,r3
 800e998:	00c20074 	movhi	r3,2049
 800e99c:	18c6be04 	addi	r3,r3,6904
 800e9a0:	00800804 	movi	r2,32
 800e9a4:	1909883a 	add	r4,r3,r4
 800e9a8:	20c00003 	ldbu	r3,0(r4)
 800e9ac:	10c5c83a 	sub	r2,r2,r3
 800e9b0:	f800283a 	ret

0800e9b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e9b4:	defffe04 	addi	sp,sp,-8
 800e9b8:	dfc00115 	stw	ra,4(sp)
 800e9bc:	df000015 	stw	fp,0(sp)
 800e9c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800e9c4:	00820074 	movhi	r2,2049
 800e9c8:	108dbf04 	addi	r2,r2,14076
 800e9cc:	10800017 	ldw	r2,0(r2)
 800e9d0:	10000526 	beq	r2,zero,800e9e8 <alt_get_errno+0x34>
 800e9d4:	00820074 	movhi	r2,2049
 800e9d8:	108dbf04 	addi	r2,r2,14076
 800e9dc:	10800017 	ldw	r2,0(r2)
 800e9e0:	103ee83a 	callr	r2
 800e9e4:	00000206 	br	800e9f0 <alt_get_errno+0x3c>
 800e9e8:	00820074 	movhi	r2,2049
 800e9ec:	10948604 	addi	r2,r2,21016
}
 800e9f0:	e037883a 	mov	sp,fp
 800e9f4:	dfc00117 	ldw	ra,4(sp)
 800e9f8:	df000017 	ldw	fp,0(sp)
 800e9fc:	dec00204 	addi	sp,sp,8
 800ea00:	f800283a 	ret

0800ea04 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800ea04:	defffb04 	addi	sp,sp,-20
 800ea08:	dfc00415 	stw	ra,16(sp)
 800ea0c:	df000315 	stw	fp,12(sp)
 800ea10:	df000304 	addi	fp,sp,12
 800ea14:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800ea18:	e0bfff17 	ldw	r2,-4(fp)
 800ea1c:	10000816 	blt	r2,zero,800ea40 <close+0x3c>
 800ea20:	e13fff17 	ldw	r4,-4(fp)
 800ea24:	01400304 	movi	r5,12
 800ea28:	800c2080 	call	800c208 <__mulsi3>
 800ea2c:	1007883a 	mov	r3,r2
 800ea30:	00820074 	movhi	r2,2049
 800ea34:	10893c04 	addi	r2,r2,9456
 800ea38:	1885883a 	add	r2,r3,r2
 800ea3c:	00000106 	br	800ea44 <close+0x40>
 800ea40:	0005883a 	mov	r2,zero
 800ea44:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800ea48:	e0bffd17 	ldw	r2,-12(fp)
 800ea4c:	10001826 	beq	r2,zero,800eab0 <close+0xac>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800ea50:	e0bffd17 	ldw	r2,-12(fp)
 800ea54:	10800017 	ldw	r2,0(r2)
 800ea58:	10800417 	ldw	r2,16(r2)
 800ea5c:	10000626 	beq	r2,zero,800ea78 <close+0x74>
 800ea60:	e0bffd17 	ldw	r2,-12(fp)
 800ea64:	10800017 	ldw	r2,0(r2)
 800ea68:	10800417 	ldw	r2,16(r2)
 800ea6c:	e13ffd17 	ldw	r4,-12(fp)
 800ea70:	103ee83a 	callr	r2
 800ea74:	00000106 	br	800ea7c <close+0x78>
 800ea78:	0005883a 	mov	r2,zero
 800ea7c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800ea80:	e13fff17 	ldw	r4,-4(fp)
 800ea84:	800f1080 	call	800f108 <alt_release_fd>
    if (rval < 0)
 800ea88:	e0bffe17 	ldw	r2,-8(fp)
 800ea8c:	1000060e 	bge	r2,zero,800eaa8 <close+0xa4>
    {
      ALT_ERRNO = -rval;
 800ea90:	800e9b40 	call	800e9b4 <alt_get_errno>
 800ea94:	e0fffe17 	ldw	r3,-8(fp)
 800ea98:	00c7c83a 	sub	r3,zero,r3
 800ea9c:	10c00015 	stw	r3,0(r2)
      return -1;
 800eaa0:	00bfffc4 	movi	r2,-1
 800eaa4:	00000606 	br	800eac0 <close+0xbc>
    }
    return 0;
 800eaa8:	0005883a 	mov	r2,zero
 800eaac:	00000406 	br	800eac0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800eab0:	800e9b40 	call	800e9b4 <alt_get_errno>
 800eab4:	00c01444 	movi	r3,81
 800eab8:	10c00015 	stw	r3,0(r2)
    return -1;
 800eabc:	00bfffc4 	movi	r2,-1
  }
}
 800eac0:	e037883a 	mov	sp,fp
 800eac4:	dfc00117 	ldw	ra,4(sp)
 800eac8:	df000017 	ldw	fp,0(sp)
 800eacc:	dec00204 	addi	sp,sp,8
 800ead0:	f800283a 	ret

0800ead4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800ead4:	defffc04 	addi	sp,sp,-16
 800ead8:	df000315 	stw	fp,12(sp)
 800eadc:	df000304 	addi	fp,sp,12
 800eae0:	e13ffd15 	stw	r4,-12(fp)
 800eae4:	e17ffe15 	stw	r5,-8(fp)
 800eae8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800eaec:	e0bfff17 	ldw	r2,-4(fp)
}
 800eaf0:	e037883a 	mov	sp,fp
 800eaf4:	df000017 	ldw	fp,0(sp)
 800eaf8:	dec00104 	addi	sp,sp,4
 800eafc:	f800283a 	ret

0800eb00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800eb00:	defffe04 	addi	sp,sp,-8
 800eb04:	dfc00115 	stw	ra,4(sp)
 800eb08:	df000015 	stw	fp,0(sp)
 800eb0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800eb10:	00820074 	movhi	r2,2049
 800eb14:	108dbf04 	addi	r2,r2,14076
 800eb18:	10800017 	ldw	r2,0(r2)
 800eb1c:	10000526 	beq	r2,zero,800eb34 <alt_get_errno+0x34>
 800eb20:	00820074 	movhi	r2,2049
 800eb24:	108dbf04 	addi	r2,r2,14076
 800eb28:	10800017 	ldw	r2,0(r2)
 800eb2c:	103ee83a 	callr	r2
 800eb30:	00000206 	br	800eb3c <alt_get_errno+0x3c>
 800eb34:	00820074 	movhi	r2,2049
 800eb38:	10948604 	addi	r2,r2,21016
}
 800eb3c:	e037883a 	mov	sp,fp
 800eb40:	dfc00117 	ldw	ra,4(sp)
 800eb44:	df000017 	ldw	fp,0(sp)
 800eb48:	dec00204 	addi	sp,sp,8
 800eb4c:	f800283a 	ret

0800eb50 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800eb50:	defffb04 	addi	sp,sp,-20
 800eb54:	dfc00415 	stw	ra,16(sp)
 800eb58:	df000315 	stw	fp,12(sp)
 800eb5c:	df000304 	addi	fp,sp,12
 800eb60:	e13ffe15 	stw	r4,-8(fp)
 800eb64:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800eb68:	e0bffe17 	ldw	r2,-8(fp)
 800eb6c:	10000816 	blt	r2,zero,800eb90 <fstat+0x40>
 800eb70:	e13ffe17 	ldw	r4,-8(fp)
 800eb74:	01400304 	movi	r5,12
 800eb78:	800c2080 	call	800c208 <__mulsi3>
 800eb7c:	1007883a 	mov	r3,r2
 800eb80:	00820074 	movhi	r2,2049
 800eb84:	10893c04 	addi	r2,r2,9456
 800eb88:	1885883a 	add	r2,r3,r2
 800eb8c:	00000106 	br	800eb94 <fstat+0x44>
 800eb90:	0005883a 	mov	r2,zero
 800eb94:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 800eb98:	e0bffd17 	ldw	r2,-12(fp)
 800eb9c:	10001026 	beq	r2,zero,800ebe0 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800eba0:	e0bffd17 	ldw	r2,-12(fp)
 800eba4:	10800017 	ldw	r2,0(r2)
 800eba8:	10800817 	ldw	r2,32(r2)
 800ebac:	10000726 	beq	r2,zero,800ebcc <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 800ebb0:	e0bffd17 	ldw	r2,-12(fp)
 800ebb4:	10800017 	ldw	r2,0(r2)
 800ebb8:	10800817 	ldw	r2,32(r2)
 800ebbc:	e13ffd17 	ldw	r4,-12(fp)
 800ebc0:	e17fff17 	ldw	r5,-4(fp)
 800ebc4:	103ee83a 	callr	r2
 800ebc8:	00000906 	br	800ebf0 <fstat+0xa0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800ebcc:	e0bfff17 	ldw	r2,-4(fp)
 800ebd0:	00c80004 	movi	r3,8192
 800ebd4:	10c00115 	stw	r3,4(r2)
      return 0;
 800ebd8:	0005883a 	mov	r2,zero
 800ebdc:	00000406 	br	800ebf0 <fstat+0xa0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800ebe0:	800eb000 	call	800eb00 <alt_get_errno>
 800ebe4:	00c01444 	movi	r3,81
 800ebe8:	10c00015 	stw	r3,0(r2)
    return -1;
 800ebec:	00bfffc4 	movi	r2,-1
  }
}
 800ebf0:	e037883a 	mov	sp,fp
 800ebf4:	dfc00117 	ldw	ra,4(sp)
 800ebf8:	df000017 	ldw	fp,0(sp)
 800ebfc:	dec00204 	addi	sp,sp,8
 800ec00:	f800283a 	ret

0800ec04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800ec04:	defffe04 	addi	sp,sp,-8
 800ec08:	dfc00115 	stw	ra,4(sp)
 800ec0c:	df000015 	stw	fp,0(sp)
 800ec10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800ec14:	00820074 	movhi	r2,2049
 800ec18:	108dbf04 	addi	r2,r2,14076
 800ec1c:	10800017 	ldw	r2,0(r2)
 800ec20:	10000526 	beq	r2,zero,800ec38 <alt_get_errno+0x34>
 800ec24:	00820074 	movhi	r2,2049
 800ec28:	108dbf04 	addi	r2,r2,14076
 800ec2c:	10800017 	ldw	r2,0(r2)
 800ec30:	103ee83a 	callr	r2
 800ec34:	00000206 	br	800ec40 <alt_get_errno+0x3c>
 800ec38:	00820074 	movhi	r2,2049
 800ec3c:	10948604 	addi	r2,r2,21016
}
 800ec40:	e037883a 	mov	sp,fp
 800ec44:	dfc00117 	ldw	ra,4(sp)
 800ec48:	df000017 	ldw	fp,0(sp)
 800ec4c:	dec00204 	addi	sp,sp,8
 800ec50:	f800283a 	ret

0800ec54 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800ec54:	deffed04 	addi	sp,sp,-76
 800ec58:	dfc01215 	stw	ra,72(sp)
 800ec5c:	df001115 	stw	fp,68(sp)
 800ec60:	df001104 	addi	fp,sp,68
 800ec64:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800ec68:	e0bfff17 	ldw	r2,-4(fp)
 800ec6c:	10000816 	blt	r2,zero,800ec90 <isatty+0x3c>
 800ec70:	e13fff17 	ldw	r4,-4(fp)
 800ec74:	01400304 	movi	r5,12
 800ec78:	800c2080 	call	800c208 <__mulsi3>
 800ec7c:	1007883a 	mov	r3,r2
 800ec80:	00820074 	movhi	r2,2049
 800ec84:	10893c04 	addi	r2,r2,9456
 800ec88:	1885883a 	add	r2,r3,r2
 800ec8c:	00000106 	br	800ec94 <isatty+0x40>
 800ec90:	0005883a 	mov	r2,zero
 800ec94:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 800ec98:	e0bfef17 	ldw	r2,-68(fp)
 800ec9c:	10000e26 	beq	r2,zero,800ecd8 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800eca0:	e0bfef17 	ldw	r2,-68(fp)
 800eca4:	10800017 	ldw	r2,0(r2)
 800eca8:	10800817 	ldw	r2,32(r2)
 800ecac:	1000021e 	bne	r2,zero,800ecb8 <isatty+0x64>
    {
      return 1;
 800ecb0:	00800044 	movi	r2,1
 800ecb4:	00000c06 	br	800ece8 <isatty+0x94>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800ecb8:	e0bff004 	addi	r2,fp,-64
 800ecbc:	e13fff17 	ldw	r4,-4(fp)
 800ecc0:	100b883a 	mov	r5,r2
 800ecc4:	800eb500 	call	800eb50 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800ecc8:	e0bff117 	ldw	r2,-60(fp)
 800eccc:	10880020 	cmpeqi	r2,r2,8192
 800ecd0:	10803fcc 	andi	r2,r2,255
 800ecd4:	00000406 	br	800ece8 <isatty+0x94>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800ecd8:	800ec040 	call	800ec04 <alt_get_errno>
 800ecdc:	00c01444 	movi	r3,81
 800ece0:	10c00015 	stw	r3,0(r2)
    return 0;
 800ece4:	0005883a 	mov	r2,zero
  }
}
 800ece8:	e037883a 	mov	sp,fp
 800ecec:	dfc00117 	ldw	ra,4(sp)
 800ecf0:	df000017 	ldw	fp,0(sp)
 800ecf4:	dec00204 	addi	sp,sp,8
 800ecf8:	f800283a 	ret

0800ecfc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800ecfc:	defffc04 	addi	sp,sp,-16
 800ed00:	df000315 	stw	fp,12(sp)
 800ed04:	df000304 	addi	fp,sp,12
 800ed08:	e13ffd15 	stw	r4,-12(fp)
 800ed0c:	e17ffe15 	stw	r5,-8(fp)
 800ed10:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800ed14:	e0fffe17 	ldw	r3,-8(fp)
 800ed18:	e0bffd17 	ldw	r2,-12(fp)
 800ed1c:	18800c26 	beq	r3,r2,800ed50 <alt_load_section+0x54>
  {
    while( to != end )
 800ed20:	00000806 	br	800ed44 <alt_load_section+0x48>
    {
      *to++ = *from++;
 800ed24:	e0bffe17 	ldw	r2,-8(fp)
 800ed28:	10c00104 	addi	r3,r2,4
 800ed2c:	e0fffe15 	stw	r3,-8(fp)
 800ed30:	e0fffd17 	ldw	r3,-12(fp)
 800ed34:	19000104 	addi	r4,r3,4
 800ed38:	e13ffd15 	stw	r4,-12(fp)
 800ed3c:	18c00017 	ldw	r3,0(r3)
 800ed40:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800ed44:	e0fffe17 	ldw	r3,-8(fp)
 800ed48:	e0bfff17 	ldw	r2,-4(fp)
 800ed4c:	18bff51e 	bne	r3,r2,800ed24 <__alt_data_end+0xf800ed24>
    {
      *to++ = *from++;
    }
  }
}
 800ed50:	e037883a 	mov	sp,fp
 800ed54:	df000017 	ldw	fp,0(sp)
 800ed58:	dec00104 	addi	sp,sp,4
 800ed5c:	f800283a 	ret

0800ed60 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800ed60:	defffe04 	addi	sp,sp,-8
 800ed64:	dfc00115 	stw	ra,4(sp)
 800ed68:	df000015 	stw	fp,0(sp)
 800ed6c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800ed70:	01020074 	movhi	r4,2049
 800ed74:	210dc404 	addi	r4,r4,14096
 800ed78:	01420074 	movhi	r5,2049
 800ed7c:	29470904 	addi	r5,r5,7204
 800ed80:	01820074 	movhi	r6,2049
 800ed84:	318dc404 	addi	r6,r6,14096
 800ed88:	800ecfc0 	call	800ecfc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800ed8c:	01020034 	movhi	r4,2048
 800ed90:	21000804 	addi	r4,r4,32
 800ed94:	01420034 	movhi	r5,2048
 800ed98:	29400804 	addi	r5,r5,32
 800ed9c:	01820034 	movhi	r6,2048
 800eda0:	31806f04 	addi	r6,r6,444
 800eda4:	800ecfc0 	call	800ecfc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800eda8:	01020074 	movhi	r4,2049
 800edac:	21046e04 	addi	r4,r4,4536
 800edb0:	01420074 	movhi	r5,2049
 800edb4:	29446e04 	addi	r5,r5,4536
 800edb8:	01820074 	movhi	r6,2049
 800edbc:	31870904 	addi	r6,r6,7204
 800edc0:	800ecfc0 	call	800ecfc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800edc4:	80101280 	call	8010128 <alt_dcache_flush_all>
  alt_icache_flush_all();
 800edc8:	80102ec0 	call	80102ec <alt_icache_flush_all>
}
 800edcc:	e037883a 	mov	sp,fp
 800edd0:	dfc00117 	ldw	ra,4(sp)
 800edd4:	df000017 	ldw	fp,0(sp)
 800edd8:	dec00204 	addi	sp,sp,8
 800eddc:	f800283a 	ret

0800ede0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800ede0:	defffe04 	addi	sp,sp,-8
 800ede4:	dfc00115 	stw	ra,4(sp)
 800ede8:	df000015 	stw	fp,0(sp)
 800edec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800edf0:	00820074 	movhi	r2,2049
 800edf4:	108dbf04 	addi	r2,r2,14076
 800edf8:	10800017 	ldw	r2,0(r2)
 800edfc:	10000526 	beq	r2,zero,800ee14 <alt_get_errno+0x34>
 800ee00:	00820074 	movhi	r2,2049
 800ee04:	108dbf04 	addi	r2,r2,14076
 800ee08:	10800017 	ldw	r2,0(r2)
 800ee0c:	103ee83a 	callr	r2
 800ee10:	00000206 	br	800ee1c <alt_get_errno+0x3c>
 800ee14:	00820074 	movhi	r2,2049
 800ee18:	10948604 	addi	r2,r2,21016
}
 800ee1c:	e037883a 	mov	sp,fp
 800ee20:	dfc00117 	ldw	ra,4(sp)
 800ee24:	df000017 	ldw	fp,0(sp)
 800ee28:	dec00204 	addi	sp,sp,8
 800ee2c:	f800283a 	ret

0800ee30 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800ee30:	defff904 	addi	sp,sp,-28
 800ee34:	dfc00615 	stw	ra,24(sp)
 800ee38:	df000515 	stw	fp,20(sp)
 800ee3c:	df000504 	addi	fp,sp,20
 800ee40:	e13ffd15 	stw	r4,-12(fp)
 800ee44:	e17ffe15 	stw	r5,-8(fp)
 800ee48:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800ee4c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800ee50:	e0bffd17 	ldw	r2,-12(fp)
 800ee54:	10000816 	blt	r2,zero,800ee78 <lseek+0x48>
 800ee58:	e13ffd17 	ldw	r4,-12(fp)
 800ee5c:	01400304 	movi	r5,12
 800ee60:	800c2080 	call	800c208 <__mulsi3>
 800ee64:	1007883a 	mov	r3,r2
 800ee68:	00820074 	movhi	r2,2049
 800ee6c:	10893c04 	addi	r2,r2,9456
 800ee70:	1885883a 	add	r2,r3,r2
 800ee74:	00000106 	br	800ee7c <lseek+0x4c>
 800ee78:	0005883a 	mov	r2,zero
 800ee7c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 800ee80:	e0bffc17 	ldw	r2,-16(fp)
 800ee84:	10001026 	beq	r2,zero,800eec8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800ee88:	e0bffc17 	ldw	r2,-16(fp)
 800ee8c:	10800017 	ldw	r2,0(r2)
 800ee90:	10800717 	ldw	r2,28(r2)
 800ee94:	10000926 	beq	r2,zero,800eebc <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800ee98:	e0bffc17 	ldw	r2,-16(fp)
 800ee9c:	10800017 	ldw	r2,0(r2)
 800eea0:	10800717 	ldw	r2,28(r2)
 800eea4:	e13ffc17 	ldw	r4,-16(fp)
 800eea8:	e17ffe17 	ldw	r5,-8(fp)
 800eeac:	e1bfff17 	ldw	r6,-4(fp)
 800eeb0:	103ee83a 	callr	r2
 800eeb4:	e0bffb15 	stw	r2,-20(fp)
 800eeb8:	00000506 	br	800eed0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800eebc:	00bfde84 	movi	r2,-134
 800eec0:	e0bffb15 	stw	r2,-20(fp)
 800eec4:	00000206 	br	800eed0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 800eec8:	00bfebc4 	movi	r2,-81
 800eecc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 800eed0:	e0bffb17 	ldw	r2,-20(fp)
 800eed4:	1000060e 	bge	r2,zero,800eef0 <lseek+0xc0>
  {
    ALT_ERRNO = -rc;
 800eed8:	800ede00 	call	800ede0 <alt_get_errno>
 800eedc:	e0fffb17 	ldw	r3,-20(fp)
 800eee0:	00c7c83a 	sub	r3,zero,r3
 800eee4:	10c00015 	stw	r3,0(r2)
    rc = -1;
 800eee8:	00bfffc4 	movi	r2,-1
 800eeec:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 800eef0:	e0bffb17 	ldw	r2,-20(fp)
}
 800eef4:	e037883a 	mov	sp,fp
 800eef8:	dfc00117 	ldw	ra,4(sp)
 800eefc:	df000017 	ldw	fp,0(sp)
 800ef00:	dec00204 	addi	sp,sp,8
 800ef04:	f800283a 	ret

0800ef08 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800ef08:	defffd04 	addi	sp,sp,-12
 800ef0c:	dfc00215 	stw	ra,8(sp)
 800ef10:	df000115 	stw	fp,4(sp)
 800ef14:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800ef18:	0009883a 	mov	r4,zero
 800ef1c:	800f3e40 	call	800f3e4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800ef20:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800ef24:	800f4180 	call	800f418 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800ef28:	01020074 	movhi	r4,2049
 800ef2c:	21070104 	addi	r4,r4,7172
 800ef30:	01420074 	movhi	r5,2049
 800ef34:	29470104 	addi	r5,r5,7172
 800ef38:	01820074 	movhi	r6,2049
 800ef3c:	31870104 	addi	r6,r6,7172
 800ef40:	80106b00 	call	80106b0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800ef44:	80102340 	call	8010234 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800ef48:	01020074 	movhi	r4,2049
 800ef4c:	2100a404 	addi	r4,r4,656
 800ef50:	8010dfc0 	call	8010dfc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800ef54:	d126d317 	ldw	r4,-25780(gp)
 800ef58:	d0e6d417 	ldw	r3,-25776(gp)
 800ef5c:	d0a6d517 	ldw	r2,-25772(gp)
 800ef60:	180b883a 	mov	r5,r3
 800ef64:	100d883a 	mov	r6,r2
 800ef68:	80001f80 	call	80001f8 <main>
 800ef6c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800ef70:	01000044 	movi	r4,1
 800ef74:	800ea040 	call	800ea04 <close>
  exit (result);
 800ef78:	e13fff17 	ldw	r4,-4(fp)
 800ef7c:	8010e100 	call	8010e10 <exit>

0800ef80 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800ef80:	defffe04 	addi	sp,sp,-8
 800ef84:	df000115 	stw	fp,4(sp)
 800ef88:	df000104 	addi	fp,sp,4
 800ef8c:	e13fff15 	stw	r4,-4(fp)
}
 800ef90:	e037883a 	mov	sp,fp
 800ef94:	df000017 	ldw	fp,0(sp)
 800ef98:	dec00104 	addi	sp,sp,4
 800ef9c:	f800283a 	ret

0800efa0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800efa0:	defffe04 	addi	sp,sp,-8
 800efa4:	df000115 	stw	fp,4(sp)
 800efa8:	df000104 	addi	fp,sp,4
 800efac:	e13fff15 	stw	r4,-4(fp)
}
 800efb0:	e037883a 	mov	sp,fp
 800efb4:	df000017 	ldw	fp,0(sp)
 800efb8:	dec00104 	addi	sp,sp,4
 800efbc:	f800283a 	ret

0800efc0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800efc0:	defffe04 	addi	sp,sp,-8
 800efc4:	dfc00115 	stw	ra,4(sp)
 800efc8:	df000015 	stw	fp,0(sp)
 800efcc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800efd0:	00820074 	movhi	r2,2049
 800efd4:	108dbf04 	addi	r2,r2,14076
 800efd8:	10800017 	ldw	r2,0(r2)
 800efdc:	10000526 	beq	r2,zero,800eff4 <alt_get_errno+0x34>
 800efe0:	00820074 	movhi	r2,2049
 800efe4:	108dbf04 	addi	r2,r2,14076
 800efe8:	10800017 	ldw	r2,0(r2)
 800efec:	103ee83a 	callr	r2
 800eff0:	00000206 	br	800effc <alt_get_errno+0x3c>
 800eff4:	00820074 	movhi	r2,2049
 800eff8:	10948604 	addi	r2,r2,21016
}
 800effc:	e037883a 	mov	sp,fp
 800f000:	dfc00117 	ldw	ra,4(sp)
 800f004:	df000017 	ldw	fp,0(sp)
 800f008:	dec00204 	addi	sp,sp,8
 800f00c:	f800283a 	ret

0800f010 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800f010:	defff904 	addi	sp,sp,-28
 800f014:	dfc00615 	stw	ra,24(sp)
 800f018:	df000515 	stw	fp,20(sp)
 800f01c:	df000504 	addi	fp,sp,20
 800f020:	e13ffd15 	stw	r4,-12(fp)
 800f024:	e17ffe15 	stw	r5,-8(fp)
 800f028:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800f02c:	e0bffd17 	ldw	r2,-12(fp)
 800f030:	10000816 	blt	r2,zero,800f054 <read+0x44>
 800f034:	e13ffd17 	ldw	r4,-12(fp)
 800f038:	01400304 	movi	r5,12
 800f03c:	800c2080 	call	800c208 <__mulsi3>
 800f040:	1007883a 	mov	r3,r2
 800f044:	00820074 	movhi	r2,2049
 800f048:	10893c04 	addi	r2,r2,9456
 800f04c:	1885883a 	add	r2,r3,r2
 800f050:	00000106 	br	800f058 <read+0x48>
 800f054:	0005883a 	mov	r2,zero
 800f058:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800f05c:	e0bffb17 	ldw	r2,-20(fp)
 800f060:	10002026 	beq	r2,zero,800f0e4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800f064:	e0bffb17 	ldw	r2,-20(fp)
 800f068:	10800217 	ldw	r2,8(r2)
 800f06c:	108000cc 	andi	r2,r2,3
 800f070:	10800060 	cmpeqi	r2,r2,1
 800f074:	1000171e 	bne	r2,zero,800f0d4 <read+0xc4>
        (fd->dev->read))
 800f078:	e0bffb17 	ldw	r2,-20(fp)
 800f07c:	10800017 	ldw	r2,0(r2)
 800f080:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800f084:	10001326 	beq	r2,zero,800f0d4 <read+0xc4>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800f088:	e0bffb17 	ldw	r2,-20(fp)
 800f08c:	10800017 	ldw	r2,0(r2)
 800f090:	10800517 	ldw	r2,20(r2)
 800f094:	e0ffff17 	ldw	r3,-4(fp)
 800f098:	e13ffb17 	ldw	r4,-20(fp)
 800f09c:	e17ffe17 	ldw	r5,-8(fp)
 800f0a0:	180d883a 	mov	r6,r3
 800f0a4:	103ee83a 	callr	r2
 800f0a8:	e0bffc15 	stw	r2,-16(fp)
 800f0ac:	e0bffc17 	ldw	r2,-16(fp)
 800f0b0:	1000060e 	bge	r2,zero,800f0cc <read+0xbc>
        {
          ALT_ERRNO = -rval;
 800f0b4:	800efc00 	call	800efc0 <alt_get_errno>
 800f0b8:	e0fffc17 	ldw	r3,-16(fp)
 800f0bc:	00c7c83a 	sub	r3,zero,r3
 800f0c0:	10c00015 	stw	r3,0(r2)
          return -1;
 800f0c4:	00bfffc4 	movi	r2,-1
 800f0c8:	00000a06 	br	800f0f4 <read+0xe4>
        }
        return rval;
 800f0cc:	e0bffc17 	ldw	r2,-16(fp)
 800f0d0:	00000806 	br	800f0f4 <read+0xe4>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800f0d4:	800efc00 	call	800efc0 <alt_get_errno>
 800f0d8:	00c00344 	movi	r3,13
 800f0dc:	10c00015 	stw	r3,0(r2)
 800f0e0:	00000306 	br	800f0f0 <read+0xe0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800f0e4:	800efc00 	call	800efc0 <alt_get_errno>
 800f0e8:	00c01444 	movi	r3,81
 800f0ec:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 800f0f0:	00bfffc4 	movi	r2,-1
}
 800f0f4:	e037883a 	mov	sp,fp
 800f0f8:	dfc00117 	ldw	ra,4(sp)
 800f0fc:	df000017 	ldw	fp,0(sp)
 800f100:	dec00204 	addi	sp,sp,8
 800f104:	f800283a 	ret

0800f108 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800f108:	defffc04 	addi	sp,sp,-16
 800f10c:	dfc00315 	stw	ra,12(sp)
 800f110:	df000215 	stw	fp,8(sp)
 800f114:	dc000115 	stw	r16,4(sp)
 800f118:	df000204 	addi	fp,sp,8
 800f11c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 800f120:	e0bffe17 	ldw	r2,-8(fp)
 800f124:	108000d0 	cmplti	r2,r2,3
 800f128:	1000111e 	bne	r2,zero,800f170 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 800f12c:	04020074 	movhi	r16,2049
 800f130:	84093c04 	addi	r16,r16,9456
 800f134:	e0bffe17 	ldw	r2,-8(fp)
 800f138:	1009883a 	mov	r4,r2
 800f13c:	01400304 	movi	r5,12
 800f140:	800c2080 	call	800c208 <__mulsi3>
 800f144:	8085883a 	add	r2,r16,r2
 800f148:	10800204 	addi	r2,r2,8
 800f14c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800f150:	04020074 	movhi	r16,2049
 800f154:	84093c04 	addi	r16,r16,9456
 800f158:	e0bffe17 	ldw	r2,-8(fp)
 800f15c:	1009883a 	mov	r4,r2
 800f160:	01400304 	movi	r5,12
 800f164:	800c2080 	call	800c208 <__mulsi3>
 800f168:	8085883a 	add	r2,r16,r2
 800f16c:	10000015 	stw	zero,0(r2)
  }
}
 800f170:	e6ffff04 	addi	sp,fp,-4
 800f174:	dfc00217 	ldw	ra,8(sp)
 800f178:	df000117 	ldw	fp,4(sp)
 800f17c:	dc000017 	ldw	r16,0(sp)
 800f180:	dec00304 	addi	sp,sp,12
 800f184:	f800283a 	ret

0800f188 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800f188:	defff904 	addi	sp,sp,-28
 800f18c:	df000615 	stw	fp,24(sp)
 800f190:	df000604 	addi	fp,sp,24
 800f194:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f198:	0005303a 	rdctl	r2,status
 800f19c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f1a0:	e0fffc17 	ldw	r3,-16(fp)
 800f1a4:	00bfff84 	movi	r2,-2
 800f1a8:	1884703a 	and	r2,r3,r2
 800f1ac:	1001703a 	wrctl	status,r2
  
  return context;
 800f1b0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800f1b4:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800f1b8:	d0a00c17 	ldw	r2,-32720(gp)
 800f1bc:	10c000c4 	addi	r3,r2,3
 800f1c0:	00bfff04 	movi	r2,-4
 800f1c4:	1884703a 	and	r2,r3,r2
 800f1c8:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800f1cc:	d0e00c17 	ldw	r3,-32720(gp)
 800f1d0:	e0bfff17 	ldw	r2,-4(fp)
 800f1d4:	1885883a 	add	r2,r3,r2
 800f1d8:	00c40034 	movhi	r3,4096
 800f1dc:	18c00004 	addi	r3,r3,0
 800f1e0:	1880062e 	bgeu	r3,r2,800f1fc <sbrk+0x74>
 800f1e4:	e0bffa17 	ldw	r2,-24(fp)
 800f1e8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f1ec:	e0bffd17 	ldw	r2,-12(fp)
 800f1f0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800f1f4:	00bfffc4 	movi	r2,-1
 800f1f8:	00000b06 	br	800f228 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800f1fc:	d0a00c17 	ldw	r2,-32720(gp)
 800f200:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 800f204:	d0e00c17 	ldw	r3,-32720(gp)
 800f208:	e0bfff17 	ldw	r2,-4(fp)
 800f20c:	1885883a 	add	r2,r3,r2
 800f210:	d0a00c15 	stw	r2,-32720(gp)
 800f214:	e0bffa17 	ldw	r2,-24(fp)
 800f218:	e0bffe15 	stw	r2,-8(fp)
 800f21c:	e0bffe17 	ldw	r2,-8(fp)
 800f220:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800f224:	e0bffb17 	ldw	r2,-20(fp)
} 
 800f228:	e037883a 	mov	sp,fp
 800f22c:	df000017 	ldw	fp,0(sp)
 800f230:	dec00104 	addi	sp,sp,4
 800f234:	f800283a 	ret

0800f238 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 800f238:	defffd04 	addi	sp,sp,-12
 800f23c:	dfc00215 	stw	ra,8(sp)
 800f240:	df000115 	stw	fp,4(sp)
 800f244:	df000104 	addi	fp,sp,4
 800f248:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 800f24c:	e13fff17 	ldw	r4,-4(fp)
 800f250:	800ffd40 	call	800ffd4 <alt_busy_sleep>
}
 800f254:	e037883a 	mov	sp,fp
 800f258:	dfc00117 	ldw	ra,4(sp)
 800f25c:	df000017 	ldw	fp,0(sp)
 800f260:	dec00204 	addi	sp,sp,8
 800f264:	f800283a 	ret

0800f268 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f268:	defffe04 	addi	sp,sp,-8
 800f26c:	dfc00115 	stw	ra,4(sp)
 800f270:	df000015 	stw	fp,0(sp)
 800f274:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f278:	00820074 	movhi	r2,2049
 800f27c:	108dbf04 	addi	r2,r2,14076
 800f280:	10800017 	ldw	r2,0(r2)
 800f284:	10000526 	beq	r2,zero,800f29c <alt_get_errno+0x34>
 800f288:	00820074 	movhi	r2,2049
 800f28c:	108dbf04 	addi	r2,r2,14076
 800f290:	10800017 	ldw	r2,0(r2)
 800f294:	103ee83a 	callr	r2
 800f298:	00000206 	br	800f2a4 <alt_get_errno+0x3c>
 800f29c:	00820074 	movhi	r2,2049
 800f2a0:	10948604 	addi	r2,r2,21016
}
 800f2a4:	e037883a 	mov	sp,fp
 800f2a8:	dfc00117 	ldw	ra,4(sp)
 800f2ac:	df000017 	ldw	fp,0(sp)
 800f2b0:	dec00204 	addi	sp,sp,8
 800f2b4:	f800283a 	ret

0800f2b8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800f2b8:	defff904 	addi	sp,sp,-28
 800f2bc:	dfc00615 	stw	ra,24(sp)
 800f2c0:	df000515 	stw	fp,20(sp)
 800f2c4:	df000504 	addi	fp,sp,20
 800f2c8:	e13ffd15 	stw	r4,-12(fp)
 800f2cc:	e17ffe15 	stw	r5,-8(fp)
 800f2d0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800f2d4:	e0bffd17 	ldw	r2,-12(fp)
 800f2d8:	10000816 	blt	r2,zero,800f2fc <write+0x44>
 800f2dc:	e13ffd17 	ldw	r4,-12(fp)
 800f2e0:	01400304 	movi	r5,12
 800f2e4:	800c2080 	call	800c208 <__mulsi3>
 800f2e8:	1007883a 	mov	r3,r2
 800f2ec:	00820074 	movhi	r2,2049
 800f2f0:	10893c04 	addi	r2,r2,9456
 800f2f4:	1885883a 	add	r2,r3,r2
 800f2f8:	00000106 	br	800f300 <write+0x48>
 800f2fc:	0005883a 	mov	r2,zero
 800f300:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800f304:	e0bffb17 	ldw	r2,-20(fp)
 800f308:	10001f26 	beq	r2,zero,800f388 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800f30c:	e0bffb17 	ldw	r2,-20(fp)
 800f310:	10800217 	ldw	r2,8(r2)
 800f314:	108000cc 	andi	r2,r2,3
 800f318:	10001726 	beq	r2,zero,800f378 <write+0xc0>
 800f31c:	e0bffb17 	ldw	r2,-20(fp)
 800f320:	10800017 	ldw	r2,0(r2)
 800f324:	10800617 	ldw	r2,24(r2)
 800f328:	10001326 	beq	r2,zero,800f378 <write+0xc0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800f32c:	e0bffb17 	ldw	r2,-20(fp)
 800f330:	10800017 	ldw	r2,0(r2)
 800f334:	10800617 	ldw	r2,24(r2)
 800f338:	e0ffff17 	ldw	r3,-4(fp)
 800f33c:	e13ffb17 	ldw	r4,-20(fp)
 800f340:	e17ffe17 	ldw	r5,-8(fp)
 800f344:	180d883a 	mov	r6,r3
 800f348:	103ee83a 	callr	r2
 800f34c:	e0bffc15 	stw	r2,-16(fp)
 800f350:	e0bffc17 	ldw	r2,-16(fp)
 800f354:	1000060e 	bge	r2,zero,800f370 <write+0xb8>
      {
        ALT_ERRNO = -rval;
 800f358:	800f2680 	call	800f268 <alt_get_errno>
 800f35c:	e0fffc17 	ldw	r3,-16(fp)
 800f360:	00c7c83a 	sub	r3,zero,r3
 800f364:	10c00015 	stw	r3,0(r2)
        return -1;
 800f368:	00bfffc4 	movi	r2,-1
 800f36c:	00000a06 	br	800f398 <write+0xe0>
      }
      return rval;
 800f370:	e0bffc17 	ldw	r2,-16(fp)
 800f374:	00000806 	br	800f398 <write+0xe0>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800f378:	800f2680 	call	800f268 <alt_get_errno>
 800f37c:	00c00344 	movi	r3,13
 800f380:	10c00015 	stw	r3,0(r2)
 800f384:	00000306 	br	800f394 <write+0xdc>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800f388:	800f2680 	call	800f268 <alt_get_errno>
 800f38c:	00c01444 	movi	r3,81
 800f390:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 800f394:	00bfffc4 	movi	r2,-1
}
 800f398:	e037883a 	mov	sp,fp
 800f39c:	dfc00117 	ldw	ra,4(sp)
 800f3a0:	df000017 	ldw	fp,0(sp)
 800f3a4:	dec00204 	addi	sp,sp,8
 800f3a8:	f800283a 	ret

0800f3ac <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800f3ac:	defffd04 	addi	sp,sp,-12
 800f3b0:	dfc00215 	stw	ra,8(sp)
 800f3b4:	df000115 	stw	fp,4(sp)
 800f3b8:	df000104 	addi	fp,sp,4
 800f3bc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800f3c0:	e13fff17 	ldw	r4,-4(fp)
 800f3c4:	01420074 	movhi	r5,2049
 800f3c8:	294dbc04 	addi	r5,r5,14064
 800f3cc:	80101940 	call	8010194 <alt_dev_llist_insert>
}
 800f3d0:	e037883a 	mov	sp,fp
 800f3d4:	dfc00117 	ldw	ra,4(sp)
 800f3d8:	df000017 	ldw	fp,0(sp)
 800f3dc:	dec00204 	addi	sp,sp,8
 800f3e0:	f800283a 	ret

0800f3e4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800f3e4:	defffd04 	addi	sp,sp,-12
 800f3e8:	dfc00215 	stw	ra,8(sp)
 800f3ec:	df000115 	stw	fp,4(sp)
 800f3f0:	df000104 	addi	fp,sp,4
 800f3f4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 800f3f8:	8010b640 	call	8010b64 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800f3fc:	00800044 	movi	r2,1
 800f400:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800f404:	e037883a 	mov	sp,fp
 800f408:	dfc00117 	ldw	ra,4(sp)
 800f40c:	df000017 	ldw	fp,0(sp)
 800f410:	dec00204 	addi	sp,sp,8
 800f414:	f800283a 	ret

0800f418 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800f418:	defffe04 	addi	sp,sp,-8
 800f41c:	dfc00115 	stw	ra,4(sp)
 800f420:	df000015 	stw	fp,0(sp)
 800f424:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 800f428:	01020074 	movhi	r4,2049
 800f42c:	2109a604 	addi	r4,r4,9880
 800f430:	000b883a 	mov	r5,zero
 800f434:	01800144 	movi	r6,5
 800f438:	800f5c00 	call	800f5c0 <altera_avalon_jtag_uart_init>
 800f43c:	01020074 	movhi	r4,2049
 800f440:	21099c04 	addi	r4,r4,9840
 800f444:	800f3ac0 	call	800f3ac <alt_dev_reg>
}
 800f448:	e037883a 	mov	sp,fp
 800f44c:	dfc00117 	ldw	ra,4(sp)
 800f450:	df000017 	ldw	fp,0(sp)
 800f454:	dec00204 	addi	sp,sp,8
 800f458:	f800283a 	ret

0800f45c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800f45c:	defffa04 	addi	sp,sp,-24
 800f460:	dfc00515 	stw	ra,20(sp)
 800f464:	df000415 	stw	fp,16(sp)
 800f468:	df000404 	addi	fp,sp,16
 800f46c:	e13ffd15 	stw	r4,-12(fp)
 800f470:	e17ffe15 	stw	r5,-8(fp)
 800f474:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800f478:	e0bffd17 	ldw	r2,-12(fp)
 800f47c:	10800017 	ldw	r2,0(r2)
 800f480:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800f484:	e0bffc17 	ldw	r2,-16(fp)
 800f488:	10c00a04 	addi	r3,r2,40
 800f48c:	e0bffd17 	ldw	r2,-12(fp)
 800f490:	10800217 	ldw	r2,8(r2)
 800f494:	1809883a 	mov	r4,r3
 800f498:	e17ffe17 	ldw	r5,-8(fp)
 800f49c:	e1bfff17 	ldw	r6,-4(fp)
 800f4a0:	100f883a 	mov	r7,r2
 800f4a4:	800fa740 	call	800fa74 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800f4a8:	e037883a 	mov	sp,fp
 800f4ac:	dfc00117 	ldw	ra,4(sp)
 800f4b0:	df000017 	ldw	fp,0(sp)
 800f4b4:	dec00204 	addi	sp,sp,8
 800f4b8:	f800283a 	ret

0800f4bc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800f4bc:	defffa04 	addi	sp,sp,-24
 800f4c0:	dfc00515 	stw	ra,20(sp)
 800f4c4:	df000415 	stw	fp,16(sp)
 800f4c8:	df000404 	addi	fp,sp,16
 800f4cc:	e13ffd15 	stw	r4,-12(fp)
 800f4d0:	e17ffe15 	stw	r5,-8(fp)
 800f4d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800f4d8:	e0bffd17 	ldw	r2,-12(fp)
 800f4dc:	10800017 	ldw	r2,0(r2)
 800f4e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800f4e4:	e0bffc17 	ldw	r2,-16(fp)
 800f4e8:	10c00a04 	addi	r3,r2,40
 800f4ec:	e0bffd17 	ldw	r2,-12(fp)
 800f4f0:	10800217 	ldw	r2,8(r2)
 800f4f4:	1809883a 	mov	r4,r3
 800f4f8:	e17ffe17 	ldw	r5,-8(fp)
 800f4fc:	e1bfff17 	ldw	r6,-4(fp)
 800f500:	100f883a 	mov	r7,r2
 800f504:	800fc7c0 	call	800fc7c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800f508:	e037883a 	mov	sp,fp
 800f50c:	dfc00117 	ldw	ra,4(sp)
 800f510:	df000017 	ldw	fp,0(sp)
 800f514:	dec00204 	addi	sp,sp,8
 800f518:	f800283a 	ret

0800f51c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800f51c:	defffc04 	addi	sp,sp,-16
 800f520:	dfc00315 	stw	ra,12(sp)
 800f524:	df000215 	stw	fp,8(sp)
 800f528:	df000204 	addi	fp,sp,8
 800f52c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800f530:	e0bfff17 	ldw	r2,-4(fp)
 800f534:	10800017 	ldw	r2,0(r2)
 800f538:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800f53c:	e0bffe17 	ldw	r2,-8(fp)
 800f540:	10c00a04 	addi	r3,r2,40
 800f544:	e0bfff17 	ldw	r2,-4(fp)
 800f548:	10800217 	ldw	r2,8(r2)
 800f54c:	1809883a 	mov	r4,r3
 800f550:	100b883a 	mov	r5,r2
 800f554:	800f9200 	call	800f920 <altera_avalon_jtag_uart_close>
}
 800f558:	e037883a 	mov	sp,fp
 800f55c:	dfc00117 	ldw	ra,4(sp)
 800f560:	df000017 	ldw	fp,0(sp)
 800f564:	dec00204 	addi	sp,sp,8
 800f568:	f800283a 	ret

0800f56c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800f56c:	defffa04 	addi	sp,sp,-24
 800f570:	dfc00515 	stw	ra,20(sp)
 800f574:	df000415 	stw	fp,16(sp)
 800f578:	df000404 	addi	fp,sp,16
 800f57c:	e13ffd15 	stw	r4,-12(fp)
 800f580:	e17ffe15 	stw	r5,-8(fp)
 800f584:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800f588:	e0bffd17 	ldw	r2,-12(fp)
 800f58c:	10800017 	ldw	r2,0(r2)
 800f590:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800f594:	e0bffc17 	ldw	r2,-16(fp)
 800f598:	10800a04 	addi	r2,r2,40
 800f59c:	1009883a 	mov	r4,r2
 800f5a0:	e17ffe17 	ldw	r5,-8(fp)
 800f5a4:	e1bfff17 	ldw	r6,-4(fp)
 800f5a8:	800f9880 	call	800f988 <altera_avalon_jtag_uart_ioctl>
}
 800f5ac:	e037883a 	mov	sp,fp
 800f5b0:	dfc00117 	ldw	ra,4(sp)
 800f5b4:	df000017 	ldw	fp,0(sp)
 800f5b8:	dec00204 	addi	sp,sp,8
 800f5bc:	f800283a 	ret

0800f5c0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800f5c0:	defffa04 	addi	sp,sp,-24
 800f5c4:	dfc00515 	stw	ra,20(sp)
 800f5c8:	df000415 	stw	fp,16(sp)
 800f5cc:	df000404 	addi	fp,sp,16
 800f5d0:	e13ffd15 	stw	r4,-12(fp)
 800f5d4:	e17ffe15 	stw	r5,-8(fp)
 800f5d8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800f5dc:	e0bffd17 	ldw	r2,-12(fp)
 800f5e0:	00c00044 	movi	r3,1
 800f5e4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800f5e8:	e0bffd17 	ldw	r2,-12(fp)
 800f5ec:	10800017 	ldw	r2,0(r2)
 800f5f0:	10800104 	addi	r2,r2,4
 800f5f4:	e0fffd17 	ldw	r3,-12(fp)
 800f5f8:	18c00817 	ldw	r3,32(r3)
 800f5fc:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800f600:	e0fffe17 	ldw	r3,-8(fp)
 800f604:	e0bfff17 	ldw	r2,-4(fp)
 800f608:	d8000015 	stw	zero,0(sp)
 800f60c:	1809883a 	mov	r4,r3
 800f610:	100b883a 	mov	r5,r2
 800f614:	01820074 	movhi	r6,2049
 800f618:	31bda004 	addi	r6,r6,-2432
 800f61c:	e1fffd17 	ldw	r7,-12(fp)
 800f620:	80103080 	call	8010308 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800f624:	e0bffd17 	ldw	r2,-12(fp)
 800f628:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800f62c:	e0bffd17 	ldw	r2,-12(fp)
 800f630:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800f634:	00820074 	movhi	r2,2049
 800f638:	10948b04 	addi	r2,r2,21036
 800f63c:	10800017 	ldw	r2,0(r2)
 800f640:	1809883a 	mov	r4,r3
 800f644:	100b883a 	mov	r5,r2
 800f648:	01820074 	movhi	r6,2049
 800f64c:	31be1f04 	addi	r6,r6,-1924
 800f650:	e1fffd17 	ldw	r7,-12(fp)
 800f654:	800fe940 	call	800fe94 <alt_alarm_start>
 800f658:	1000040e 	bge	r2,zero,800f66c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800f65c:	e0bffd17 	ldw	r2,-12(fp)
 800f660:	00e00034 	movhi	r3,32768
 800f664:	18ffffc4 	addi	r3,r3,-1
 800f668:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800f66c:	e037883a 	mov	sp,fp
 800f670:	dfc00117 	ldw	ra,4(sp)
 800f674:	df000017 	ldw	fp,0(sp)
 800f678:	dec00204 	addi	sp,sp,8
 800f67c:	f800283a 	ret

0800f680 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800f680:	defff804 	addi	sp,sp,-32
 800f684:	df000715 	stw	fp,28(sp)
 800f688:	df000704 	addi	fp,sp,28
 800f68c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800f690:	e0bfff17 	ldw	r2,-4(fp)
 800f694:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 800f698:	e0bffb17 	ldw	r2,-20(fp)
 800f69c:	10800017 	ldw	r2,0(r2)
 800f6a0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800f6a4:	e0bffc17 	ldw	r2,-16(fp)
 800f6a8:	10800104 	addi	r2,r2,4
 800f6ac:	10800037 	ldwio	r2,0(r2)
 800f6b0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 800f6b4:	e0bffd17 	ldw	r2,-12(fp)
 800f6b8:	1080c00c 	andi	r2,r2,768
 800f6bc:	1000011e 	bne	r2,zero,800f6c4 <altera_avalon_jtag_uart_irq+0x44>
      break;
 800f6c0:	00006a06 	br	800f86c <altera_avalon_jtag_uart_irq+0x1ec>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 800f6c4:	e0bffd17 	ldw	r2,-12(fp)
 800f6c8:	1080400c 	andi	r2,r2,256
 800f6cc:	10003226 	beq	r2,zero,800f798 <altera_avalon_jtag_uart_irq+0x118>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 800f6d0:	00800074 	movhi	r2,1
 800f6d4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800f6d8:	e0bffb17 	ldw	r2,-20(fp)
 800f6dc:	10800a17 	ldw	r2,40(r2)
 800f6e0:	10800044 	addi	r2,r2,1
 800f6e4:	1081ffcc 	andi	r2,r2,2047
 800f6e8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 800f6ec:	e0bffb17 	ldw	r2,-20(fp)
 800f6f0:	10c00b17 	ldw	r3,44(r2)
 800f6f4:	e0bffe17 	ldw	r2,-8(fp)
 800f6f8:	1880011e 	bne	r3,r2,800f700 <altera_avalon_jtag_uart_irq+0x80>
          break;
 800f6fc:	00001506 	br	800f754 <altera_avalon_jtag_uart_irq+0xd4>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 800f700:	e0bffc17 	ldw	r2,-16(fp)
 800f704:	10800037 	ldwio	r2,0(r2)
 800f708:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 800f70c:	e0bff917 	ldw	r2,-28(fp)
 800f710:	10a0000c 	andi	r2,r2,32768
 800f714:	1000011e 	bne	r2,zero,800f71c <altera_avalon_jtag_uart_irq+0x9c>
          break;
 800f718:	00000e06 	br	800f754 <altera_avalon_jtag_uart_irq+0xd4>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800f71c:	e0bffb17 	ldw	r2,-20(fp)
 800f720:	10800a17 	ldw	r2,40(r2)
 800f724:	e0fff917 	ldw	r3,-28(fp)
 800f728:	e13ffb17 	ldw	r4,-20(fp)
 800f72c:	2085883a 	add	r2,r4,r2
 800f730:	10800e04 	addi	r2,r2,56
 800f734:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800f738:	e0bffb17 	ldw	r2,-20(fp)
 800f73c:	10800a17 	ldw	r2,40(r2)
 800f740:	10800044 	addi	r2,r2,1
 800f744:	10c1ffcc 	andi	r3,r2,2047
 800f748:	e0bffb17 	ldw	r2,-20(fp)
 800f74c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 800f750:	003fe106 	br	800f6d8 <__alt_data_end+0xf800f6d8>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 800f754:	e0bff917 	ldw	r2,-28(fp)
 800f758:	10bfffec 	andhi	r2,r2,65535
 800f75c:	10000e26 	beq	r2,zero,800f798 <altera_avalon_jtag_uart_irq+0x118>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800f760:	e0bffb17 	ldw	r2,-20(fp)
 800f764:	10c00817 	ldw	r3,32(r2)
 800f768:	00bfff84 	movi	r2,-2
 800f76c:	1886703a 	and	r3,r3,r2
 800f770:	e0bffb17 	ldw	r2,-20(fp)
 800f774:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 800f778:	e0bffc17 	ldw	r2,-16(fp)
 800f77c:	10800104 	addi	r2,r2,4
 800f780:	e0fffb17 	ldw	r3,-20(fp)
 800f784:	18c00817 	ldw	r3,32(r3)
 800f788:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800f78c:	e0bffc17 	ldw	r2,-16(fp)
 800f790:	10800104 	addi	r2,r2,4
 800f794:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800f798:	e0bffd17 	ldw	r2,-12(fp)
 800f79c:	1080800c 	andi	r2,r2,512
 800f7a0:	10003126 	beq	r2,zero,800f868 <altera_avalon_jtag_uart_irq+0x1e8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 800f7a4:	e0bffd17 	ldw	r2,-12(fp)
 800f7a8:	1004d43a 	srli	r2,r2,16
 800f7ac:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 800f7b0:	00001406 	br	800f804 <altera_avalon_jtag_uart_irq+0x184>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 800f7b4:	e0bffc17 	ldw	r2,-16(fp)
 800f7b8:	e0fffb17 	ldw	r3,-20(fp)
 800f7bc:	18c00d17 	ldw	r3,52(r3)
 800f7c0:	e13ffb17 	ldw	r4,-20(fp)
 800f7c4:	20c7883a 	add	r3,r4,r3
 800f7c8:	18c20e04 	addi	r3,r3,2104
 800f7cc:	18c00003 	ldbu	r3,0(r3)
 800f7d0:	18c03fcc 	andi	r3,r3,255
 800f7d4:	18c0201c 	xori	r3,r3,128
 800f7d8:	18ffe004 	addi	r3,r3,-128
 800f7dc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800f7e0:	e0bffb17 	ldw	r2,-20(fp)
 800f7e4:	10800d17 	ldw	r2,52(r2)
 800f7e8:	10800044 	addi	r2,r2,1
 800f7ec:	10c1ffcc 	andi	r3,r2,2047
 800f7f0:	e0bffb17 	ldw	r2,-20(fp)
 800f7f4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800f7f8:	e0bffa17 	ldw	r2,-24(fp)
 800f7fc:	10bfffc4 	addi	r2,r2,-1
 800f800:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 800f804:	e0bffa17 	ldw	r2,-24(fp)
 800f808:	10000526 	beq	r2,zero,800f820 <altera_avalon_jtag_uart_irq+0x1a0>
 800f80c:	e0bffb17 	ldw	r2,-20(fp)
 800f810:	10c00d17 	ldw	r3,52(r2)
 800f814:	e0bffb17 	ldw	r2,-20(fp)
 800f818:	10800c17 	ldw	r2,48(r2)
 800f81c:	18bfe51e 	bne	r3,r2,800f7b4 <__alt_data_end+0xf800f7b4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 800f820:	e0bffa17 	ldw	r2,-24(fp)
 800f824:	10001026 	beq	r2,zero,800f868 <altera_avalon_jtag_uart_irq+0x1e8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800f828:	e0bffb17 	ldw	r2,-20(fp)
 800f82c:	10c00817 	ldw	r3,32(r2)
 800f830:	00bfff44 	movi	r2,-3
 800f834:	1886703a 	and	r3,r3,r2
 800f838:	e0bffb17 	ldw	r2,-20(fp)
 800f83c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800f840:	e0bffb17 	ldw	r2,-20(fp)
 800f844:	10800017 	ldw	r2,0(r2)
 800f848:	10800104 	addi	r2,r2,4
 800f84c:	e0fffb17 	ldw	r3,-20(fp)
 800f850:	18c00817 	ldw	r3,32(r3)
 800f854:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800f858:	e0bffc17 	ldw	r2,-16(fp)
 800f85c:	10800104 	addi	r2,r2,4
 800f860:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 800f864:	003f8f06 	br	800f6a4 <__alt_data_end+0xf800f6a4>
 800f868:	003f8e06 	br	800f6a4 <__alt_data_end+0xf800f6a4>
}
 800f86c:	e037883a 	mov	sp,fp
 800f870:	df000017 	ldw	fp,0(sp)
 800f874:	dec00104 	addi	sp,sp,4
 800f878:	f800283a 	ret

0800f87c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800f87c:	defff804 	addi	sp,sp,-32
 800f880:	df000715 	stw	fp,28(sp)
 800f884:	df000704 	addi	fp,sp,28
 800f888:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 800f88c:	e0bffb17 	ldw	r2,-20(fp)
 800f890:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 800f894:	e0bff917 	ldw	r2,-28(fp)
 800f898:	10800017 	ldw	r2,0(r2)
 800f89c:	10800104 	addi	r2,r2,4
 800f8a0:	10800037 	ldwio	r2,0(r2)
 800f8a4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 800f8a8:	e0bffa17 	ldw	r2,-24(fp)
 800f8ac:	1081000c 	andi	r2,r2,1024
 800f8b0:	10000a26 	beq	r2,zero,800f8dc <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 800f8b4:	e0bff917 	ldw	r2,-28(fp)
 800f8b8:	10800017 	ldw	r2,0(r2)
 800f8bc:	10800104 	addi	r2,r2,4
 800f8c0:	e0fff917 	ldw	r3,-28(fp)
 800f8c4:	18c00817 	ldw	r3,32(r3)
 800f8c8:	18c10014 	ori	r3,r3,1024
 800f8cc:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 800f8d0:	e0bff917 	ldw	r2,-28(fp)
 800f8d4:	10000915 	stw	zero,36(r2)
 800f8d8:	00000a06 	br	800f904 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800f8dc:	e0bff917 	ldw	r2,-28(fp)
 800f8e0:	10800917 	ldw	r2,36(r2)
 800f8e4:	00e00034 	movhi	r3,32768
 800f8e8:	18ffff04 	addi	r3,r3,-4
 800f8ec:	18800536 	bltu	r3,r2,800f904 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
 800f8f0:	e0bff917 	ldw	r2,-28(fp)
 800f8f4:	10800917 	ldw	r2,36(r2)
 800f8f8:	10c00044 	addi	r3,r2,1
 800f8fc:	e0bff917 	ldw	r2,-28(fp)
 800f900:	10c00915 	stw	r3,36(r2)
 800f904:	00820074 	movhi	r2,2049
 800f908:	10948b04 	addi	r2,r2,21036
 800f90c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800f910:	e037883a 	mov	sp,fp
 800f914:	df000017 	ldw	fp,0(sp)
 800f918:	dec00104 	addi	sp,sp,4
 800f91c:	f800283a 	ret

0800f920 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800f920:	defffd04 	addi	sp,sp,-12
 800f924:	df000215 	stw	fp,8(sp)
 800f928:	df000204 	addi	fp,sp,8
 800f92c:	e13ffe15 	stw	r4,-8(fp)
 800f930:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800f934:	00000506 	br	800f94c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 800f938:	e0bfff17 	ldw	r2,-4(fp)
 800f93c:	1090000c 	andi	r2,r2,16384
 800f940:	10000226 	beq	r2,zero,800f94c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 800f944:	00bffd44 	movi	r2,-11
 800f948:	00000b06 	br	800f978 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800f94c:	e0bffe17 	ldw	r2,-8(fp)
 800f950:	10c00d17 	ldw	r3,52(r2)
 800f954:	e0bffe17 	ldw	r2,-8(fp)
 800f958:	10800c17 	ldw	r2,48(r2)
 800f95c:	18800526 	beq	r3,r2,800f974 <altera_avalon_jtag_uart_close+0x54>
 800f960:	e0bffe17 	ldw	r2,-8(fp)
 800f964:	10c00917 	ldw	r3,36(r2)
 800f968:	e0bffe17 	ldw	r2,-8(fp)
 800f96c:	10800117 	ldw	r2,4(r2)
 800f970:	18bff136 	bltu	r3,r2,800f938 <__alt_data_end+0xf800f938>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800f974:	0005883a 	mov	r2,zero
}
 800f978:	e037883a 	mov	sp,fp
 800f97c:	df000017 	ldw	fp,0(sp)
 800f980:	dec00104 	addi	sp,sp,4
 800f984:	f800283a 	ret

0800f988 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 800f988:	defffa04 	addi	sp,sp,-24
 800f98c:	df000515 	stw	fp,20(sp)
 800f990:	df000504 	addi	fp,sp,20
 800f994:	e13ffd15 	stw	r4,-12(fp)
 800f998:	e17ffe15 	stw	r5,-8(fp)
 800f99c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 800f9a0:	00bff9c4 	movi	r2,-25
 800f9a4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 800f9a8:	e0bffe17 	ldw	r2,-8(fp)
 800f9ac:	10da8060 	cmpeqi	r3,r2,27137
 800f9b0:	1800031e 	bne	r3,zero,800f9c0 <altera_avalon_jtag_uart_ioctl+0x38>
 800f9b4:	109a80a0 	cmpeqi	r2,r2,27138
 800f9b8:	1000191e 	bne	r2,zero,800fa20 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 800f9bc:	00002806 	br	800fa60 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 800f9c0:	e0bffd17 	ldw	r2,-12(fp)
 800f9c4:	10c00117 	ldw	r3,4(r2)
 800f9c8:	00a00034 	movhi	r2,32768
 800f9cc:	10bfffc4 	addi	r2,r2,-1
 800f9d0:	18801226 	beq	r3,r2,800fa1c <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 800f9d4:	e0bfff17 	ldw	r2,-4(fp)
 800f9d8:	10800017 	ldw	r2,0(r2)
 800f9dc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 800f9e0:	e0bffc17 	ldw	r2,-16(fp)
 800f9e4:	10800090 	cmplti	r2,r2,2
 800f9e8:	1000061e 	bne	r2,zero,800fa04 <altera_avalon_jtag_uart_ioctl+0x7c>
 800f9ec:	e0fffc17 	ldw	r3,-16(fp)
 800f9f0:	00a00034 	movhi	r2,32768
 800f9f4:	10bfffc4 	addi	r2,r2,-1
 800f9f8:	18800226 	beq	r3,r2,800fa04 <altera_avalon_jtag_uart_ioctl+0x7c>
 800f9fc:	e0bffc17 	ldw	r2,-16(fp)
 800fa00:	00000206 	br	800fa0c <altera_avalon_jtag_uart_ioctl+0x84>
 800fa04:	00a00034 	movhi	r2,32768
 800fa08:	10bfff84 	addi	r2,r2,-2
 800fa0c:	e0fffd17 	ldw	r3,-12(fp)
 800fa10:	18800115 	stw	r2,4(r3)
      rc = 0;
 800fa14:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800fa18:	00001106 	br	800fa60 <altera_avalon_jtag_uart_ioctl+0xd8>
 800fa1c:	00001006 	br	800fa60 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 800fa20:	e0bffd17 	ldw	r2,-12(fp)
 800fa24:	10c00117 	ldw	r3,4(r2)
 800fa28:	00a00034 	movhi	r2,32768
 800fa2c:	10bfffc4 	addi	r2,r2,-1
 800fa30:	18800a26 	beq	r3,r2,800fa5c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 800fa34:	e0bffd17 	ldw	r2,-12(fp)
 800fa38:	10c00917 	ldw	r3,36(r2)
 800fa3c:	e0bffd17 	ldw	r2,-12(fp)
 800fa40:	10800117 	ldw	r2,4(r2)
 800fa44:	1885803a 	cmpltu	r2,r3,r2
 800fa48:	10c03fcc 	andi	r3,r2,255
 800fa4c:	e0bfff17 	ldw	r2,-4(fp)
 800fa50:	10c00015 	stw	r3,0(r2)
      rc = 0;
 800fa54:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800fa58:	00000006 	br	800fa5c <altera_avalon_jtag_uart_ioctl+0xd4>
 800fa5c:	0001883a 	nop

  default:
    break;
  }

  return rc;
 800fa60:	e0bffb17 	ldw	r2,-20(fp)
}
 800fa64:	e037883a 	mov	sp,fp
 800fa68:	df000017 	ldw	fp,0(sp)
 800fa6c:	dec00104 	addi	sp,sp,4
 800fa70:	f800283a 	ret

0800fa74 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800fa74:	defff304 	addi	sp,sp,-52
 800fa78:	dfc00c15 	stw	ra,48(sp)
 800fa7c:	df000b15 	stw	fp,44(sp)
 800fa80:	df000b04 	addi	fp,sp,44
 800fa84:	e13ffc15 	stw	r4,-16(fp)
 800fa88:	e17ffd15 	stw	r5,-12(fp)
 800fa8c:	e1bffe15 	stw	r6,-8(fp)
 800fa90:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 800fa94:	e0bffd17 	ldw	r2,-12(fp)
 800fa98:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800fa9c:	00004906 	br	800fbc4 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800faa0:	e0bffc17 	ldw	r2,-16(fp)
 800faa4:	10800a17 	ldw	r2,40(r2)
 800faa8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 800faac:	e0bffc17 	ldw	r2,-16(fp)
 800fab0:	10800b17 	ldw	r2,44(r2)
 800fab4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 800fab8:	e0fff717 	ldw	r3,-36(fp)
 800fabc:	e0bff817 	ldw	r2,-32(fp)
 800fac0:	18800536 	bltu	r3,r2,800fad8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 800fac4:	e0fff717 	ldw	r3,-36(fp)
 800fac8:	e0bff817 	ldw	r2,-32(fp)
 800facc:	1885c83a 	sub	r2,r3,r2
 800fad0:	e0bff615 	stw	r2,-40(fp)
 800fad4:	00000406 	br	800fae8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 800fad8:	00c20004 	movi	r3,2048
 800fadc:	e0bff817 	ldw	r2,-32(fp)
 800fae0:	1885c83a 	sub	r2,r3,r2
 800fae4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800fae8:	e0bff617 	ldw	r2,-40(fp)
 800faec:	1000011e 	bne	r2,zero,800faf4 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 800faf0:	00001d06 	br	800fb68 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 800faf4:	e0fffe17 	ldw	r3,-8(fp)
 800faf8:	e0bff617 	ldw	r2,-40(fp)
 800fafc:	1880022e 	bgeu	r3,r2,800fb08 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 800fb00:	e0bffe17 	ldw	r2,-8(fp)
 800fb04:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 800fb08:	e0bff817 	ldw	r2,-32(fp)
 800fb0c:	10800e04 	addi	r2,r2,56
 800fb10:	e0fffc17 	ldw	r3,-16(fp)
 800fb14:	1885883a 	add	r2,r3,r2
 800fb18:	e13ff517 	ldw	r4,-44(fp)
 800fb1c:	100b883a 	mov	r5,r2
 800fb20:	e1bff617 	ldw	r6,-40(fp)
 800fb24:	80079380 	call	8007938 <memcpy>
      ptr   += n;
 800fb28:	e0fff517 	ldw	r3,-44(fp)
 800fb2c:	e0bff617 	ldw	r2,-40(fp)
 800fb30:	1885883a 	add	r2,r3,r2
 800fb34:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 800fb38:	e0fffe17 	ldw	r3,-8(fp)
 800fb3c:	e0bff617 	ldw	r2,-40(fp)
 800fb40:	1885c83a 	sub	r2,r3,r2
 800fb44:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800fb48:	e0fff817 	ldw	r3,-32(fp)
 800fb4c:	e0bff617 	ldw	r2,-40(fp)
 800fb50:	1885883a 	add	r2,r3,r2
 800fb54:	10c1ffcc 	andi	r3,r2,2047
 800fb58:	e0bffc17 	ldw	r2,-16(fp)
 800fb5c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800fb60:	e0bffe17 	ldw	r2,-8(fp)
 800fb64:	00bfce16 	blt	zero,r2,800faa0 <__alt_data_end+0xf800faa0>

    /* If we read any data then return it */
    if (ptr != buffer)
 800fb68:	e0fff517 	ldw	r3,-44(fp)
 800fb6c:	e0bffd17 	ldw	r2,-12(fp)
 800fb70:	18800126 	beq	r3,r2,800fb78 <altera_avalon_jtag_uart_read+0x104>
      break;
 800fb74:	00001506 	br	800fbcc <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 800fb78:	e0bfff17 	ldw	r2,-4(fp)
 800fb7c:	1090000c 	andi	r2,r2,16384
 800fb80:	10000126 	beq	r2,zero,800fb88 <altera_avalon_jtag_uart_read+0x114>
      break;
 800fb84:	00001106 	br	800fbcc <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 800fb88:	0001883a 	nop
 800fb8c:	e0bffc17 	ldw	r2,-16(fp)
 800fb90:	10c00a17 	ldw	r3,40(r2)
 800fb94:	e0bff717 	ldw	r2,-36(fp)
 800fb98:	1880051e 	bne	r3,r2,800fbb0 <altera_avalon_jtag_uart_read+0x13c>
 800fb9c:	e0bffc17 	ldw	r2,-16(fp)
 800fba0:	10c00917 	ldw	r3,36(r2)
 800fba4:	e0bffc17 	ldw	r2,-16(fp)
 800fba8:	10800117 	ldw	r2,4(r2)
 800fbac:	18bff736 	bltu	r3,r2,800fb8c <__alt_data_end+0xf800fb8c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 800fbb0:	e0bffc17 	ldw	r2,-16(fp)
 800fbb4:	10c00a17 	ldw	r3,40(r2)
 800fbb8:	e0bff717 	ldw	r2,-36(fp)
 800fbbc:	1880011e 	bne	r3,r2,800fbc4 <altera_avalon_jtag_uart_read+0x150>
      break;
 800fbc0:	00000206 	br	800fbcc <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800fbc4:	e0bffe17 	ldw	r2,-8(fp)
 800fbc8:	00bfb516 	blt	zero,r2,800faa0 <__alt_data_end+0xf800faa0>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 800fbcc:	e0fff517 	ldw	r3,-44(fp)
 800fbd0:	e0bffd17 	ldw	r2,-12(fp)
 800fbd4:	18801726 	beq	r3,r2,800fc34 <altera_avalon_jtag_uart_read+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800fbd8:	0005303a 	rdctl	r2,status
 800fbdc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800fbe0:	e0fffa17 	ldw	r3,-24(fp)
 800fbe4:	00bfff84 	movi	r2,-2
 800fbe8:	1884703a 	and	r2,r3,r2
 800fbec:	1001703a 	wrctl	status,r2
  
  return context;
 800fbf0:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 800fbf4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800fbf8:	e0bffc17 	ldw	r2,-16(fp)
 800fbfc:	10800817 	ldw	r2,32(r2)
 800fc00:	10c00054 	ori	r3,r2,1
 800fc04:	e0bffc17 	ldw	r2,-16(fp)
 800fc08:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800fc0c:	e0bffc17 	ldw	r2,-16(fp)
 800fc10:	10800017 	ldw	r2,0(r2)
 800fc14:	10800104 	addi	r2,r2,4
 800fc18:	e0fffc17 	ldw	r3,-16(fp)
 800fc1c:	18c00817 	ldw	r3,32(r3)
 800fc20:	10c00035 	stwio	r3,0(r2)
 800fc24:	e0bff917 	ldw	r2,-28(fp)
 800fc28:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800fc2c:	e0bffb17 	ldw	r2,-20(fp)
 800fc30:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 800fc34:	e0fff517 	ldw	r3,-44(fp)
 800fc38:	e0bffd17 	ldw	r2,-12(fp)
 800fc3c:	18800426 	beq	r3,r2,800fc50 <altera_avalon_jtag_uart_read+0x1dc>
    return ptr - buffer;
 800fc40:	e0fff517 	ldw	r3,-44(fp)
 800fc44:	e0bffd17 	ldw	r2,-12(fp)
 800fc48:	1885c83a 	sub	r2,r3,r2
 800fc4c:	00000606 	br	800fc68 <altera_avalon_jtag_uart_read+0x1f4>
  else if (flags & O_NONBLOCK)
 800fc50:	e0bfff17 	ldw	r2,-4(fp)
 800fc54:	1090000c 	andi	r2,r2,16384
 800fc58:	10000226 	beq	r2,zero,800fc64 <altera_avalon_jtag_uart_read+0x1f0>
    return -EWOULDBLOCK;
 800fc5c:	00bffd44 	movi	r2,-11
 800fc60:	00000106 	br	800fc68 <altera_avalon_jtag_uart_read+0x1f4>
  else
    return -EIO;
 800fc64:	00bffec4 	movi	r2,-5
}
 800fc68:	e037883a 	mov	sp,fp
 800fc6c:	dfc00117 	ldw	ra,4(sp)
 800fc70:	df000017 	ldw	fp,0(sp)
 800fc74:	dec00204 	addi	sp,sp,8
 800fc78:	f800283a 	ret

0800fc7c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 800fc7c:	defff304 	addi	sp,sp,-52
 800fc80:	dfc00c15 	stw	ra,48(sp)
 800fc84:	df000b15 	stw	fp,44(sp)
 800fc88:	df000b04 	addi	fp,sp,44
 800fc8c:	e13ffc15 	stw	r4,-16(fp)
 800fc90:	e17ffd15 	stw	r5,-12(fp)
 800fc94:	e1bffe15 	stw	r6,-8(fp)
 800fc98:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800fc9c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 800fca0:	e0bffd17 	ldw	r2,-12(fp)
 800fca4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800fca8:	00003906 	br	800fd90 <altera_avalon_jtag_uart_write+0x114>
 800fcac:	00003806 	br	800fd90 <altera_avalon_jtag_uart_write+0x114>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800fcb0:	e0bffc17 	ldw	r2,-16(fp)
 800fcb4:	10800c17 	ldw	r2,48(r2)
 800fcb8:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 800fcbc:	e0bffc17 	ldw	r2,-16(fp)
 800fcc0:	10800d17 	ldw	r2,52(r2)
 800fcc4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 800fcc8:	e0fff817 	ldw	r3,-32(fp)
 800fccc:	e0bff517 	ldw	r2,-44(fp)
 800fcd0:	1880062e 	bgeu	r3,r2,800fcec <altera_avalon_jtag_uart_write+0x70>
        n = out - 1 - in;
 800fcd4:	e0fff517 	ldw	r3,-44(fp)
 800fcd8:	e0bff817 	ldw	r2,-32(fp)
 800fcdc:	1885c83a 	sub	r2,r3,r2
 800fce0:	10bfffc4 	addi	r2,r2,-1
 800fce4:	e0bff615 	stw	r2,-40(fp)
 800fce8:	00000b06 	br	800fd18 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 800fcec:	e0bff517 	ldw	r2,-44(fp)
 800fcf0:	10000526 	beq	r2,zero,800fd08 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 800fcf4:	00c20004 	movi	r3,2048
 800fcf8:	e0bff817 	ldw	r2,-32(fp)
 800fcfc:	1885c83a 	sub	r2,r3,r2
 800fd00:	e0bff615 	stw	r2,-40(fp)
 800fd04:	00000406 	br	800fd18 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 800fd08:	00c1ffc4 	movi	r3,2047
 800fd0c:	e0bff817 	ldw	r2,-32(fp)
 800fd10:	1885c83a 	sub	r2,r3,r2
 800fd14:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800fd18:	e0bff617 	ldw	r2,-40(fp)
 800fd1c:	1000011e 	bne	r2,zero,800fd24 <altera_avalon_jtag_uart_write+0xa8>
        break;
 800fd20:	00001d06 	br	800fd98 <altera_avalon_jtag_uart_write+0x11c>

      if (n > count)
 800fd24:	e0fffe17 	ldw	r3,-8(fp)
 800fd28:	e0bff617 	ldw	r2,-40(fp)
 800fd2c:	1880022e 	bgeu	r3,r2,800fd38 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 800fd30:	e0bffe17 	ldw	r2,-8(fp)
 800fd34:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 800fd38:	e0bff817 	ldw	r2,-32(fp)
 800fd3c:	10820e04 	addi	r2,r2,2104
 800fd40:	e0fffc17 	ldw	r3,-16(fp)
 800fd44:	1885883a 	add	r2,r3,r2
 800fd48:	1009883a 	mov	r4,r2
 800fd4c:	e17ffd17 	ldw	r5,-12(fp)
 800fd50:	e1bff617 	ldw	r6,-40(fp)
 800fd54:	80079380 	call	8007938 <memcpy>
      ptr   += n;
 800fd58:	e0fffd17 	ldw	r3,-12(fp)
 800fd5c:	e0bff617 	ldw	r2,-40(fp)
 800fd60:	1885883a 	add	r2,r3,r2
 800fd64:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 800fd68:	e0fffe17 	ldw	r3,-8(fp)
 800fd6c:	e0bff617 	ldw	r2,-40(fp)
 800fd70:	1885c83a 	sub	r2,r3,r2
 800fd74:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800fd78:	e0fff817 	ldw	r3,-32(fp)
 800fd7c:	e0bff617 	ldw	r2,-40(fp)
 800fd80:	1885883a 	add	r2,r3,r2
 800fd84:	10c1ffcc 	andi	r3,r2,2047
 800fd88:	e0bffc17 	ldw	r2,-16(fp)
 800fd8c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800fd90:	e0bffe17 	ldw	r2,-8(fp)
 800fd94:	00bfc616 	blt	zero,r2,800fcb0 <__alt_data_end+0xf800fcb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800fd98:	0005303a 	rdctl	r2,status
 800fd9c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800fda0:	e0fffa17 	ldw	r3,-24(fp)
 800fda4:	00bfff84 	movi	r2,-2
 800fda8:	1884703a 	and	r2,r3,r2
 800fdac:	1001703a 	wrctl	status,r2
  
  return context;
 800fdb0:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 800fdb4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800fdb8:	e0bffc17 	ldw	r2,-16(fp)
 800fdbc:	10800817 	ldw	r2,32(r2)
 800fdc0:	10c00094 	ori	r3,r2,2
 800fdc4:	e0bffc17 	ldw	r2,-16(fp)
 800fdc8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800fdcc:	e0bffc17 	ldw	r2,-16(fp)
 800fdd0:	10800017 	ldw	r2,0(r2)
 800fdd4:	10800104 	addi	r2,r2,4
 800fdd8:	e0fffc17 	ldw	r3,-16(fp)
 800fddc:	18c00817 	ldw	r3,32(r3)
 800fde0:	10c00035 	stwio	r3,0(r2)
 800fde4:	e0bff917 	ldw	r2,-28(fp)
 800fde8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800fdec:	e0bffb17 	ldw	r2,-20(fp)
 800fdf0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800fdf4:	e0bffe17 	ldw	r2,-8(fp)
 800fdf8:	0080120e 	bge	zero,r2,800fe44 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 800fdfc:	e0bfff17 	ldw	r2,-4(fp)
 800fe00:	1090000c 	andi	r2,r2,16384
 800fe04:	10000126 	beq	r2,zero,800fe0c <altera_avalon_jtag_uart_write+0x190>
        break;
 800fe08:	00001006 	br	800fe4c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800fe0c:	0001883a 	nop
 800fe10:	e0bffc17 	ldw	r2,-16(fp)
 800fe14:	10c00d17 	ldw	r3,52(r2)
 800fe18:	e0bff517 	ldw	r2,-44(fp)
 800fe1c:	1880051e 	bne	r3,r2,800fe34 <altera_avalon_jtag_uart_write+0x1b8>
 800fe20:	e0bffc17 	ldw	r2,-16(fp)
 800fe24:	10c00917 	ldw	r3,36(r2)
 800fe28:	e0bffc17 	ldw	r2,-16(fp)
 800fe2c:	10800117 	ldw	r2,4(r2)
 800fe30:	18bff736 	bltu	r3,r2,800fe10 <__alt_data_end+0xf800fe10>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 800fe34:	e0bffc17 	ldw	r2,-16(fp)
 800fe38:	10800917 	ldw	r2,36(r2)
 800fe3c:	10000126 	beq	r2,zero,800fe44 <altera_avalon_jtag_uart_write+0x1c8>
         break;
 800fe40:	00000206 	br	800fe4c <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 800fe44:	e0bffe17 	ldw	r2,-8(fp)
 800fe48:	00bf9816 	blt	zero,r2,800fcac <__alt_data_end+0xf800fcac>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 800fe4c:	e0fffd17 	ldw	r3,-12(fp)
 800fe50:	e0bff717 	ldw	r2,-36(fp)
 800fe54:	18800426 	beq	r3,r2,800fe68 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 800fe58:	e0fffd17 	ldw	r3,-12(fp)
 800fe5c:	e0bff717 	ldw	r2,-36(fp)
 800fe60:	1885c83a 	sub	r2,r3,r2
 800fe64:	00000606 	br	800fe80 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 800fe68:	e0bfff17 	ldw	r2,-4(fp)
 800fe6c:	1090000c 	andi	r2,r2,16384
 800fe70:	10000226 	beq	r2,zero,800fe7c <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 800fe74:	00bffd44 	movi	r2,-11
 800fe78:	00000106 	br	800fe80 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 800fe7c:	00bffec4 	movi	r2,-5
}
 800fe80:	e037883a 	mov	sp,fp
 800fe84:	dfc00117 	ldw	ra,4(sp)
 800fe88:	df000017 	ldw	fp,0(sp)
 800fe8c:	dec00204 	addi	sp,sp,8
 800fe90:	f800283a 	ret

0800fe94 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 800fe94:	defff504 	addi	sp,sp,-44
 800fe98:	df000a15 	stw	fp,40(sp)
 800fe9c:	df000a04 	addi	fp,sp,40
 800fea0:	e13ffc15 	stw	r4,-16(fp)
 800fea4:	e17ffd15 	stw	r5,-12(fp)
 800fea8:	e1bffe15 	stw	r6,-8(fp)
 800feac:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 800feb0:	e03ff615 	stw	zero,-40(fp)
 800feb4:	00820074 	movhi	r2,2049
 800feb8:	10948b04 	addi	r2,r2,21036
 800febc:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 800fec0:	10003f26 	beq	r2,zero,800ffc0 <alt_alarm_start+0x12c>
  {
    if (alarm)
 800fec4:	e0bffc17 	ldw	r2,-16(fp)
 800fec8:	10003b26 	beq	r2,zero,800ffb8 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 800fecc:	e0bffc17 	ldw	r2,-16(fp)
 800fed0:	e0fffe17 	ldw	r3,-8(fp)
 800fed4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 800fed8:	e0bffc17 	ldw	r2,-16(fp)
 800fedc:	e0ffff17 	ldw	r3,-4(fp)
 800fee0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800fee4:	0005303a 	rdctl	r2,status
 800fee8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800feec:	e0fff817 	ldw	r3,-32(fp)
 800fef0:	00bfff84 	movi	r2,-2
 800fef4:	1884703a 	and	r2,r3,r2
 800fef8:	1001703a 	wrctl	status,r2
  
  return context;
 800fefc:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 800ff00:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 800ff04:	00820074 	movhi	r2,2049
 800ff08:	10948c04 	addi	r2,r2,21040
 800ff0c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 800ff10:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 800ff14:	e0fffd17 	ldw	r3,-12(fp)
 800ff18:	e0bff617 	ldw	r2,-40(fp)
 800ff1c:	1885883a 	add	r2,r3,r2
 800ff20:	10c00044 	addi	r3,r2,1
 800ff24:	e0bffc17 	ldw	r2,-16(fp)
 800ff28:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 800ff2c:	e0bffc17 	ldw	r2,-16(fp)
 800ff30:	10c00217 	ldw	r3,8(r2)
 800ff34:	e0bff617 	ldw	r2,-40(fp)
 800ff38:	1880042e 	bgeu	r3,r2,800ff4c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 800ff3c:	e0bffc17 	ldw	r2,-16(fp)
 800ff40:	00c00044 	movi	r3,1
 800ff44:	10c00405 	stb	r3,16(r2)
 800ff48:	00000206 	br	800ff54 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 800ff4c:	e0bffc17 	ldw	r2,-16(fp)
 800ff50:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 800ff54:	e0bffc17 	ldw	r2,-16(fp)
 800ff58:	00c20074 	movhi	r3,2049
 800ff5c:	18cdc204 	addi	r3,r3,14088
 800ff60:	e0fff915 	stw	r3,-28(fp)
 800ff64:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800ff68:	e0bffa17 	ldw	r2,-24(fp)
 800ff6c:	e0fff917 	ldw	r3,-28(fp)
 800ff70:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800ff74:	e0bff917 	ldw	r2,-28(fp)
 800ff78:	10c00017 	ldw	r3,0(r2)
 800ff7c:	e0bffa17 	ldw	r2,-24(fp)
 800ff80:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800ff84:	e0bff917 	ldw	r2,-28(fp)
 800ff88:	10800017 	ldw	r2,0(r2)
 800ff8c:	e0fffa17 	ldw	r3,-24(fp)
 800ff90:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800ff94:	e0bff917 	ldw	r2,-28(fp)
 800ff98:	e0fffa17 	ldw	r3,-24(fp)
 800ff9c:	10c00015 	stw	r3,0(r2)
 800ffa0:	e0bff717 	ldw	r2,-36(fp)
 800ffa4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ffa8:	e0bffb17 	ldw	r2,-20(fp)
 800ffac:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 800ffb0:	0005883a 	mov	r2,zero
 800ffb4:	00000306 	br	800ffc4 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 800ffb8:	00bffa84 	movi	r2,-22
 800ffbc:	00000106 	br	800ffc4 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 800ffc0:	00bfde84 	movi	r2,-134
  }
}
 800ffc4:	e037883a 	mov	sp,fp
 800ffc8:	df000017 	ldw	fp,0(sp)
 800ffcc:	dec00104 	addi	sp,sp,4
 800ffd0:	f800283a 	ret

0800ffd4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 800ffd4:	defffa04 	addi	sp,sp,-24
 800ffd8:	dfc00515 	stw	ra,20(sp)
 800ffdc:	df000415 	stw	fp,16(sp)
 800ffe0:	df000404 	addi	fp,sp,16
 800ffe4:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 800ffe8:	00800244 	movi	r2,9
 800ffec:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 800fff0:	e13ffd17 	ldw	r4,-12(fp)
 800fff4:	014003f4 	movhi	r5,15
 800fff8:	29509004 	addi	r5,r5,16960
 800fffc:	800c2080 	call	800c208 <__mulsi3>
 8010000:	0100bef4 	movhi	r4,763
 8010004:	213c2004 	addi	r4,r4,-3968
 8010008:	100b883a 	mov	r5,r2
 801000c:	800c1f80 	call	800c1f8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 8010010:	01200034 	movhi	r4,32768
 8010014:	213fffc4 	addi	r4,r4,-1
 8010018:	100b883a 	mov	r5,r2
 801001c:	800c1f80 	call	800c1f8 <__udivsi3>
 8010020:	e13fff17 	ldw	r4,-4(fp)
 8010024:	100b883a 	mov	r5,r2
 8010028:	800c1f80 	call	800c1f8 <__udivsi3>
 801002c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 8010030:	e0bffe17 	ldw	r2,-8(fp)
 8010034:	10002926 	beq	r2,zero,80100dc <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
 8010038:	e03ffc15 	stw	zero,-16(fp)
 801003c:	00001606 	br	8010098 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 8010040:	00a00034 	movhi	r2,32768
 8010044:	10bfffc4 	addi	r2,r2,-1
 8010048:	10bfffc4 	addi	r2,r2,-1
 801004c:	103ffe1e 	bne	r2,zero,8010048 <__alt_data_end+0xf8010048>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 8010050:	e13ffd17 	ldw	r4,-12(fp)
 8010054:	014003f4 	movhi	r5,15
 8010058:	29509004 	addi	r5,r5,16960
 801005c:	800c2080 	call	800c208 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 8010060:	0100bef4 	movhi	r4,763
 8010064:	213c2004 	addi	r4,r4,-3968
 8010068:	100b883a 	mov	r5,r2
 801006c:	800c1f80 	call	800c1f8 <__udivsi3>
 8010070:	01200034 	movhi	r4,32768
 8010074:	213fffc4 	addi	r4,r4,-1
 8010078:	100b883a 	mov	r5,r2
 801007c:	800c1f80 	call	800c1f8 <__udivsi3>
 8010080:	e0ffff17 	ldw	r3,-4(fp)
 8010084:	1885c83a 	sub	r2,r3,r2
 8010088:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 801008c:	e0bffc17 	ldw	r2,-16(fp)
 8010090:	10800044 	addi	r2,r2,1
 8010094:	e0bffc15 	stw	r2,-16(fp)
 8010098:	e0fffc17 	ldw	r3,-16(fp)
 801009c:	e0bffe17 	ldw	r2,-8(fp)
 80100a0:	18bfe716 	blt	r3,r2,8010040 <__alt_data_end+0xf8010040>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 80100a4:	e13ffd17 	ldw	r4,-12(fp)
 80100a8:	014003f4 	movhi	r5,15
 80100ac:	29509004 	addi	r5,r5,16960
 80100b0:	800c2080 	call	800c208 <__mulsi3>
 80100b4:	0100bef4 	movhi	r4,763
 80100b8:	213c2004 	addi	r4,r4,-3968
 80100bc:	100b883a 	mov	r5,r2
 80100c0:	800c1f80 	call	800c1f8 <__udivsi3>
 80100c4:	1009883a 	mov	r4,r2
 80100c8:	e17fff17 	ldw	r5,-4(fp)
 80100cc:	800c2080 	call	800c208 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 80100d0:	10bfffc4 	addi	r2,r2,-1
 80100d4:	103ffe1e 	bne	r2,zero,80100d0 <__alt_data_end+0xf80100d0>
 80100d8:	00000d06 	br	8010110 <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 80100dc:	e13ffd17 	ldw	r4,-12(fp)
 80100e0:	014003f4 	movhi	r5,15
 80100e4:	29509004 	addi	r5,r5,16960
 80100e8:	800c2080 	call	800c208 <__mulsi3>
 80100ec:	0100bef4 	movhi	r4,763
 80100f0:	213c2004 	addi	r4,r4,-3968
 80100f4:	100b883a 	mov	r5,r2
 80100f8:	800c1f80 	call	800c1f8 <__udivsi3>
 80100fc:	1009883a 	mov	r4,r2
 8010100:	e17fff17 	ldw	r5,-4(fp)
 8010104:	800c2080 	call	800c208 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8010108:	10bfffc4 	addi	r2,r2,-1
 801010c:	00bffe16 	blt	zero,r2,8010108 <__alt_data_end+0xf8010108>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 8010110:	0005883a 	mov	r2,zero
}
 8010114:	e037883a 	mov	sp,fp
 8010118:	dfc00117 	ldw	ra,4(sp)
 801011c:	df000017 	ldw	fp,0(sp)
 8010120:	dec00204 	addi	sp,sp,8
 8010124:	f800283a 	ret

08010128 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8010128:	deffff04 	addi	sp,sp,-4
 801012c:	df000015 	stw	fp,0(sp)
 8010130:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8010134:	e037883a 	mov	sp,fp
 8010138:	df000017 	ldw	fp,0(sp)
 801013c:	dec00104 	addi	sp,sp,4
 8010140:	f800283a 	ret

08010144 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8010144:	defffe04 	addi	sp,sp,-8
 8010148:	dfc00115 	stw	ra,4(sp)
 801014c:	df000015 	stw	fp,0(sp)
 8010150:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010154:	00820074 	movhi	r2,2049
 8010158:	108dbf04 	addi	r2,r2,14076
 801015c:	10800017 	ldw	r2,0(r2)
 8010160:	10000526 	beq	r2,zero,8010178 <alt_get_errno+0x34>
 8010164:	00820074 	movhi	r2,2049
 8010168:	108dbf04 	addi	r2,r2,14076
 801016c:	10800017 	ldw	r2,0(r2)
 8010170:	103ee83a 	callr	r2
 8010174:	00000206 	br	8010180 <alt_get_errno+0x3c>
 8010178:	00820074 	movhi	r2,2049
 801017c:	10948604 	addi	r2,r2,21016
}
 8010180:	e037883a 	mov	sp,fp
 8010184:	dfc00117 	ldw	ra,4(sp)
 8010188:	df000017 	ldw	fp,0(sp)
 801018c:	dec00204 	addi	sp,sp,8
 8010190:	f800283a 	ret

08010194 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8010194:	defffa04 	addi	sp,sp,-24
 8010198:	dfc00515 	stw	ra,20(sp)
 801019c:	df000415 	stw	fp,16(sp)
 80101a0:	df000404 	addi	fp,sp,16
 80101a4:	e13ffe15 	stw	r4,-8(fp)
 80101a8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 80101ac:	e0bffe17 	ldw	r2,-8(fp)
 80101b0:	10000326 	beq	r2,zero,80101c0 <alt_dev_llist_insert+0x2c>
 80101b4:	e0bffe17 	ldw	r2,-8(fp)
 80101b8:	10800217 	ldw	r2,8(r2)
 80101bc:	1000051e 	bne	r2,zero,80101d4 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
 80101c0:	80101440 	call	8010144 <alt_get_errno>
 80101c4:	00c00584 	movi	r3,22
 80101c8:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 80101cc:	00bffa84 	movi	r2,-22
 80101d0:	00001306 	br	8010220 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 80101d4:	e0bffe17 	ldw	r2,-8(fp)
 80101d8:	e0ffff17 	ldw	r3,-4(fp)
 80101dc:	e0fffc15 	stw	r3,-16(fp)
 80101e0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 80101e4:	e0bffd17 	ldw	r2,-12(fp)
 80101e8:	e0fffc17 	ldw	r3,-16(fp)
 80101ec:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 80101f0:	e0bffc17 	ldw	r2,-16(fp)
 80101f4:	10c00017 	ldw	r3,0(r2)
 80101f8:	e0bffd17 	ldw	r2,-12(fp)
 80101fc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8010200:	e0bffc17 	ldw	r2,-16(fp)
 8010204:	10800017 	ldw	r2,0(r2)
 8010208:	e0fffd17 	ldw	r3,-12(fp)
 801020c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8010210:	e0bffc17 	ldw	r2,-16(fp)
 8010214:	e0fffd17 	ldw	r3,-12(fp)
 8010218:	10c00015 	stw	r3,0(r2)

  return 0;  
 801021c:	0005883a 	mov	r2,zero
}
 8010220:	e037883a 	mov	sp,fp
 8010224:	dfc00117 	ldw	ra,4(sp)
 8010228:	df000017 	ldw	fp,0(sp)
 801022c:	dec00204 	addi	sp,sp,8
 8010230:	f800283a 	ret

08010234 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8010234:	defffd04 	addi	sp,sp,-12
 8010238:	dfc00215 	stw	ra,8(sp)
 801023c:	df000115 	stw	fp,4(sp)
 8010240:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8010244:	00820074 	movhi	r2,2049
 8010248:	10846d04 	addi	r2,r2,4532
 801024c:	e0bfff15 	stw	r2,-4(fp)
 8010250:	00000606 	br	801026c <_do_ctors+0x38>
        (*ctor) (); 
 8010254:	e0bfff17 	ldw	r2,-4(fp)
 8010258:	10800017 	ldw	r2,0(r2)
 801025c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8010260:	e0bfff17 	ldw	r2,-4(fp)
 8010264:	10bfff04 	addi	r2,r2,-4
 8010268:	e0bfff15 	stw	r2,-4(fp)
 801026c:	e0ffff17 	ldw	r3,-4(fp)
 8010270:	00820074 	movhi	r2,2049
 8010274:	10846e04 	addi	r2,r2,4536
 8010278:	18bff62e 	bgeu	r3,r2,8010254 <__alt_data_end+0xf8010254>
        (*ctor) (); 
}
 801027c:	e037883a 	mov	sp,fp
 8010280:	dfc00117 	ldw	ra,4(sp)
 8010284:	df000017 	ldw	fp,0(sp)
 8010288:	dec00204 	addi	sp,sp,8
 801028c:	f800283a 	ret

08010290 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8010290:	defffd04 	addi	sp,sp,-12
 8010294:	dfc00215 	stw	ra,8(sp)
 8010298:	df000115 	stw	fp,4(sp)
 801029c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80102a0:	00820074 	movhi	r2,2049
 80102a4:	10846d04 	addi	r2,r2,4532
 80102a8:	e0bfff15 	stw	r2,-4(fp)
 80102ac:	00000606 	br	80102c8 <_do_dtors+0x38>
        (*dtor) (); 
 80102b0:	e0bfff17 	ldw	r2,-4(fp)
 80102b4:	10800017 	ldw	r2,0(r2)
 80102b8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80102bc:	e0bfff17 	ldw	r2,-4(fp)
 80102c0:	10bfff04 	addi	r2,r2,-4
 80102c4:	e0bfff15 	stw	r2,-4(fp)
 80102c8:	e0ffff17 	ldw	r3,-4(fp)
 80102cc:	00820074 	movhi	r2,2049
 80102d0:	10846e04 	addi	r2,r2,4536
 80102d4:	18bff62e 	bgeu	r3,r2,80102b0 <__alt_data_end+0xf80102b0>
        (*dtor) (); 
}
 80102d8:	e037883a 	mov	sp,fp
 80102dc:	dfc00117 	ldw	ra,4(sp)
 80102e0:	df000017 	ldw	fp,0(sp)
 80102e4:	dec00204 	addi	sp,sp,8
 80102e8:	f800283a 	ret

080102ec <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 80102ec:	deffff04 	addi	sp,sp,-4
 80102f0:	df000015 	stw	fp,0(sp)
 80102f4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 80102f8:	e037883a 	mov	sp,fp
 80102fc:	df000017 	ldw	fp,0(sp)
 8010300:	dec00104 	addi	sp,sp,4
 8010304:	f800283a 	ret

08010308 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8010308:	defff904 	addi	sp,sp,-28
 801030c:	dfc00615 	stw	ra,24(sp)
 8010310:	df000515 	stw	fp,20(sp)
 8010314:	df000504 	addi	fp,sp,20
 8010318:	e13ffc15 	stw	r4,-16(fp)
 801031c:	e17ffd15 	stw	r5,-12(fp)
 8010320:	e1bffe15 	stw	r6,-8(fp)
 8010324:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8010328:	e0800217 	ldw	r2,8(fp)
 801032c:	d8800015 	stw	r2,0(sp)
 8010330:	e13ffc17 	ldw	r4,-16(fp)
 8010334:	e17ffd17 	ldw	r5,-12(fp)
 8010338:	e1bffe17 	ldw	r6,-8(fp)
 801033c:	e1ffff17 	ldw	r7,-4(fp)
 8010340:	80104e00 	call	80104e0 <alt_iic_isr_register>
}  
 8010344:	e037883a 	mov	sp,fp
 8010348:	dfc00117 	ldw	ra,4(sp)
 801034c:	df000017 	ldw	fp,0(sp)
 8010350:	dec00204 	addi	sp,sp,8
 8010354:	f800283a 	ret

08010358 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8010358:	defff904 	addi	sp,sp,-28
 801035c:	df000615 	stw	fp,24(sp)
 8010360:	df000604 	addi	fp,sp,24
 8010364:	e13ffe15 	stw	r4,-8(fp)
 8010368:	e17fff15 	stw	r5,-4(fp)
 801036c:	e0bfff17 	ldw	r2,-4(fp)
 8010370:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010374:	0005303a 	rdctl	r2,status
 8010378:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801037c:	e0fffb17 	ldw	r3,-20(fp)
 8010380:	00bfff84 	movi	r2,-2
 8010384:	1884703a 	and	r2,r3,r2
 8010388:	1001703a 	wrctl	status,r2
  
  return context;
 801038c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8010390:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8010394:	e0bffa17 	ldw	r2,-24(fp)
 8010398:	00c00044 	movi	r3,1
 801039c:	1884983a 	sll	r2,r3,r2
 80103a0:	1007883a 	mov	r3,r2
 80103a4:	00820074 	movhi	r2,2049
 80103a8:	10948a04 	addi	r2,r2,21032
 80103ac:	10800017 	ldw	r2,0(r2)
 80103b0:	1886b03a 	or	r3,r3,r2
 80103b4:	00820074 	movhi	r2,2049
 80103b8:	10948a04 	addi	r2,r2,21032
 80103bc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80103c0:	00820074 	movhi	r2,2049
 80103c4:	10948a04 	addi	r2,r2,21032
 80103c8:	10800017 	ldw	r2,0(r2)
 80103cc:	100170fa 	wrctl	ienable,r2
 80103d0:	e0bffc17 	ldw	r2,-16(fp)
 80103d4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80103d8:	e0bffd17 	ldw	r2,-12(fp)
 80103dc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 80103e0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 80103e4:	e037883a 	mov	sp,fp
 80103e8:	df000017 	ldw	fp,0(sp)
 80103ec:	dec00104 	addi	sp,sp,4
 80103f0:	f800283a 	ret

080103f4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 80103f4:	defff904 	addi	sp,sp,-28
 80103f8:	df000615 	stw	fp,24(sp)
 80103fc:	df000604 	addi	fp,sp,24
 8010400:	e13ffe15 	stw	r4,-8(fp)
 8010404:	e17fff15 	stw	r5,-4(fp)
 8010408:	e0bfff17 	ldw	r2,-4(fp)
 801040c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010410:	0005303a 	rdctl	r2,status
 8010414:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010418:	e0fffb17 	ldw	r3,-20(fp)
 801041c:	00bfff84 	movi	r2,-2
 8010420:	1884703a 	and	r2,r3,r2
 8010424:	1001703a 	wrctl	status,r2
  
  return context;
 8010428:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 801042c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8010430:	e0bffa17 	ldw	r2,-24(fp)
 8010434:	00c00044 	movi	r3,1
 8010438:	1884983a 	sll	r2,r3,r2
 801043c:	0084303a 	nor	r2,zero,r2
 8010440:	1007883a 	mov	r3,r2
 8010444:	00820074 	movhi	r2,2049
 8010448:	10948a04 	addi	r2,r2,21032
 801044c:	10800017 	ldw	r2,0(r2)
 8010450:	1886703a 	and	r3,r3,r2
 8010454:	00820074 	movhi	r2,2049
 8010458:	10948a04 	addi	r2,r2,21032
 801045c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8010460:	00820074 	movhi	r2,2049
 8010464:	10948a04 	addi	r2,r2,21032
 8010468:	10800017 	ldw	r2,0(r2)
 801046c:	100170fa 	wrctl	ienable,r2
 8010470:	e0bffc17 	ldw	r2,-16(fp)
 8010474:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010478:	e0bffd17 	ldw	r2,-12(fp)
 801047c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8010480:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 8010484:	e037883a 	mov	sp,fp
 8010488:	df000017 	ldw	fp,0(sp)
 801048c:	dec00104 	addi	sp,sp,4
 8010490:	f800283a 	ret

08010494 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8010494:	defffc04 	addi	sp,sp,-16
 8010498:	df000315 	stw	fp,12(sp)
 801049c:	df000304 	addi	fp,sp,12
 80104a0:	e13ffe15 	stw	r4,-8(fp)
 80104a4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 80104a8:	000530fa 	rdctl	r2,ienable
 80104ac:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 80104b0:	e0bfff17 	ldw	r2,-4(fp)
 80104b4:	00c00044 	movi	r3,1
 80104b8:	1884983a 	sll	r2,r3,r2
 80104bc:	1007883a 	mov	r3,r2
 80104c0:	e0bffd17 	ldw	r2,-12(fp)
 80104c4:	1884703a 	and	r2,r3,r2
 80104c8:	1004c03a 	cmpne	r2,r2,zero
 80104cc:	10803fcc 	andi	r2,r2,255
}
 80104d0:	e037883a 	mov	sp,fp
 80104d4:	df000017 	ldw	fp,0(sp)
 80104d8:	dec00104 	addi	sp,sp,4
 80104dc:	f800283a 	ret

080104e0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80104e0:	defff504 	addi	sp,sp,-44
 80104e4:	dfc00a15 	stw	ra,40(sp)
 80104e8:	df000915 	stw	fp,36(sp)
 80104ec:	df000904 	addi	fp,sp,36
 80104f0:	e13ffc15 	stw	r4,-16(fp)
 80104f4:	e17ffd15 	stw	r5,-12(fp)
 80104f8:	e1bffe15 	stw	r6,-8(fp)
 80104fc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8010500:	00bffa84 	movi	r2,-22
 8010504:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8010508:	e0bffd17 	ldw	r2,-12(fp)
 801050c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8010510:	e0bff817 	ldw	r2,-32(fp)
 8010514:	10800808 	cmpgei	r2,r2,32
 8010518:	1000271e 	bne	r2,zero,80105b8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801051c:	0005303a 	rdctl	r2,status
 8010520:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010524:	e0fffa17 	ldw	r3,-24(fp)
 8010528:	00bfff84 	movi	r2,-2
 801052c:	1884703a 	and	r2,r3,r2
 8010530:	1001703a 	wrctl	status,r2
  
  return context;
 8010534:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8010538:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 801053c:	00c20074 	movhi	r3,2049
 8010540:	18d49704 	addi	r3,r3,21084
 8010544:	e0bff817 	ldw	r2,-32(fp)
 8010548:	100490fa 	slli	r2,r2,3
 801054c:	1885883a 	add	r2,r3,r2
 8010550:	e0fffe17 	ldw	r3,-8(fp)
 8010554:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8010558:	00c20074 	movhi	r3,2049
 801055c:	18d49704 	addi	r3,r3,21084
 8010560:	e0bff817 	ldw	r2,-32(fp)
 8010564:	100490fa 	slli	r2,r2,3
 8010568:	1885883a 	add	r2,r3,r2
 801056c:	10800104 	addi	r2,r2,4
 8010570:	e0ffff17 	ldw	r3,-4(fp)
 8010574:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8010578:	e0bffe17 	ldw	r2,-8(fp)
 801057c:	10000526 	beq	r2,zero,8010594 <alt_iic_isr_register+0xb4>
 8010580:	e0bff817 	ldw	r2,-32(fp)
 8010584:	e13ffc17 	ldw	r4,-16(fp)
 8010588:	100b883a 	mov	r5,r2
 801058c:	80103580 	call	8010358 <alt_ic_irq_enable>
 8010590:	00000406 	br	80105a4 <alt_iic_isr_register+0xc4>
 8010594:	e0bff817 	ldw	r2,-32(fp)
 8010598:	e13ffc17 	ldw	r4,-16(fp)
 801059c:	100b883a 	mov	r5,r2
 80105a0:	80103f40 	call	80103f4 <alt_ic_irq_disable>
 80105a4:	e0bff715 	stw	r2,-36(fp)
 80105a8:	e0bff917 	ldw	r2,-28(fp)
 80105ac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80105b0:	e0bffb17 	ldw	r2,-20(fp)
 80105b4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 80105b8:	e0bff717 	ldw	r2,-36(fp)
}
 80105bc:	e037883a 	mov	sp,fp
 80105c0:	dfc00117 	ldw	ra,4(sp)
 80105c4:	df000017 	ldw	fp,0(sp)
 80105c8:	dec00204 	addi	sp,sp,8
 80105cc:	f800283a 	ret

080105d0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 80105d0:	defff804 	addi	sp,sp,-32
 80105d4:	dfc00715 	stw	ra,28(sp)
 80105d8:	df000615 	stw	fp,24(sp)
 80105dc:	dc000515 	stw	r16,20(sp)
 80105e0:	df000604 	addi	fp,sp,24
 80105e4:	e13ffb15 	stw	r4,-20(fp)
 80105e8:	e17ffc15 	stw	r5,-16(fp)
 80105ec:	e1bffd15 	stw	r6,-12(fp)
 80105f0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 80105f4:	e13ffc17 	ldw	r4,-16(fp)
 80105f8:	e17ffd17 	ldw	r5,-12(fp)
 80105fc:	e1bffe17 	ldw	r6,-8(fp)
 8010600:	801086c0 	call	801086c <open>
 8010604:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 8010608:	e0bffa17 	ldw	r2,-24(fp)
 801060c:	10002216 	blt	r2,zero,8010698 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 8010610:	04020074 	movhi	r16,2049
 8010614:	84093c04 	addi	r16,r16,9456
 8010618:	e0bffa17 	ldw	r2,-24(fp)
 801061c:	1009883a 	mov	r4,r2
 8010620:	01400304 	movi	r5,12
 8010624:	800c2080 	call	800c208 <__mulsi3>
 8010628:	8085883a 	add	r2,r16,r2
 801062c:	10c00017 	ldw	r3,0(r2)
 8010630:	e0bffb17 	ldw	r2,-20(fp)
 8010634:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8010638:	04020074 	movhi	r16,2049
 801063c:	84093c04 	addi	r16,r16,9456
 8010640:	e0bffa17 	ldw	r2,-24(fp)
 8010644:	1009883a 	mov	r4,r2
 8010648:	01400304 	movi	r5,12
 801064c:	800c2080 	call	800c208 <__mulsi3>
 8010650:	8085883a 	add	r2,r16,r2
 8010654:	10800104 	addi	r2,r2,4
 8010658:	10c00017 	ldw	r3,0(r2)
 801065c:	e0bffb17 	ldw	r2,-20(fp)
 8010660:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8010664:	04020074 	movhi	r16,2049
 8010668:	84093c04 	addi	r16,r16,9456
 801066c:	e0bffa17 	ldw	r2,-24(fp)
 8010670:	1009883a 	mov	r4,r2
 8010674:	01400304 	movi	r5,12
 8010678:	800c2080 	call	800c208 <__mulsi3>
 801067c:	8085883a 	add	r2,r16,r2
 8010680:	10800204 	addi	r2,r2,8
 8010684:	10c00017 	ldw	r3,0(r2)
 8010688:	e0bffb17 	ldw	r2,-20(fp)
 801068c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8010690:	e13ffa17 	ldw	r4,-24(fp)
 8010694:	800f1080 	call	800f108 <alt_release_fd>
  }
} 
 8010698:	e6ffff04 	addi	sp,fp,-4
 801069c:	dfc00217 	ldw	ra,8(sp)
 80106a0:	df000117 	ldw	fp,4(sp)
 80106a4:	dc000017 	ldw	r16,0(sp)
 80106a8:	dec00304 	addi	sp,sp,12
 80106ac:	f800283a 	ret

080106b0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 80106b0:	defffb04 	addi	sp,sp,-20
 80106b4:	dfc00415 	stw	ra,16(sp)
 80106b8:	df000315 	stw	fp,12(sp)
 80106bc:	df000304 	addi	fp,sp,12
 80106c0:	e13ffd15 	stw	r4,-12(fp)
 80106c4:	e17ffe15 	stw	r5,-8(fp)
 80106c8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 80106cc:	01020074 	movhi	r4,2049
 80106d0:	21093f04 	addi	r4,r4,9468
 80106d4:	e17ffd17 	ldw	r5,-12(fp)
 80106d8:	01800044 	movi	r6,1
 80106dc:	01c07fc4 	movi	r7,511
 80106e0:	80105d00 	call	80105d0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 80106e4:	01020074 	movhi	r4,2049
 80106e8:	21093c04 	addi	r4,r4,9456
 80106ec:	e17ffe17 	ldw	r5,-8(fp)
 80106f0:	000d883a 	mov	r6,zero
 80106f4:	01c07fc4 	movi	r7,511
 80106f8:	80105d00 	call	80105d0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 80106fc:	01020074 	movhi	r4,2049
 8010700:	21094204 	addi	r4,r4,9480
 8010704:	e17fff17 	ldw	r5,-4(fp)
 8010708:	01800044 	movi	r6,1
 801070c:	01c07fc4 	movi	r7,511
 8010710:	80105d00 	call	80105d0 <alt_open_fd>
}  
 8010714:	e037883a 	mov	sp,fp
 8010718:	dfc00117 	ldw	ra,4(sp)
 801071c:	df000017 	ldw	fp,0(sp)
 8010720:	dec00204 	addi	sp,sp,8
 8010724:	f800283a 	ret

08010728 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8010728:	defffe04 	addi	sp,sp,-8
 801072c:	dfc00115 	stw	ra,4(sp)
 8010730:	df000015 	stw	fp,0(sp)
 8010734:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010738:	00820074 	movhi	r2,2049
 801073c:	108dbf04 	addi	r2,r2,14076
 8010740:	10800017 	ldw	r2,0(r2)
 8010744:	10000526 	beq	r2,zero,801075c <alt_get_errno+0x34>
 8010748:	00820074 	movhi	r2,2049
 801074c:	108dbf04 	addi	r2,r2,14076
 8010750:	10800017 	ldw	r2,0(r2)
 8010754:	103ee83a 	callr	r2
 8010758:	00000206 	br	8010764 <alt_get_errno+0x3c>
 801075c:	00820074 	movhi	r2,2049
 8010760:	10948604 	addi	r2,r2,21016
}
 8010764:	e037883a 	mov	sp,fp
 8010768:	dfc00117 	ldw	ra,4(sp)
 801076c:	df000017 	ldw	fp,0(sp)
 8010770:	dec00204 	addi	sp,sp,8
 8010774:	f800283a 	ret

08010778 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8010778:	defffb04 	addi	sp,sp,-20
 801077c:	dfc00415 	stw	ra,16(sp)
 8010780:	df000315 	stw	fp,12(sp)
 8010784:	dc000215 	stw	r16,8(sp)
 8010788:	df000304 	addi	fp,sp,12
 801078c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8010790:	e0bffe17 	ldw	r2,-8(fp)
 8010794:	10800217 	ldw	r2,8(r2)
 8010798:	10d00034 	orhi	r3,r2,16384
 801079c:	e0bffe17 	ldw	r2,-8(fp)
 80107a0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80107a4:	e03ffd15 	stw	zero,-12(fp)
 80107a8:	00002306 	br	8010838 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80107ac:	04020074 	movhi	r16,2049
 80107b0:	84093c04 	addi	r16,r16,9456
 80107b4:	e0bffd17 	ldw	r2,-12(fp)
 80107b8:	1009883a 	mov	r4,r2
 80107bc:	01400304 	movi	r5,12
 80107c0:	800c2080 	call	800c208 <__mulsi3>
 80107c4:	8085883a 	add	r2,r16,r2
 80107c8:	10c00017 	ldw	r3,0(r2)
 80107cc:	e0bffe17 	ldw	r2,-8(fp)
 80107d0:	10800017 	ldw	r2,0(r2)
 80107d4:	1880151e 	bne	r3,r2,801082c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80107d8:	04020074 	movhi	r16,2049
 80107dc:	84093c04 	addi	r16,r16,9456
 80107e0:	e0bffd17 	ldw	r2,-12(fp)
 80107e4:	1009883a 	mov	r4,r2
 80107e8:	01400304 	movi	r5,12
 80107ec:	800c2080 	call	800c208 <__mulsi3>
 80107f0:	8085883a 	add	r2,r16,r2
 80107f4:	10800204 	addi	r2,r2,8
 80107f8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80107fc:	10000b0e 	bge	r2,zero,801082c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8010800:	e13ffd17 	ldw	r4,-12(fp)
 8010804:	01400304 	movi	r5,12
 8010808:	800c2080 	call	800c208 <__mulsi3>
 801080c:	1007883a 	mov	r3,r2
 8010810:	00820074 	movhi	r2,2049
 8010814:	10893c04 	addi	r2,r2,9456
 8010818:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 801081c:	e0bffe17 	ldw	r2,-8(fp)
 8010820:	18800226 	beq	r3,r2,801082c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8010824:	00bffcc4 	movi	r2,-13
 8010828:	00000a06 	br	8010854 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 801082c:	e0bffd17 	ldw	r2,-12(fp)
 8010830:	10800044 	addi	r2,r2,1
 8010834:	e0bffd15 	stw	r2,-12(fp)
 8010838:	00820074 	movhi	r2,2049
 801083c:	108dbe04 	addi	r2,r2,14072
 8010840:	10800017 	ldw	r2,0(r2)
 8010844:	1007883a 	mov	r3,r2
 8010848:	e0bffd17 	ldw	r2,-12(fp)
 801084c:	18bfd72e 	bgeu	r3,r2,80107ac <__alt_data_end+0xf80107ac>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8010850:	0005883a 	mov	r2,zero
}
 8010854:	e6ffff04 	addi	sp,fp,-4
 8010858:	dfc00217 	ldw	ra,8(sp)
 801085c:	df000117 	ldw	fp,4(sp)
 8010860:	dc000017 	ldw	r16,0(sp)
 8010864:	dec00304 	addi	sp,sp,12
 8010868:	f800283a 	ret

0801086c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 801086c:	defff604 	addi	sp,sp,-40
 8010870:	dfc00915 	stw	ra,36(sp)
 8010874:	df000815 	stw	fp,32(sp)
 8010878:	df000804 	addi	fp,sp,32
 801087c:	e13ffd15 	stw	r4,-12(fp)
 8010880:	e17ffe15 	stw	r5,-8(fp)
 8010884:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8010888:	00bfffc4 	movi	r2,-1
 801088c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8010890:	00bffb44 	movi	r2,-19
 8010894:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 8010898:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 801089c:	e13ffd17 	ldw	r4,-12(fp)
 80108a0:	01420074 	movhi	r5,2049
 80108a4:	294dbc04 	addi	r5,r5,14064
 80108a8:	8010b840 	call	8010b84 <alt_find_dev>
 80108ac:	e0bff815 	stw	r2,-32(fp)
 80108b0:	e0bff817 	ldw	r2,-32(fp)
 80108b4:	1000051e 	bne	r2,zero,80108cc <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 80108b8:	e13ffd17 	ldw	r4,-12(fp)
 80108bc:	8010c140 	call	8010c14 <alt_find_file>
 80108c0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 80108c4:	00800044 	movi	r2,1
 80108c8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 80108cc:	e0bff817 	ldw	r2,-32(fp)
 80108d0:	10002b26 	beq	r2,zero,8010980 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 80108d4:	e13ff817 	ldw	r4,-32(fp)
 80108d8:	8010d280 	call	8010d28 <alt_get_fd>
 80108dc:	e0bff915 	stw	r2,-28(fp)
 80108e0:	e0bff917 	ldw	r2,-28(fp)
 80108e4:	1000030e 	bge	r2,zero,80108f4 <open+0x88>
    {
      status = index;
 80108e8:	e0bff917 	ldw	r2,-28(fp)
 80108ec:	e0bffa15 	stw	r2,-24(fp)
 80108f0:	00002506 	br	8010988 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 80108f4:	e13ff917 	ldw	r4,-28(fp)
 80108f8:	01400304 	movi	r5,12
 80108fc:	800c2080 	call	800c208 <__mulsi3>
 8010900:	1007883a 	mov	r3,r2
 8010904:	00820074 	movhi	r2,2049
 8010908:	10893c04 	addi	r2,r2,9456
 801090c:	1885883a 	add	r2,r3,r2
 8010910:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8010914:	e0fffe17 	ldw	r3,-8(fp)
 8010918:	00900034 	movhi	r2,16384
 801091c:	10bfffc4 	addi	r2,r2,-1
 8010920:	1886703a 	and	r3,r3,r2
 8010924:	e0bffc17 	ldw	r2,-16(fp)
 8010928:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 801092c:	e0bffb17 	ldw	r2,-20(fp)
 8010930:	1000051e 	bne	r2,zero,8010948 <open+0xdc>
 8010934:	e13ffc17 	ldw	r4,-16(fp)
 8010938:	80107780 	call	8010778 <alt_file_locked>
 801093c:	e0bffa15 	stw	r2,-24(fp)
 8010940:	e0bffa17 	ldw	r2,-24(fp)
 8010944:	10001016 	blt	r2,zero,8010988 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8010948:	e0bff817 	ldw	r2,-32(fp)
 801094c:	10800317 	ldw	r2,12(r2)
 8010950:	10000826 	beq	r2,zero,8010974 <open+0x108>
 8010954:	e0bff817 	ldw	r2,-32(fp)
 8010958:	10800317 	ldw	r2,12(r2)
 801095c:	e13ffc17 	ldw	r4,-16(fp)
 8010960:	e17ffd17 	ldw	r5,-12(fp)
 8010964:	e1bffe17 	ldw	r6,-8(fp)
 8010968:	e1ffff17 	ldw	r7,-4(fp)
 801096c:	103ee83a 	callr	r2
 8010970:	00000106 	br	8010978 <open+0x10c>
 8010974:	0005883a 	mov	r2,zero
 8010978:	e0bffa15 	stw	r2,-24(fp)
 801097c:	00000206 	br	8010988 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8010980:	00bffb44 	movi	r2,-19
 8010984:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8010988:	e0bffa17 	ldw	r2,-24(fp)
 801098c:	1000080e 	bge	r2,zero,80109b0 <open+0x144>
  {
    alt_release_fd (index);  
 8010990:	e13ff917 	ldw	r4,-28(fp)
 8010994:	800f1080 	call	800f108 <alt_release_fd>
    ALT_ERRNO = -status;
 8010998:	80107280 	call	8010728 <alt_get_errno>
 801099c:	e0fffa17 	ldw	r3,-24(fp)
 80109a0:	00c7c83a 	sub	r3,zero,r3
 80109a4:	10c00015 	stw	r3,0(r2)
    return -1;
 80109a8:	00bfffc4 	movi	r2,-1
 80109ac:	00000106 	br	80109b4 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 80109b0:	e0bff917 	ldw	r2,-28(fp)
}
 80109b4:	e037883a 	mov	sp,fp
 80109b8:	dfc00117 	ldw	ra,4(sp)
 80109bc:	df000017 	ldw	fp,0(sp)
 80109c0:	dec00204 	addi	sp,sp,8
 80109c4:	f800283a 	ret

080109c8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 80109c8:	defffa04 	addi	sp,sp,-24
 80109cc:	df000515 	stw	fp,20(sp)
 80109d0:	df000504 	addi	fp,sp,20
 80109d4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80109d8:	0005303a 	rdctl	r2,status
 80109dc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80109e0:	e0fffc17 	ldw	r3,-16(fp)
 80109e4:	00bfff84 	movi	r2,-2
 80109e8:	1884703a 	and	r2,r3,r2
 80109ec:	1001703a 	wrctl	status,r2
  
  return context;
 80109f0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 80109f4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 80109f8:	e0bfff17 	ldw	r2,-4(fp)
 80109fc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8010a00:	e0bffd17 	ldw	r2,-12(fp)
 8010a04:	10800017 	ldw	r2,0(r2)
 8010a08:	e0fffd17 	ldw	r3,-12(fp)
 8010a0c:	18c00117 	ldw	r3,4(r3)
 8010a10:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8010a14:	e0bffd17 	ldw	r2,-12(fp)
 8010a18:	10800117 	ldw	r2,4(r2)
 8010a1c:	e0fffd17 	ldw	r3,-12(fp)
 8010a20:	18c00017 	ldw	r3,0(r3)
 8010a24:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8010a28:	e0bffd17 	ldw	r2,-12(fp)
 8010a2c:	e0fffd17 	ldw	r3,-12(fp)
 8010a30:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8010a34:	e0bffd17 	ldw	r2,-12(fp)
 8010a38:	e0fffd17 	ldw	r3,-12(fp)
 8010a3c:	10c00015 	stw	r3,0(r2)
 8010a40:	e0bffb17 	ldw	r2,-20(fp)
 8010a44:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010a48:	e0bffe17 	ldw	r2,-8(fp)
 8010a4c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8010a50:	e037883a 	mov	sp,fp
 8010a54:	df000017 	ldw	fp,0(sp)
 8010a58:	dec00104 	addi	sp,sp,4
 8010a5c:	f800283a 	ret

08010a60 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8010a60:	defffb04 	addi	sp,sp,-20
 8010a64:	dfc00415 	stw	ra,16(sp)
 8010a68:	df000315 	stw	fp,12(sp)
 8010a6c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8010a70:	d0a00e17 	ldw	r2,-32712(gp)
 8010a74:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8010a78:	d0a6d817 	ldw	r2,-25760(gp)
 8010a7c:	10800044 	addi	r2,r2,1
 8010a80:	d0a6d815 	stw	r2,-25760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8010a84:	00002e06 	br	8010b40 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8010a88:	e0bffd17 	ldw	r2,-12(fp)
 8010a8c:	10800017 	ldw	r2,0(r2)
 8010a90:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8010a94:	e0bffd17 	ldw	r2,-12(fp)
 8010a98:	10800403 	ldbu	r2,16(r2)
 8010a9c:	10803fcc 	andi	r2,r2,255
 8010aa0:	10000426 	beq	r2,zero,8010ab4 <alt_tick+0x54>
 8010aa4:	d0a6d817 	ldw	r2,-25760(gp)
 8010aa8:	1000021e 	bne	r2,zero,8010ab4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8010aac:	e0bffd17 	ldw	r2,-12(fp)
 8010ab0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8010ab4:	e0bffd17 	ldw	r2,-12(fp)
 8010ab8:	10800217 	ldw	r2,8(r2)
 8010abc:	d0e6d817 	ldw	r3,-25760(gp)
 8010ac0:	18801d36 	bltu	r3,r2,8010b38 <alt_tick+0xd8>
 8010ac4:	e0bffd17 	ldw	r2,-12(fp)
 8010ac8:	10800403 	ldbu	r2,16(r2)
 8010acc:	10803fcc 	andi	r2,r2,255
 8010ad0:	1000191e 	bne	r2,zero,8010b38 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8010ad4:	e0bffd17 	ldw	r2,-12(fp)
 8010ad8:	10800317 	ldw	r2,12(r2)
 8010adc:	e0fffd17 	ldw	r3,-12(fp)
 8010ae0:	18c00517 	ldw	r3,20(r3)
 8010ae4:	1809883a 	mov	r4,r3
 8010ae8:	103ee83a 	callr	r2
 8010aec:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8010af0:	e0bfff17 	ldw	r2,-4(fp)
 8010af4:	1000031e 	bne	r2,zero,8010b04 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8010af8:	e13ffd17 	ldw	r4,-12(fp)
 8010afc:	80109c80 	call	80109c8 <alt_alarm_stop>
 8010b00:	00000d06 	br	8010b38 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8010b04:	e0bffd17 	ldw	r2,-12(fp)
 8010b08:	10c00217 	ldw	r3,8(r2)
 8010b0c:	e0bfff17 	ldw	r2,-4(fp)
 8010b10:	1887883a 	add	r3,r3,r2
 8010b14:	e0bffd17 	ldw	r2,-12(fp)
 8010b18:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8010b1c:	e0bffd17 	ldw	r2,-12(fp)
 8010b20:	10c00217 	ldw	r3,8(r2)
 8010b24:	d0a6d817 	ldw	r2,-25760(gp)
 8010b28:	1880032e 	bgeu	r3,r2,8010b38 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8010b2c:	e0bffd17 	ldw	r2,-12(fp)
 8010b30:	00c00044 	movi	r3,1
 8010b34:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8010b38:	e0bffe17 	ldw	r2,-8(fp)
 8010b3c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8010b40:	e0fffd17 	ldw	r3,-12(fp)
 8010b44:	d0a00e04 	addi	r2,gp,-32712
 8010b48:	18bfcf1e 	bne	r3,r2,8010a88 <__alt_data_end+0xf8010a88>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8010b4c:	0001883a 	nop
}
 8010b50:	e037883a 	mov	sp,fp
 8010b54:	dfc00117 	ldw	ra,4(sp)
 8010b58:	df000017 	ldw	fp,0(sp)
 8010b5c:	dec00204 	addi	sp,sp,8
 8010b60:	f800283a 	ret

08010b64 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 8010b64:	deffff04 	addi	sp,sp,-4
 8010b68:	df000015 	stw	fp,0(sp)
 8010b6c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8010b70:	000170fa 	wrctl	ienable,zero
}
 8010b74:	e037883a 	mov	sp,fp
 8010b78:	df000017 	ldw	fp,0(sp)
 8010b7c:	dec00104 	addi	sp,sp,4
 8010b80:	f800283a 	ret

08010b84 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8010b84:	defffa04 	addi	sp,sp,-24
 8010b88:	dfc00515 	stw	ra,20(sp)
 8010b8c:	df000415 	stw	fp,16(sp)
 8010b90:	df000404 	addi	fp,sp,16
 8010b94:	e13ffe15 	stw	r4,-8(fp)
 8010b98:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8010b9c:	e0bfff17 	ldw	r2,-4(fp)
 8010ba0:	10800017 	ldw	r2,0(r2)
 8010ba4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8010ba8:	e13ffe17 	ldw	r4,-8(fp)
 8010bac:	80022340 	call	8002234 <strlen>
 8010bb0:	10800044 	addi	r2,r2,1
 8010bb4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8010bb8:	00000d06 	br	8010bf0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8010bbc:	e0bffc17 	ldw	r2,-16(fp)
 8010bc0:	10c00217 	ldw	r3,8(r2)
 8010bc4:	e0bffd17 	ldw	r2,-12(fp)
 8010bc8:	1809883a 	mov	r4,r3
 8010bcc:	e17ffe17 	ldw	r5,-8(fp)
 8010bd0:	100d883a 	mov	r6,r2
 8010bd4:	8010e480 	call	8010e48 <memcmp>
 8010bd8:	1000021e 	bne	r2,zero,8010be4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8010bdc:	e0bffc17 	ldw	r2,-16(fp)
 8010be0:	00000706 	br	8010c00 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8010be4:	e0bffc17 	ldw	r2,-16(fp)
 8010be8:	10800017 	ldw	r2,0(r2)
 8010bec:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8010bf0:	e0fffc17 	ldw	r3,-16(fp)
 8010bf4:	e0bfff17 	ldw	r2,-4(fp)
 8010bf8:	18bff01e 	bne	r3,r2,8010bbc <__alt_data_end+0xf8010bbc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8010bfc:	0005883a 	mov	r2,zero
}
 8010c00:	e037883a 	mov	sp,fp
 8010c04:	dfc00117 	ldw	ra,4(sp)
 8010c08:	df000017 	ldw	fp,0(sp)
 8010c0c:	dec00204 	addi	sp,sp,8
 8010c10:	f800283a 	ret

08010c14 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8010c14:	defffb04 	addi	sp,sp,-20
 8010c18:	dfc00415 	stw	ra,16(sp)
 8010c1c:	df000315 	stw	fp,12(sp)
 8010c20:	df000304 	addi	fp,sp,12
 8010c24:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8010c28:	00820074 	movhi	r2,2049
 8010c2c:	108dba04 	addi	r2,r2,14056
 8010c30:	10800017 	ldw	r2,0(r2)
 8010c34:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8010c38:	00003106 	br	8010d00 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 8010c3c:	e0bffd17 	ldw	r2,-12(fp)
 8010c40:	10800217 	ldw	r2,8(r2)
 8010c44:	1009883a 	mov	r4,r2
 8010c48:	80022340 	call	8002234 <strlen>
 8010c4c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8010c50:	e0bffd17 	ldw	r2,-12(fp)
 8010c54:	10c00217 	ldw	r3,8(r2)
 8010c58:	e0bffe17 	ldw	r2,-8(fp)
 8010c5c:	10bfffc4 	addi	r2,r2,-1
 8010c60:	1885883a 	add	r2,r3,r2
 8010c64:	10800003 	ldbu	r2,0(r2)
 8010c68:	10803fcc 	andi	r2,r2,255
 8010c6c:	1080201c 	xori	r2,r2,128
 8010c70:	10bfe004 	addi	r2,r2,-128
 8010c74:	10800bd8 	cmpnei	r2,r2,47
 8010c78:	1000031e 	bne	r2,zero,8010c88 <alt_find_file+0x74>
    {
      len -= 1;
 8010c7c:	e0bffe17 	ldw	r2,-8(fp)
 8010c80:	10bfffc4 	addi	r2,r2,-1
 8010c84:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8010c88:	e0bffe17 	ldw	r2,-8(fp)
 8010c8c:	e0ffff17 	ldw	r3,-4(fp)
 8010c90:	1885883a 	add	r2,r3,r2
 8010c94:	10800003 	ldbu	r2,0(r2)
 8010c98:	10803fcc 	andi	r2,r2,255
 8010c9c:	1080201c 	xori	r2,r2,128
 8010ca0:	10bfe004 	addi	r2,r2,-128
 8010ca4:	10800be0 	cmpeqi	r2,r2,47
 8010ca8:	1000081e 	bne	r2,zero,8010ccc <alt_find_file+0xb8>
 8010cac:	e0bffe17 	ldw	r2,-8(fp)
 8010cb0:	e0ffff17 	ldw	r3,-4(fp)
 8010cb4:	1885883a 	add	r2,r3,r2
 8010cb8:	10800003 	ldbu	r2,0(r2)
 8010cbc:	10803fcc 	andi	r2,r2,255
 8010cc0:	1080201c 	xori	r2,r2,128
 8010cc4:	10bfe004 	addi	r2,r2,-128
 8010cc8:	10000a1e 	bne	r2,zero,8010cf4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 8010ccc:	e0bffd17 	ldw	r2,-12(fp)
 8010cd0:	10c00217 	ldw	r3,8(r2)
 8010cd4:	e0bffe17 	ldw	r2,-8(fp)
 8010cd8:	1809883a 	mov	r4,r3
 8010cdc:	e17fff17 	ldw	r5,-4(fp)
 8010ce0:	100d883a 	mov	r6,r2
 8010ce4:	8010e480 	call	8010e48 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8010ce8:	1000021e 	bne	r2,zero,8010cf4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8010cec:	e0bffd17 	ldw	r2,-12(fp)
 8010cf0:	00000806 	br	8010d14 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 8010cf4:	e0bffd17 	ldw	r2,-12(fp)
 8010cf8:	10800017 	ldw	r2,0(r2)
 8010cfc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8010d00:	e0fffd17 	ldw	r3,-12(fp)
 8010d04:	00820074 	movhi	r2,2049
 8010d08:	108dba04 	addi	r2,r2,14056
 8010d0c:	18bfcb1e 	bne	r3,r2,8010c3c <__alt_data_end+0xf8010c3c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8010d10:	0005883a 	mov	r2,zero
}
 8010d14:	e037883a 	mov	sp,fp
 8010d18:	dfc00117 	ldw	ra,4(sp)
 8010d1c:	df000017 	ldw	fp,0(sp)
 8010d20:	dec00204 	addi	sp,sp,8
 8010d24:	f800283a 	ret

08010d28 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8010d28:	defffa04 	addi	sp,sp,-24
 8010d2c:	dfc00515 	stw	ra,20(sp)
 8010d30:	df000415 	stw	fp,16(sp)
 8010d34:	dc000315 	stw	r16,12(sp)
 8010d38:	df000404 	addi	fp,sp,16
 8010d3c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 8010d40:	00bffa04 	movi	r2,-24
 8010d44:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8010d48:	e03ffc15 	stw	zero,-16(fp)
 8010d4c:	00002106 	br	8010dd4 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 8010d50:	04020074 	movhi	r16,2049
 8010d54:	84093c04 	addi	r16,r16,9456
 8010d58:	e0bffc17 	ldw	r2,-16(fp)
 8010d5c:	1009883a 	mov	r4,r2
 8010d60:	01400304 	movi	r5,12
 8010d64:	800c2080 	call	800c208 <__mulsi3>
 8010d68:	8085883a 	add	r2,r16,r2
 8010d6c:	10800017 	ldw	r2,0(r2)
 8010d70:	1000151e 	bne	r2,zero,8010dc8 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 8010d74:	04020074 	movhi	r16,2049
 8010d78:	84093c04 	addi	r16,r16,9456
 8010d7c:	e0bffc17 	ldw	r2,-16(fp)
 8010d80:	1009883a 	mov	r4,r2
 8010d84:	01400304 	movi	r5,12
 8010d88:	800c2080 	call	800c208 <__mulsi3>
 8010d8c:	8085883a 	add	r2,r16,r2
 8010d90:	e0fffe17 	ldw	r3,-8(fp)
 8010d94:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8010d98:	00820074 	movhi	r2,2049
 8010d9c:	108dbe04 	addi	r2,r2,14072
 8010da0:	10c00017 	ldw	r3,0(r2)
 8010da4:	e0bffc17 	ldw	r2,-16(fp)
 8010da8:	1880040e 	bge	r3,r2,8010dbc <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 8010dac:	00820074 	movhi	r2,2049
 8010db0:	108dbe04 	addi	r2,r2,14072
 8010db4:	e0fffc17 	ldw	r3,-16(fp)
 8010db8:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 8010dbc:	e0bffc17 	ldw	r2,-16(fp)
 8010dc0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 8010dc4:	00000606 	br	8010de0 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8010dc8:	e0bffc17 	ldw	r2,-16(fp)
 8010dcc:	10800044 	addi	r2,r2,1
 8010dd0:	e0bffc15 	stw	r2,-16(fp)
 8010dd4:	e0bffc17 	ldw	r2,-16(fp)
 8010dd8:	10800810 	cmplti	r2,r2,32
 8010ddc:	103fdc1e 	bne	r2,zero,8010d50 <__alt_data_end+0xf8010d50>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8010de0:	e0bffd17 	ldw	r2,-12(fp)
}
 8010de4:	e6ffff04 	addi	sp,fp,-4
 8010de8:	dfc00217 	ldw	ra,8(sp)
 8010dec:	df000117 	ldw	fp,4(sp)
 8010df0:	dc000017 	ldw	r16,0(sp)
 8010df4:	dec00304 	addi	sp,sp,12
 8010df8:	f800283a 	ret

08010dfc <atexit>:
 8010dfc:	200b883a 	mov	r5,r4
 8010e00:	000d883a 	mov	r6,zero
 8010e04:	0009883a 	mov	r4,zero
 8010e08:	000f883a 	mov	r7,zero
 8010e0c:	8010ec41 	jmpi	8010ec4 <__register_exitproc>

08010e10 <exit>:
 8010e10:	defffe04 	addi	sp,sp,-8
 8010e14:	000b883a 	mov	r5,zero
 8010e18:	dc000015 	stw	r16,0(sp)
 8010e1c:	dfc00115 	stw	ra,4(sp)
 8010e20:	2021883a 	mov	r16,r4
 8010e24:	8010fe00 	call	8010fe0 <__call_exitprocs>
 8010e28:	00820074 	movhi	r2,2049
 8010e2c:	108db404 	addi	r2,r2,14032
 8010e30:	11000017 	ldw	r4,0(r2)
 8010e34:	20800f17 	ldw	r2,60(r4)
 8010e38:	10000126 	beq	r2,zero,8010e40 <exit+0x30>
 8010e3c:	103ee83a 	callr	r2
 8010e40:	8009883a 	mov	r4,r16
 8010e44:	80111840 	call	8011184 <_exit>

08010e48 <memcmp>:
 8010e48:	01c000c4 	movi	r7,3
 8010e4c:	3980192e 	bgeu	r7,r6,8010eb4 <memcmp+0x6c>
 8010e50:	2144b03a 	or	r2,r4,r5
 8010e54:	11c4703a 	and	r2,r2,r7
 8010e58:	10000f26 	beq	r2,zero,8010e98 <memcmp+0x50>
 8010e5c:	21c00003 	ldbu	r7,0(r4)
 8010e60:	28800003 	ldbu	r2,0(r5)
 8010e64:	3880151e 	bne	r7,r2,8010ebc <memcmp+0x74>
 8010e68:	30ffff84 	addi	r3,r6,-2
 8010e6c:	01bfffc4 	movi	r6,-1
 8010e70:	00000406 	br	8010e84 <memcmp+0x3c>
 8010e74:	21c00003 	ldbu	r7,0(r4)
 8010e78:	28800003 	ldbu	r2,0(r5)
 8010e7c:	18ffffc4 	addi	r3,r3,-1
 8010e80:	38800e1e 	bne	r7,r2,8010ebc <memcmp+0x74>
 8010e84:	21000044 	addi	r4,r4,1
 8010e88:	29400044 	addi	r5,r5,1
 8010e8c:	19bff91e 	bne	r3,r6,8010e74 <__alt_data_end+0xf8010e74>
 8010e90:	0005883a 	mov	r2,zero
 8010e94:	f800283a 	ret
 8010e98:	20c00017 	ldw	r3,0(r4)
 8010e9c:	28800017 	ldw	r2,0(r5)
 8010ea0:	1880041e 	bne	r3,r2,8010eb4 <memcmp+0x6c>
 8010ea4:	31bfff04 	addi	r6,r6,-4
 8010ea8:	21000104 	addi	r4,r4,4
 8010eac:	29400104 	addi	r5,r5,4
 8010eb0:	39bff936 	bltu	r7,r6,8010e98 <__alt_data_end+0xf8010e98>
 8010eb4:	303fe91e 	bne	r6,zero,8010e5c <__alt_data_end+0xf8010e5c>
 8010eb8:	003ff506 	br	8010e90 <__alt_data_end+0xf8010e90>
 8010ebc:	3885c83a 	sub	r2,r7,r2
 8010ec0:	f800283a 	ret

08010ec4 <__register_exitproc>:
 8010ec4:	defffa04 	addi	sp,sp,-24
 8010ec8:	00820074 	movhi	r2,2049
 8010ecc:	108db404 	addi	r2,r2,14032
 8010ed0:	dc000315 	stw	r16,12(sp)
 8010ed4:	14000017 	ldw	r16,0(r2)
 8010ed8:	dc400415 	stw	r17,16(sp)
 8010edc:	dfc00515 	stw	ra,20(sp)
 8010ee0:	80805217 	ldw	r2,328(r16)
 8010ee4:	2023883a 	mov	r17,r4
 8010ee8:	10003a26 	beq	r2,zero,8010fd4 <__register_exitproc+0x110>
 8010eec:	10c00117 	ldw	r3,4(r2)
 8010ef0:	020007c4 	movi	r8,31
 8010ef4:	40c0190e 	bge	r8,r3,8010f5c <__register_exitproc+0x98>
 8010ef8:	00800034 	movhi	r2,0
 8010efc:	10800004 	addi	r2,r2,0
 8010f00:	1000061e 	bne	r2,zero,8010f1c <__register_exitproc+0x58>
 8010f04:	00bfffc4 	movi	r2,-1
 8010f08:	dfc00517 	ldw	ra,20(sp)
 8010f0c:	dc400417 	ldw	r17,16(sp)
 8010f10:	dc000317 	ldw	r16,12(sp)
 8010f14:	dec00604 	addi	sp,sp,24
 8010f18:	f800283a 	ret
 8010f1c:	01006404 	movi	r4,400
 8010f20:	d9400015 	stw	r5,0(sp)
 8010f24:	d9800115 	stw	r6,4(sp)
 8010f28:	d9c00215 	stw	r7,8(sp)
 8010f2c:	00000000 	call	0 <__reset-0x8000000>
 8010f30:	d9400017 	ldw	r5,0(sp)
 8010f34:	d9800117 	ldw	r6,4(sp)
 8010f38:	d9c00217 	ldw	r7,8(sp)
 8010f3c:	103ff126 	beq	r2,zero,8010f04 <__alt_data_end+0xf8010f04>
 8010f40:	81005217 	ldw	r4,328(r16)
 8010f44:	10000115 	stw	zero,4(r2)
 8010f48:	0007883a 	mov	r3,zero
 8010f4c:	11000015 	stw	r4,0(r2)
 8010f50:	80805215 	stw	r2,328(r16)
 8010f54:	10006215 	stw	zero,392(r2)
 8010f58:	10006315 	stw	zero,396(r2)
 8010f5c:	88000d1e 	bne	r17,zero,8010f94 <__register_exitproc+0xd0>
 8010f60:	19000084 	addi	r4,r3,2
 8010f64:	2109883a 	add	r4,r4,r4
 8010f68:	18c00044 	addi	r3,r3,1
 8010f6c:	2109883a 	add	r4,r4,r4
 8010f70:	10c00115 	stw	r3,4(r2)
 8010f74:	1105883a 	add	r2,r2,r4
 8010f78:	11400015 	stw	r5,0(r2)
 8010f7c:	0005883a 	mov	r2,zero
 8010f80:	dfc00517 	ldw	ra,20(sp)
 8010f84:	dc400417 	ldw	r17,16(sp)
 8010f88:	dc000317 	ldw	r16,12(sp)
 8010f8c:	dec00604 	addi	sp,sp,24
 8010f90:	f800283a 	ret
 8010f94:	18c9883a 	add	r4,r3,r3
 8010f98:	2109883a 	add	r4,r4,r4
 8010f9c:	1109883a 	add	r4,r2,r4
 8010fa0:	21802215 	stw	r6,136(r4)
 8010fa4:	01800044 	movi	r6,1
 8010fa8:	12006217 	ldw	r8,392(r2)
 8010fac:	30cc983a 	sll	r6,r6,r3
 8010fb0:	4190b03a 	or	r8,r8,r6
 8010fb4:	12006215 	stw	r8,392(r2)
 8010fb8:	21c04215 	stw	r7,264(r4)
 8010fbc:	01000084 	movi	r4,2
 8010fc0:	893fe71e 	bne	r17,r4,8010f60 <__alt_data_end+0xf8010f60>
 8010fc4:	11006317 	ldw	r4,396(r2)
 8010fc8:	218cb03a 	or	r6,r4,r6
 8010fcc:	11806315 	stw	r6,396(r2)
 8010fd0:	003fe306 	br	8010f60 <__alt_data_end+0xf8010f60>
 8010fd4:	80805304 	addi	r2,r16,332
 8010fd8:	80805215 	stw	r2,328(r16)
 8010fdc:	003fc306 	br	8010eec <__alt_data_end+0xf8010eec>

08010fe0 <__call_exitprocs>:
 8010fe0:	00820074 	movhi	r2,2049
 8010fe4:	108db404 	addi	r2,r2,14032
 8010fe8:	10800017 	ldw	r2,0(r2)
 8010fec:	defff304 	addi	sp,sp,-52
 8010ff0:	df000b15 	stw	fp,44(sp)
 8010ff4:	d8800015 	stw	r2,0(sp)
 8010ff8:	10805204 	addi	r2,r2,328
 8010ffc:	dd400815 	stw	r21,32(sp)
 8011000:	dfc00c15 	stw	ra,48(sp)
 8011004:	ddc00a15 	stw	r23,40(sp)
 8011008:	dd800915 	stw	r22,36(sp)
 801100c:	dd000715 	stw	r20,28(sp)
 8011010:	dcc00615 	stw	r19,24(sp)
 8011014:	dc800515 	stw	r18,20(sp)
 8011018:	dc400415 	stw	r17,16(sp)
 801101c:	dc000315 	stw	r16,12(sp)
 8011020:	d9000115 	stw	r4,4(sp)
 8011024:	2839883a 	mov	fp,r5
 8011028:	d8800215 	stw	r2,8(sp)
 801102c:	057fffc4 	movi	r21,-1
 8011030:	d8800017 	ldw	r2,0(sp)
 8011034:	14805217 	ldw	r18,328(r2)
 8011038:	90001826 	beq	r18,zero,801109c <__call_exitprocs+0xbc>
 801103c:	ddc00217 	ldw	r23,8(sp)
 8011040:	90c00117 	ldw	r3,4(r18)
 8011044:	1c3fffc4 	addi	r16,r3,-1
 8011048:	80001116 	blt	r16,zero,8011090 <__call_exitprocs+0xb0>
 801104c:	18c00044 	addi	r3,r3,1
 8011050:	8427883a 	add	r19,r16,r16
 8011054:	18c7883a 	add	r3,r3,r3
 8011058:	95802204 	addi	r22,r18,136
 801105c:	9ce7883a 	add	r19,r19,r19
 8011060:	18c7883a 	add	r3,r3,r3
 8011064:	b4e7883a 	add	r19,r22,r19
 8011068:	90e3883a 	add	r17,r18,r3
 801106c:	e0001726 	beq	fp,zero,80110cc <__call_exitprocs+0xec>
 8011070:	8c87c83a 	sub	r3,r17,r18
 8011074:	b0c7883a 	add	r3,r22,r3
 8011078:	18c01e17 	ldw	r3,120(r3)
 801107c:	1f001326 	beq	r3,fp,80110cc <__call_exitprocs+0xec>
 8011080:	843fffc4 	addi	r16,r16,-1
 8011084:	9cffff04 	addi	r19,r19,-4
 8011088:	8c7fff04 	addi	r17,r17,-4
 801108c:	857ff71e 	bne	r16,r21,801106c <__alt_data_end+0xf801106c>
 8011090:	00800034 	movhi	r2,0
 8011094:	10800004 	addi	r2,r2,0
 8011098:	10002a1e 	bne	r2,zero,8011144 <__call_exitprocs+0x164>
 801109c:	dfc00c17 	ldw	ra,48(sp)
 80110a0:	df000b17 	ldw	fp,44(sp)
 80110a4:	ddc00a17 	ldw	r23,40(sp)
 80110a8:	dd800917 	ldw	r22,36(sp)
 80110ac:	dd400817 	ldw	r21,32(sp)
 80110b0:	dd000717 	ldw	r20,28(sp)
 80110b4:	dcc00617 	ldw	r19,24(sp)
 80110b8:	dc800517 	ldw	r18,20(sp)
 80110bc:	dc400417 	ldw	r17,16(sp)
 80110c0:	dc000317 	ldw	r16,12(sp)
 80110c4:	dec00d04 	addi	sp,sp,52
 80110c8:	f800283a 	ret
 80110cc:	91000117 	ldw	r4,4(r18)
 80110d0:	88c00017 	ldw	r3,0(r17)
 80110d4:	213fffc4 	addi	r4,r4,-1
 80110d8:	24001526 	beq	r4,r16,8011130 <__call_exitprocs+0x150>
 80110dc:	88000015 	stw	zero,0(r17)
 80110e0:	183fe726 	beq	r3,zero,8011080 <__alt_data_end+0xf8011080>
 80110e4:	00800044 	movi	r2,1
 80110e8:	1408983a 	sll	r4,r2,r16
 80110ec:	91406217 	ldw	r5,392(r18)
 80110f0:	95000117 	ldw	r20,4(r18)
 80110f4:	214a703a 	and	r5,r4,r5
 80110f8:	28000b26 	beq	r5,zero,8011128 <__call_exitprocs+0x148>
 80110fc:	91406317 	ldw	r5,396(r18)
 8011100:	2148703a 	and	r4,r4,r5
 8011104:	20000c1e 	bne	r4,zero,8011138 <__call_exitprocs+0x158>
 8011108:	99400017 	ldw	r5,0(r19)
 801110c:	d9000117 	ldw	r4,4(sp)
 8011110:	183ee83a 	callr	r3
 8011114:	90c00117 	ldw	r3,4(r18)
 8011118:	1d3fc51e 	bne	r3,r20,8011030 <__alt_data_end+0xf8011030>
 801111c:	b8c00017 	ldw	r3,0(r23)
 8011120:	1cbfd726 	beq	r3,r18,8011080 <__alt_data_end+0xf8011080>
 8011124:	003fc206 	br	8011030 <__alt_data_end+0xf8011030>
 8011128:	183ee83a 	callr	r3
 801112c:	003ff906 	br	8011114 <__alt_data_end+0xf8011114>
 8011130:	94000115 	stw	r16,4(r18)
 8011134:	003fea06 	br	80110e0 <__alt_data_end+0xf80110e0>
 8011138:	99000017 	ldw	r4,0(r19)
 801113c:	183ee83a 	callr	r3
 8011140:	003ff406 	br	8011114 <__alt_data_end+0xf8011114>
 8011144:	90c00117 	ldw	r3,4(r18)
 8011148:	1800081e 	bne	r3,zero,801116c <__call_exitprocs+0x18c>
 801114c:	90c00017 	ldw	r3,0(r18)
 8011150:	18000a26 	beq	r3,zero,801117c <__call_exitprocs+0x19c>
 8011154:	9009883a 	mov	r4,r18
 8011158:	b8c00015 	stw	r3,0(r23)
 801115c:	00000000 	call	0 <__reset-0x8000000>
 8011160:	bc800017 	ldw	r18,0(r23)
 8011164:	903fb61e 	bne	r18,zero,8011040 <__alt_data_end+0xf8011040>
 8011168:	003fcc06 	br	801109c <__alt_data_end+0xf801109c>
 801116c:	90c00017 	ldw	r3,0(r18)
 8011170:	902f883a 	mov	r23,r18
 8011174:	1825883a 	mov	r18,r3
 8011178:	003ffa06 	br	8011164 <__alt_data_end+0xf8011164>
 801117c:	0007883a 	mov	r3,zero
 8011180:	003ffb06 	br	8011170 <__alt_data_end+0xf8011170>

08011184 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8011184:	defffd04 	addi	sp,sp,-12
 8011188:	df000215 	stw	fp,8(sp)
 801118c:	df000204 	addi	fp,sp,8
 8011190:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8011194:	0001883a 	nop
 8011198:	e0bfff17 	ldw	r2,-4(fp)
 801119c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 80111a0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 80111a4:	10000226 	beq	r2,zero,80111b0 <_exit+0x2c>
    ALT_SIM_FAIL();
 80111a8:	002af070 	cmpltui	zero,zero,43969
 80111ac:	00000106 	br	80111b4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 80111b0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 80111b4:	003fff06 	br	80111b4 <__alt_data_end+0xf80111b4>
